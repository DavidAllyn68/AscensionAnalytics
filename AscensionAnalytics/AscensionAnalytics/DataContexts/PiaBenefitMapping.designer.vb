'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class PiaBenefitMappingDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertPIA_BenefitMapping(instance As PIA_BenefitMapping)
    End Sub
  Partial Private Sub UpdatePIA_BenefitMapping(instance As PIA_BenefitMapping)
    End Sub
  Partial Private Sub DeletePIA_BenefitMapping(instance As PIA_BenefitMapping)
    End Sub
  Partial Private Sub InsertPIA_Benefits(instance As PIA_Benefits)
    End Sub
  Partial Private Sub UpdatePIA_Benefits(instance As PIA_Benefits)
    End Sub
  Partial Private Sub DeletePIA_Benefits(instance As PIA_Benefits)
    End Sub
  Partial Private Sub InsertPiaMapping_AscensionBenefits(instance As PiaMapping_AscensionBenefits)
    End Sub
  Partial Private Sub UpdatePiaMapping_AscensionBenefits(instance As PiaMapping_AscensionBenefits)
    End Sub
  Partial Private Sub DeletePiaMapping_AscensionBenefits(instance As PiaMapping_AscensionBenefits)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property PIA_BenefitMappings() As System.Data.Linq.Table(Of PIA_BenefitMapping)
		Get
			Return Me.GetTable(Of PIA_BenefitMapping)
		End Get
	End Property
	
	Public ReadOnly Property PIA_Benefits() As System.Data.Linq.Table(Of PIA_Benefits)
		Get
			Return Me.GetTable(Of PIA_Benefits)
		End Get
	End Property
	
	Public ReadOnly Property PiaMapping_AscensionBenefits() As System.Data.Linq.Table(Of PiaMapping_AscensionBenefits)
		Get
			Return Me.GetTable(Of PiaMapping_AscensionBenefits)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PIA_BenefitMapping")>  _
Partial Public Class PIA_BenefitMapping
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PIABenefitMappingId As Integer
	
	Private _PIABenefitCode As String
	
	Private _AscensionBenefitId As Integer
	
	Private _PIA_Benefits As EntityRef(Of PIA_Benefits)
	
	Private _PiaMapping_AscensionBenefits As EntityRef(Of PiaMapping_AscensionBenefits)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPIABenefitMappingIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPIABenefitMappingIdChanged()
    End Sub
    Partial Private Sub OnPIABenefitCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPIABenefitCodeChanged()
    End Sub
    Partial Private Sub OnAscensionBenefitIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAscensionBenefitIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PIA_Benefits = CType(Nothing, EntityRef(Of PIA_Benefits))
		Me._PiaMapping_AscensionBenefits = CType(Nothing, EntityRef(Of PiaMapping_AscensionBenefits))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PIABenefitMappingId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PIABenefitMappingId() As Integer
		Get
			Return Me._PIABenefitMappingId
		End Get
		Set
			If ((Me._PIABenefitMappingId = value)  _
						= false) Then
				Me.OnPIABenefitMappingIdChanging(value)
				Me.SendPropertyChanging
				Me._PIABenefitMappingId = value
				Me.SendPropertyChanged("PIABenefitMappingId")
				Me.OnPIABenefitMappingIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PIABenefitCode", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property PIABenefitCode() As String
		Get
			Return Me._PIABenefitCode
		End Get
		Set
			If (String.Equals(Me._PIABenefitCode, value) = false) Then
				If Me._PIA_Benefits.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPIABenefitCodeChanging(value)
				Me.SendPropertyChanging
				Me._PIABenefitCode = value
				Me.SendPropertyChanged("PIABenefitCode")
				Me.OnPIABenefitCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AscensionBenefitId", DbType:="Int NOT NULL")>  _
	Public Property AscensionBenefitId() As Integer
		Get
			Return Me._AscensionBenefitId
		End Get
		Set
			If ((Me._AscensionBenefitId = value)  _
						= false) Then
				If Me._PiaMapping_AscensionBenefits.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAscensionBenefitIdChanging(value)
				Me.SendPropertyChanging
				Me._AscensionBenefitId = value
				Me.SendPropertyChanged("AscensionBenefitId")
				Me.OnAscensionBenefitIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PIA_Benefits_PIA_BenefitMapping", Storage:="_PIA_Benefits", ThisKey:="PIABenefitCode", OtherKey:="bencode", IsForeignKey:=true)>  _
	Public Property PIA_Benefits() As PIA_Benefits
		Get
			Return Me._PIA_Benefits.Entity
		End Get
		Set
			Dim previousValue As PIA_Benefits = Me._PIA_Benefits.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PIA_Benefits.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PIA_Benefits.Entity = Nothing
					previousValue.PIA_BenefitMappings.Remove(Me)
				End If
				Me._PIA_Benefits.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PIA_BenefitMappings.Add(Me)
					Me._PIABenefitCode = value.bencode
				Else
					Me._PIABenefitCode = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PIA_Benefits")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PiaMapping_AscensionBenefits_PIA_BenefitMapping", Storage:="_PiaMapping_AscensionBenefits", ThisKey:="AscensionBenefitId", OtherKey:="BenefitId", IsForeignKey:=true)>  _
	Public Property PiaMapping_AscensionBenefits() As PiaMapping_AscensionBenefits
		Get
			Return Me._PiaMapping_AscensionBenefits.Entity
		End Get
		Set
			Dim previousValue As PiaMapping_AscensionBenefits = Me._PiaMapping_AscensionBenefits.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PiaMapping_AscensionBenefits.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PiaMapping_AscensionBenefits.Entity = Nothing
					previousValue.PIA_BenefitMappings.Remove(Me)
				End If
				Me._PiaMapping_AscensionBenefits.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PIA_BenefitMappings.Add(Me)
					Me._AscensionBenefitId = value.BenefitId
				Else
					Me._AscensionBenefitId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PiaMapping_AscensionBenefits")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PIA_Benefits")>  _
Partial Public Class PIA_Benefits
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _bencode As String = CType(Nothing, String)
	
	Private _bendescription As String
	
	Private _PIA_BenefitMappings As EntitySet(Of PIA_BenefitMapping)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbendescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnbendescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PIA_BenefitMappings = New EntitySet(Of PIA_BenefitMapping)(AddressOf Me.attach_PIA_BenefitMappings, AddressOf Me.detach_PIA_BenefitMappings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bencode", DbType:="varchar(25) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property bencode() As String
		Get
			Return Me._bencode
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bendescription", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property bendescription() As String
		Get
			Return Me._bendescription
		End Get
		Set
			If (String.Equals(Me._bendescription, value) = false) Then
				Me.OnbendescriptionChanging(value)
				Me.SendPropertyChanging
				Me._bendescription = value
				Me.SendPropertyChanged("bendescription")
				Me.OnbendescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PIA_Benefits_PIA_BenefitMapping", Storage:="_PIA_BenefitMappings", ThisKey:="bencode", OtherKey:="PIABenefitCode")>  _
	Public Property PIA_BenefitMappings() As EntitySet(Of PIA_BenefitMapping)
		Get
			Return Me._PIA_BenefitMappings
		End Get
		Set
			Me._PIA_BenefitMappings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PIA_BenefitMappings(ByVal entity As PIA_BenefitMapping)
		Me.SendPropertyChanging
		entity.PIA_Benefits = Me
	End Sub
	
	Private Sub detach_PIA_BenefitMappings(ByVal entity As PIA_BenefitMapping)
		Me.SendPropertyChanging
		entity.PIA_Benefits = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Benefits")>  _
Partial Public Class PiaMapping_AscensionBenefits
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BenefitId As Integer
	
	Private _BenefitCode As String
	
	Private _BenefitDescription As String
	
	Private _IsRxBenefit As Byte
	
	Private _IsMentalHealthBenefit As Byte
	
	Private _IsInpatientBenefit As Byte
	
	Private _IsOfficeVisitBenefit As Byte
	
	Private _IsEmergencyRoomBenefit As Byte
	
	Private _PIA_BenefitMappings As EntitySet(Of PIA_BenefitMapping)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBenefitIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBenefitIdChanged()
    End Sub
    Partial Private Sub OnBenefitCodeChanging(value As String)
    End Sub
    Partial Private Sub OnBenefitCodeChanged()
    End Sub
    Partial Private Sub OnBenefitDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnBenefitDescriptionChanged()
    End Sub
    Partial Private Sub OnIsRxBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsRxBenefitChanged()
    End Sub
    Partial Private Sub OnIsMentalHealthBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsMentalHealthBenefitChanged()
    End Sub
    Partial Private Sub OnIsInpatientBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsInpatientBenefitChanged()
    End Sub
    Partial Private Sub OnIsOfficeVisitBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsOfficeVisitBenefitChanged()
    End Sub
    Partial Private Sub OnIsEmergencyRoomBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsEmergencyRoomBenefitChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PIA_BenefitMappings = New EntitySet(Of PIA_BenefitMapping)(AddressOf Me.attach_PIA_BenefitMappings, AddressOf Me.detach_PIA_BenefitMappings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenefitId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BenefitId() As Integer
		Get
			Return Me._BenefitId
		End Get
		Set
			If ((Me._BenefitId = value)  _
						= false) Then
				Me.OnBenefitIdChanging(value)
				Me.SendPropertyChanging
				Me._BenefitId = value
				Me.SendPropertyChanged("BenefitId")
				Me.OnBenefitIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenefitCode", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property BenefitCode() As String
		Get
			Return Me._BenefitCode
		End Get
		Set
			If (String.Equals(Me._BenefitCode, value) = false) Then
				Me.OnBenefitCodeChanging(value)
				Me.SendPropertyChanging
				Me._BenefitCode = value
				Me.SendPropertyChanged("BenefitCode")
				Me.OnBenefitCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenefitDescription", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property BenefitDescription() As String
		Get
			Return Me._BenefitDescription
		End Get
		Set
			If (String.Equals(Me._BenefitDescription, value) = false) Then
				Me.OnBenefitDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._BenefitDescription = value
				Me.SendPropertyChanged("BenefitDescription")
				Me.OnBenefitDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsRxBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsRxBenefit() As Byte
		Get
			Return Me._IsRxBenefit
		End Get
		Set
			If ((Me._IsRxBenefit = value)  _
						= false) Then
				Me.OnIsRxBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsRxBenefit = value
				Me.SendPropertyChanged("IsRxBenefit")
				Me.OnIsRxBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsMentalHealthBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsMentalHealthBenefit() As Byte
		Get
			Return Me._IsMentalHealthBenefit
		End Get
		Set
			If ((Me._IsMentalHealthBenefit = value)  _
						= false) Then
				Me.OnIsMentalHealthBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsMentalHealthBenefit = value
				Me.SendPropertyChanged("IsMentalHealthBenefit")
				Me.OnIsMentalHealthBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsInpatientBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsInpatientBenefit() As Byte
		Get
			Return Me._IsInpatientBenefit
		End Get
		Set
			If ((Me._IsInpatientBenefit = value)  _
						= false) Then
				Me.OnIsInpatientBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsInpatientBenefit = value
				Me.SendPropertyChanged("IsInpatientBenefit")
				Me.OnIsInpatientBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsOfficeVisitBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsOfficeVisitBenefit() As Byte
		Get
			Return Me._IsOfficeVisitBenefit
		End Get
		Set
			If ((Me._IsOfficeVisitBenefit = value)  _
						= false) Then
				Me.OnIsOfficeVisitBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsOfficeVisitBenefit = value
				Me.SendPropertyChanged("IsOfficeVisitBenefit")
				Me.OnIsOfficeVisitBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsEmergencyRoomBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsEmergencyRoomBenefit() As Byte
		Get
			Return Me._IsEmergencyRoomBenefit
		End Get
		Set
			If ((Me._IsEmergencyRoomBenefit = value)  _
						= false) Then
				Me.OnIsEmergencyRoomBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsEmergencyRoomBenefit = value
				Me.SendPropertyChanged("IsEmergencyRoomBenefit")
				Me.OnIsEmergencyRoomBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PiaMapping_AscensionBenefits_PIA_BenefitMapping", Storage:="_PIA_BenefitMappings", ThisKey:="BenefitId", OtherKey:="AscensionBenefitId")>  _
	Public Property PIA_BenefitMappings() As EntitySet(Of PIA_BenefitMapping)
		Get
			Return Me._PIA_BenefitMappings
		End Get
		Set
			Me._PIA_BenefitMappings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PIA_BenefitMappings(ByVal entity As PIA_BenefitMapping)
		Me.SendPropertyChanging
		entity.PiaMapping_AscensionBenefits = Me
	End Sub
	
	Private Sub detach_PIA_BenefitMappings(ByVal entity As PIA_BenefitMapping)
		Me.SendPropertyChanging
		entity.PiaMapping_AscensionBenefits = Nothing
	End Sub
End Class
