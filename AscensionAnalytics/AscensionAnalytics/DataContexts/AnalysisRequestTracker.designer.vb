'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class AnalysisRequestTrackerDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAnalysisRequestLog(instance As AnalysisRequestLog)
    End Sub
  Partial Private Sub UpdateAnalysisRequestLog(instance As AnalysisRequestLog)
    End Sub
  Partial Private Sub DeleteAnalysisRequestLog(instance As AnalysisRequestLog)
    End Sub
  Partial Private Sub InsertAnalysisRequestStatus(instance As AnalysisRequestStatus)
    End Sub
  Partial Private Sub UpdateAnalysisRequestStatus(instance As AnalysisRequestStatus)
    End Sub
  Partial Private Sub DeleteAnalysisRequestStatus(instance As AnalysisRequestStatus)
    End Sub
  Partial Private Sub InsertAnalysisRequestType(instance As AnalysisRequestType)
    End Sub
  Partial Private Sub UpdateAnalysisRequestType(instance As AnalysisRequestType)
    End Sub
  Partial Private Sub DeleteAnalysisRequestType(instance As AnalysisRequestType)
    End Sub
  Partial Private Sub InsertAnalysisRequest(instance As AnalysisRequest)
    End Sub
  Partial Private Sub UpdateAnalysisRequest(instance As AnalysisRequest)
    End Sub
  Partial Private Sub DeleteAnalysisRequest(instance As AnalysisRequest)
    End Sub
  Partial Private Sub InsertAnalysisPeople_PersonType(instance As AnalysisPeople_PersonType)
    End Sub
  Partial Private Sub UpdateAnalysisPeople_PersonType(instance As AnalysisPeople_PersonType)
    End Sub
  Partial Private Sub DeleteAnalysisPeople_PersonType(instance As AnalysisPeople_PersonType)
    End Sub
  Partial Private Sub InsertAnalysisRequestPeople(instance As AnalysisRequestPeople)
    End Sub
  Partial Private Sub UpdateAnalysisRequestPeople(instance As AnalysisRequestPeople)
    End Sub
  Partial Private Sub DeleteAnalysisRequestPeople(instance As AnalysisRequestPeople)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property AnalysisRequestLogs() As System.Data.Linq.Table(Of AnalysisRequestLog)
		Get
			Return Me.GetTable(Of AnalysisRequestLog)
		End Get
	End Property
	
	Public ReadOnly Property AnalysisRequestStatus() As System.Data.Linq.Table(Of AnalysisRequestStatus)
		Get
			Return Me.GetTable(Of AnalysisRequestStatus)
		End Get
	End Property
	
	Public ReadOnly Property AnalysisRequestTypes() As System.Data.Linq.Table(Of AnalysisRequestType)
		Get
			Return Me.GetTable(Of AnalysisRequestType)
		End Get
	End Property
	
	Public ReadOnly Property AnalysisRequests() As System.Data.Linq.Table(Of AnalysisRequest)
		Get
			Return Me.GetTable(Of AnalysisRequest)
		End Get
	End Property
	
	Public ReadOnly Property AnalysisPeople_PersonTypes() As System.Data.Linq.Table(Of AnalysisPeople_PersonType)
		Get
			Return Me.GetTable(Of AnalysisPeople_PersonType)
		End Get
	End Property
	
	Public ReadOnly Property AnalysisRequestPeoples() As System.Data.Linq.Table(Of AnalysisRequestPeople)
		Get
			Return Me.GetTable(Of AnalysisRequestPeople)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AnalysisRequestLog")>  _
Partial Public Class AnalysisRequestLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LogId As Integer
	
	Private _AnalysisId As Integer
	
	Private _EntryText As String
	
	Private _EntryTime As Date
	
	Private _EffortMinutes As Integer
	
	Private _DataActivityEntry As Byte
	
	Private _EntryUser As String
	
	Private _AnalysisRequest As EntityRef(Of AnalysisRequest)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLogIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnLogIdChanged()
    End Sub
    Partial Private Sub OnAnalysisIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAnalysisIdChanged()
    End Sub
    Partial Private Sub OnEntryTextChanging(value As String)
    End Sub
    Partial Private Sub OnEntryTextChanged()
    End Sub
    Partial Private Sub OnEntryTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnEntryTimeChanged()
    End Sub
    Partial Private Sub OnEffortMinutesChanging(value As Integer)
    End Sub
    Partial Private Sub OnEffortMinutesChanged()
    End Sub
    Partial Private Sub OnDataActivityEntryChanging(value As Byte)
    End Sub
    Partial Private Sub OnDataActivityEntryChanged()
    End Sub
    Partial Private Sub OnEntryUserChanging(value As String)
    End Sub
    Partial Private Sub OnEntryUserChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AnalysisRequest = CType(Nothing, EntityRef(Of AnalysisRequest))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property LogId() As Integer
		Get
			Return Me._LogId
		End Get
		Set
			If ((Me._LogId = value)  _
						= false) Then
				Me.OnLogIdChanging(value)
				Me.SendPropertyChanging
				Me._LogId = value
				Me.SendPropertyChanged("LogId")
				Me.OnLogIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnalysisId", DbType:="Int NOT NULL")>  _
	Public Property AnalysisId() As Integer
		Get
			Return Me._AnalysisId
		End Get
		Set
			If ((Me._AnalysisId = value)  _
						= false) Then
				If Me._AnalysisRequest.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAnalysisIdChanging(value)
				Me.SendPropertyChanging
				Me._AnalysisId = value
				Me.SendPropertyChanged("AnalysisId")
				Me.OnAnalysisIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EntryText", DbType:="VarChar(8000) NOT NULL", CanBeNull:=false)>  _
	Public Property EntryText() As String
		Get
			Return Me._EntryText
		End Get
		Set
			If (String.Equals(Me._EntryText, value) = false) Then
				Me.OnEntryTextChanging(value)
				Me.SendPropertyChanging
				Me._EntryText = value
				Me.SendPropertyChanged("EntryText")
				Me.OnEntryTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EntryTime", DbType:="SmallDateTime NOT NULL")>  _
	Public Property EntryTime() As Date
		Get
			Return Me._EntryTime
		End Get
		Set
			If ((Me._EntryTime = value)  _
						= false) Then
				Me.OnEntryTimeChanging(value)
				Me.SendPropertyChanging
				Me._EntryTime = value
				Me.SendPropertyChanged("EntryTime")
				Me.OnEntryTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EffortMinutes", DbType:="Int NOT NULL")>  _
	Public Property EffortMinutes() As Integer
		Get
			Return Me._EffortMinutes
		End Get
		Set
			If ((Me._EffortMinutes = value)  _
						= false) Then
				Me.OnEffortMinutesChanging(value)
				Me.SendPropertyChanging
				Me._EffortMinutes = value
				Me.SendPropertyChanged("EffortMinutes")
				Me.OnEffortMinutesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataActivityEntry", DbType:="TinyInt NOT NULL")>  _
	Public Property DataActivityEntry() As Byte
		Get
			Return Me._DataActivityEntry
		End Get
		Set
			If ((Me._DataActivityEntry = value)  _
						= false) Then
				Me.OnDataActivityEntryChanging(value)
				Me.SendPropertyChanging
				Me._DataActivityEntry = value
				Me.SendPropertyChanged("DataActivityEntry")
				Me.OnDataActivityEntryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EntryUser", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property EntryUser() As String
		Get
			Return Me._EntryUser
		End Get
		Set
			If (String.Equals(Me._EntryUser, value) = false) Then
				Me.OnEntryUserChanging(value)
				Me.SendPropertyChanging
				Me._EntryUser = value
				Me.SendPropertyChanged("EntryUser")
				Me.OnEntryUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AnalysisRequest_AnalysisRequestLog", Storage:="_AnalysisRequest", ThisKey:="AnalysisId", OtherKey:="AnalysisId", IsForeignKey:=true)>  _
	Public Property AnalysisRequest() As AnalysisRequest
		Get
			Return Me._AnalysisRequest.Entity
		End Get
		Set
			Dim previousValue As AnalysisRequest = Me._AnalysisRequest.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AnalysisRequest.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AnalysisRequest.Entity = Nothing
					previousValue.AnalysisRequestLogs.Remove(Me)
				End If
				Me._AnalysisRequest.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AnalysisRequestLogs.Add(Me)
					Me._AnalysisId = value.AnalysisId
				Else
					Me._AnalysisId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AnalysisRequest")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AnalysisRequestStatus")>  _
Partial Public Class AnalysisRequestStatus
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StatusId As Integer
	
	Private _Status As String
	
	Private _AnalysisRequests As EntitySet(Of AnalysisRequest)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStatusIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStatusIdChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AnalysisRequests = New EntitySet(Of AnalysisRequest)(AddressOf Me.attach_AnalysisRequests, AddressOf Me.detach_AnalysisRequests)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property StatusId() As Integer
		Get
			Return Me._StatusId
		End Get
		Set
			If ((Me._StatusId = value)  _
						= false) Then
				Me.OnStatusIdChanging(value)
				Me.SendPropertyChanging
				Me._StatusId = value
				Me.SendPropertyChanged("StatusId")
				Me.OnStatusIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AnalysisRequestStatus_AnalysisRequest", Storage:="_AnalysisRequests", ThisKey:="StatusId", OtherKey:="StatusId")>  _
	Public Property AnalysisRequests() As EntitySet(Of AnalysisRequest)
		Get
			Return Me._AnalysisRequests
		End Get
		Set
			Me._AnalysisRequests.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AnalysisRequests(ByVal entity As AnalysisRequest)
		Me.SendPropertyChanging
		entity.AnalysisRequestStatus = Me
	End Sub
	
	Private Sub detach_AnalysisRequests(ByVal entity As AnalysisRequest)
		Me.SendPropertyChanging
		entity.AnalysisRequestStatus = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AnalysisRequestType")>  _
Partial Public Class AnalysisRequestType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RequestTypeId As Integer
	
	Private _RequestType As String
	
	Private _AnalysisRequests As EntitySet(Of AnalysisRequest)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRequestTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRequestTypeIdChanged()
    End Sub
    Partial Private Sub OnRequestTypeChanging(value As String)
    End Sub
    Partial Private Sub OnRequestTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AnalysisRequests = New EntitySet(Of AnalysisRequest)(AddressOf Me.attach_AnalysisRequests, AddressOf Me.detach_AnalysisRequests)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequestTypeId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RequestTypeId() As Integer
		Get
			Return Me._RequestTypeId
		End Get
		Set
			If ((Me._RequestTypeId = value)  _
						= false) Then
				Me.OnRequestTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._RequestTypeId = value
				Me.SendPropertyChanged("RequestTypeId")
				Me.OnRequestTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequestType", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property RequestType() As String
		Get
			Return Me._RequestType
		End Get
		Set
			If (String.Equals(Me._RequestType, value) = false) Then
				Me.OnRequestTypeChanging(value)
				Me.SendPropertyChanging
				Me._RequestType = value
				Me.SendPropertyChanged("RequestType")
				Me.OnRequestTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AnalysisRequestType_AnalysisRequest", Storage:="_AnalysisRequests", ThisKey:="RequestTypeId", OtherKey:="RequestTypeId")>  _
	Public Property AnalysisRequests() As EntitySet(Of AnalysisRequest)
		Get
			Return Me._AnalysisRequests
		End Get
		Set
			Me._AnalysisRequests.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AnalysisRequests(ByVal entity As AnalysisRequest)
		Me.SendPropertyChanging
		entity.AnalysisRequestType = Me
	End Sub
	
	Private Sub detach_AnalysisRequests(ByVal entity As AnalysisRequest)
		Me.SendPropertyChanging
		entity.AnalysisRequestType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AnalysisRequest")>  _
Partial Public Class AnalysisRequest
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AnalysisId As Integer
	
	Private _Name As String
	
	Private _Description As String
	
	Private _Milestone As String
	
	Private _MilestoneDate As Date
	
	Private _RequestorId As Integer
	
	Private _AssigneeId As Integer
	
	Private _DirectoryFullPath As String
	
	Private _StatusId As Integer
	
	Private _RequestTypeId As Integer
	
	Private _OpenDate As Date
	
	Private _StartDate As Date
	
	Private _EndDate As Date
	
	Private _CloseDate As Date
	
	Private _IsActive As Byte
	
	Private _ModifiedByUser As String
	
	Private _ModifiedTime As Date
	
	Private _ModifyingByUser As String
	
	Private _AnalysisRequestLogs As EntitySet(Of AnalysisRequestLog)
	
	Private _AnalysisRequestStatus As EntityRef(Of AnalysisRequestStatus)
	
	Private _AnalysisRequestType As EntityRef(Of AnalysisRequestType)
	
	Private _AnalysisPeople As EntityRef(Of AnalysisRequestPeople)
	
	Private _AnalysisRequestPeople As EntityRef(Of AnalysisRequestPeople)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAnalysisIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAnalysisIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnMilestoneChanging(value As String)
    End Sub
    Partial Private Sub OnMilestoneChanged()
    End Sub
    Partial Private Sub OnMilestoneDateChanging(value As Date)
    End Sub
    Partial Private Sub OnMilestoneDateChanged()
    End Sub
    Partial Private Sub OnRequestorIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRequestorIdChanged()
    End Sub
    Partial Private Sub OnAssigneeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAssigneeIdChanged()
    End Sub
    Partial Private Sub OnDirectoryFullPathChanging(value As String)
    End Sub
    Partial Private Sub OnDirectoryFullPathChanged()
    End Sub
    Partial Private Sub OnStatusIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStatusIdChanged()
    End Sub
    Partial Private Sub OnRequestTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRequestTypeIdChanged()
    End Sub
    Partial Private Sub OnOpenDateChanging(value As Date)
    End Sub
    Partial Private Sub OnOpenDateChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As Date)
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As Date)
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnCloseDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCloseDateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnModifiedByUserChanging(value As String)
    End Sub
    Partial Private Sub OnModifiedByUserChanged()
    End Sub
    Partial Private Sub OnModifiedTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedTimeChanged()
    End Sub
    Partial Private Sub OnModifyingByUserChanging(value As String)
    End Sub
    Partial Private Sub OnModifyingByUserChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AnalysisRequestLogs = New EntitySet(Of AnalysisRequestLog)(AddressOf Me.attach_AnalysisRequestLogs, AddressOf Me.detach_AnalysisRequestLogs)
		Me._AnalysisRequestStatus = CType(Nothing, EntityRef(Of AnalysisRequestStatus))
		Me._AnalysisRequestType = CType(Nothing, EntityRef(Of AnalysisRequestType))
		Me._AnalysisPeople = CType(Nothing, EntityRef(Of AnalysisRequestPeople))
		Me._AnalysisRequestPeople = CType(Nothing, EntityRef(Of AnalysisRequestPeople))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnalysisId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AnalysisId() As Integer
		Get
			Return Me._AnalysisId
		End Get
		Set
			If ((Me._AnalysisId = value)  _
						= false) Then
				Me.OnAnalysisIdChanging(value)
				Me.SendPropertyChanging
				Me._AnalysisId = value
				Me.SendPropertyChanged("AnalysisId")
				Me.OnAnalysisIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(2000) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Milestone", DbType:="VarChar(2000) NOT NULL", CanBeNull:=false)>  _
	Public Property Milestone() As String
		Get
			Return Me._Milestone
		End Get
		Set
			If (String.Equals(Me._Milestone, value) = false) Then
				Me.OnMilestoneChanging(value)
				Me.SendPropertyChanging
				Me._Milestone = value
				Me.SendPropertyChanged("Milestone")
				Me.OnMilestoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MilestoneDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property MilestoneDate() As Date
		Get
			Return Me._MilestoneDate
		End Get
		Set
			If ((Me._MilestoneDate = value)  _
						= false) Then
				Me.OnMilestoneDateChanging(value)
				Me.SendPropertyChanging
				Me._MilestoneDate = value
				Me.SendPropertyChanged("MilestoneDate")
				Me.OnMilestoneDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequestorId", DbType:="Int NOT NULL")>  _
	Public Property RequestorId() As Integer
		Get
			Return Me._RequestorId
		End Get
		Set
			If ((Me._RequestorId = value)  _
						= false) Then
				If Me._AnalysisRequestPeople.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRequestorIdChanging(value)
				Me.SendPropertyChanging
				Me._RequestorId = value
				Me.SendPropertyChanged("RequestorId")
				Me.OnRequestorIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssigneeId", DbType:="Int NOT NULL")>  _
	Public Property AssigneeId() As Integer
		Get
			Return Me._AssigneeId
		End Get
		Set
			If ((Me._AssigneeId = value)  _
						= false) Then
				If Me._AnalysisPeople.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAssigneeIdChanging(value)
				Me.SendPropertyChanging
				Me._AssigneeId = value
				Me.SendPropertyChanged("AssigneeId")
				Me.OnAssigneeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DirectoryFullPath", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property DirectoryFullPath() As String
		Get
			Return Me._DirectoryFullPath
		End Get
		Set
			If (String.Equals(Me._DirectoryFullPath, value) = false) Then
				Me.OnDirectoryFullPathChanging(value)
				Me.SendPropertyChanging
				Me._DirectoryFullPath = value
				Me.SendPropertyChanged("DirectoryFullPath")
				Me.OnDirectoryFullPathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusId", DbType:="Int NOT NULL")>  _
	Public Property StatusId() As Integer
		Get
			Return Me._StatusId
		End Get
		Set
			If ((Me._StatusId = value)  _
						= false) Then
				If Me._AnalysisRequestStatus.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStatusIdChanging(value)
				Me.SendPropertyChanging
				Me._StatusId = value
				Me.SendPropertyChanged("StatusId")
				Me.OnStatusIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequestTypeId", DbType:="Int NOT NULL")>  _
	Public Property RequestTypeId() As Integer
		Get
			Return Me._RequestTypeId
		End Get
		Set
			If ((Me._RequestTypeId = value)  _
						= false) Then
				If Me._AnalysisRequestType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRequestTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._RequestTypeId = value
				Me.SendPropertyChanged("RequestTypeId")
				Me.OnRequestTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OpenDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property OpenDate() As Date
		Get
			Return Me._OpenDate
		End Get
		Set
			If ((Me._OpenDate = value)  _
						= false) Then
				Me.OnOpenDateChanging(value)
				Me.SendPropertyChanging
				Me._OpenDate = value
				Me.SendPropertyChanged("OpenDate")
				Me.OnOpenDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property StartDate() As Date
		Get
			Return Me._StartDate
		End Get
		Set
			If ((Me._StartDate = value)  _
						= false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property EndDate() As Date
		Get
			Return Me._EndDate
		End Get
		Set
			If ((Me._EndDate = value)  _
						= false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CloseDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property CloseDate() As Date
		Get
			Return Me._CloseDate
		End Get
		Set
			If ((Me._CloseDate = value)  _
						= false) Then
				Me.OnCloseDateChanging(value)
				Me.SendPropertyChanging
				Me._CloseDate = value
				Me.SendPropertyChanged("CloseDate")
				Me.OnCloseDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="TinyInt NOT NULL")>  _
	Public Property IsActive() As Byte
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedByUser", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ModifiedByUser() As String
		Get
			Return Me._ModifiedByUser
		End Get
		Set
			If (String.Equals(Me._ModifiedByUser, value) = false) Then
				Me.OnModifiedByUserChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedByUser = value
				Me.SendPropertyChanged("ModifiedByUser")
				Me.OnModifiedByUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedTime", DbType:="SmallDateTime NOT NULL")>  _
	Public Property ModifiedTime() As Date
		Get
			Return Me._ModifiedTime
		End Get
		Set
			If ((Me._ModifiedTime = value)  _
						= false) Then
				Me.OnModifiedTimeChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedTime = value
				Me.SendPropertyChanged("ModifiedTime")
				Me.OnModifiedTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyingByUser", DbType:="NVarChar(50)")>  _
	Public Property ModifyingByUser() As String
		Get
			Return Me._ModifyingByUser
		End Get
		Set
			If (String.Equals(Me._ModifyingByUser, value) = false) Then
				Me.OnModifyingByUserChanging(value)
				Me.SendPropertyChanging
				Me._ModifyingByUser = value
				Me.SendPropertyChanged("ModifyingByUser")
				Me.OnModifyingByUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AnalysisRequest_AnalysisRequestLog", Storage:="_AnalysisRequestLogs", ThisKey:="AnalysisId", OtherKey:="AnalysisId")>  _
	Public Property AnalysisRequestLogs() As EntitySet(Of AnalysisRequestLog)
		Get
			Return Me._AnalysisRequestLogs
		End Get
		Set
			Me._AnalysisRequestLogs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AnalysisRequestStatus_AnalysisRequest", Storage:="_AnalysisRequestStatus", ThisKey:="StatusId", OtherKey:="StatusId", IsForeignKey:=true)>  _
	Public Property AnalysisRequestStatus() As AnalysisRequestStatus
		Get
			Return Me._AnalysisRequestStatus.Entity
		End Get
		Set
			Dim previousValue As AnalysisRequestStatus = Me._AnalysisRequestStatus.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AnalysisRequestStatus.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AnalysisRequestStatus.Entity = Nothing
					previousValue.AnalysisRequests.Remove(Me)
				End If
				Me._AnalysisRequestStatus.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AnalysisRequests.Add(Me)
					Me._StatusId = value.StatusId
				Else
					Me._StatusId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AnalysisRequestStatus")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AnalysisRequestType_AnalysisRequest", Storage:="_AnalysisRequestType", ThisKey:="RequestTypeId", OtherKey:="RequestTypeId", IsForeignKey:=true)>  _
	Public Property AnalysisRequestType() As AnalysisRequestType
		Get
			Return Me._AnalysisRequestType.Entity
		End Get
		Set
			Dim previousValue As AnalysisRequestType = Me._AnalysisRequestType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AnalysisRequestType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AnalysisRequestType.Entity = Nothing
					previousValue.AnalysisRequests.Remove(Me)
				End If
				Me._AnalysisRequestType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AnalysisRequests.Add(Me)
					Me._RequestTypeId = value.RequestTypeId
				Else
					Me._RequestTypeId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AnalysisRequestType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AnalysisRequestPeople_AnalysisRequest", Storage:="_AnalysisPeople", ThisKey:="AssigneeId", OtherKey:="PersonId", IsForeignKey:=true)>  _
	Public Property AnalysisPeople() As AnalysisRequestPeople
		Get
			Return Me._AnalysisPeople.Entity
		End Get
		Set
			Dim previousValue As AnalysisRequestPeople = Me._AnalysisPeople.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AnalysisPeople.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AnalysisPeople.Entity = Nothing
					previousValue.AnalysisRequests.Remove(Me)
				End If
				Me._AnalysisPeople.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AnalysisRequests.Add(Me)
					Me._AssigneeId = value.PersonId
				Else
					Me._AssigneeId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AnalysisPeople")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AnalysisRequestPeople_AnalysisRequest1", Storage:="_AnalysisRequestPeople", ThisKey:="RequestorId", OtherKey:="PersonId", IsForeignKey:=true)>  _
	Public Property AnalysisRequestPeople() As AnalysisRequestPeople
		Get
			Return Me._AnalysisRequestPeople.Entity
		End Get
		Set
			Dim previousValue As AnalysisRequestPeople = Me._AnalysisRequestPeople.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AnalysisRequestPeople.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AnalysisRequestPeople.Entity = Nothing
					previousValue.AnalysisRequests1.Remove(Me)
				End If
				Me._AnalysisRequestPeople.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AnalysisRequests1.Add(Me)
					Me._RequestorId = value.PersonId
				Else
					Me._RequestorId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AnalysisRequestPeople")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AnalysisRequestLogs(ByVal entity As AnalysisRequestLog)
		Me.SendPropertyChanging
		entity.AnalysisRequest = Me
	End Sub
	
	Private Sub detach_AnalysisRequestLogs(ByVal entity As AnalysisRequestLog)
		Me.SendPropertyChanging
		entity.AnalysisRequest = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AnalysisPeople_PersonType")>  _
Partial Public Class AnalysisPeople_PersonType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PersonTypeId As Integer
	
	Private _PersonType As String
	
	Private _AnalysisRequestPeoples As EntitySet(Of AnalysisRequestPeople)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPersonTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPersonTypeIdChanged()
    End Sub
    Partial Private Sub OnPersonTypeChanging(value As String)
    End Sub
    Partial Private Sub OnPersonTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AnalysisRequestPeoples = New EntitySet(Of AnalysisRequestPeople)(AddressOf Me.attach_AnalysisRequestPeoples, AddressOf Me.detach_AnalysisRequestPeoples)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PersonTypeId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PersonTypeId() As Integer
		Get
			Return Me._PersonTypeId
		End Get
		Set
			If ((Me._PersonTypeId = value)  _
						= false) Then
				Me.OnPersonTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._PersonTypeId = value
				Me.SendPropertyChanged("PersonTypeId")
				Me.OnPersonTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PersonType", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property PersonType() As String
		Get
			Return Me._PersonType
		End Get
		Set
			If (String.Equals(Me._PersonType, value) = false) Then
				Me.OnPersonTypeChanging(value)
				Me.SendPropertyChanging
				Me._PersonType = value
				Me.SendPropertyChanged("PersonType")
				Me.OnPersonTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AnalysisPeople_PersonType_AnalysisRequestPeople", Storage:="_AnalysisRequestPeoples", ThisKey:="PersonTypeId", OtherKey:="PersonTypeId")>  _
	Public Property AnalysisRequestPeoples() As EntitySet(Of AnalysisRequestPeople)
		Get
			Return Me._AnalysisRequestPeoples
		End Get
		Set
			Me._AnalysisRequestPeoples.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AnalysisRequestPeoples(ByVal entity As AnalysisRequestPeople)
		Me.SendPropertyChanging
		entity.AnalysisPeople_PersonType = Me
	End Sub
	
	Private Sub detach_AnalysisRequestPeoples(ByVal entity As AnalysisRequestPeople)
		Me.SendPropertyChanging
		entity.AnalysisPeople_PersonType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AnalysisPeople")>  _
Partial Public Class AnalysisRequestPeople
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PersonId As Integer
	
	Private _Name As String
	
	Private _PersonTypeId As Integer
	
	Private _Phone As String
	
	Private _Note As String
	
	Private _Email As String
	
	Private _WindowsUserName As String
	
	Private _IsActive As Byte
	
	Private _AnalysisRequests As EntitySet(Of AnalysisRequest)
	
	Private _AnalysisRequests1 As EntitySet(Of AnalysisRequest)
	
	Private _AnalysisPeople_PersonType As EntityRef(Of AnalysisPeople_PersonType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPersonIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPersonIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnPersonTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPersonTypeIdChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnWindowsUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnWindowsUserNameChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AnalysisRequests = New EntitySet(Of AnalysisRequest)(AddressOf Me.attach_AnalysisRequests, AddressOf Me.detach_AnalysisRequests)
		Me._AnalysisRequests1 = New EntitySet(Of AnalysisRequest)(AddressOf Me.attach_AnalysisRequests1, AddressOf Me.detach_AnalysisRequests1)
		Me._AnalysisPeople_PersonType = CType(Nothing, EntityRef(Of AnalysisPeople_PersonType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PersonId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PersonId() As Integer
		Get
			Return Me._PersonId
		End Get
		Set
			If ((Me._PersonId = value)  _
						= false) Then
				Me.OnPersonIdChanging(value)
				Me.SendPropertyChanging
				Me._PersonId = value
				Me.SendPropertyChanged("PersonId")
				Me.OnPersonIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PersonTypeId", DbType:="Int NOT NULL")>  _
	Public Property PersonTypeId() As Integer
		Get
			Return Me._PersonTypeId
		End Get
		Set
			If ((Me._PersonTypeId = value)  _
						= false) Then
				If Me._AnalysisPeople_PersonType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPersonTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._PersonTypeId = value
				Me.SendPropertyChanged("PersonTypeId")
				Me.OnPersonTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="VarChar(2000) NOT NULL", CanBeNull:=false)>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WindowsUserName", DbType:="VarChar(200)")>  _
	Public Property WindowsUserName() As String
		Get
			Return Me._WindowsUserName
		End Get
		Set
			If (String.Equals(Me._WindowsUserName, value) = false) Then
				Me.OnWindowsUserNameChanging(value)
				Me.SendPropertyChanging
				Me._WindowsUserName = value
				Me.SendPropertyChanged("WindowsUserName")
				Me.OnWindowsUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="TinyInt NOT NULL")>  _
	Public Property IsActive() As Byte
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AnalysisRequestPeople_AnalysisRequest", Storage:="_AnalysisRequests", ThisKey:="PersonId", OtherKey:="AssigneeId")>  _
	Public Property AnalysisRequests() As EntitySet(Of AnalysisRequest)
		Get
			Return Me._AnalysisRequests
		End Get
		Set
			Me._AnalysisRequests.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AnalysisRequestPeople_AnalysisRequest1", Storage:="_AnalysisRequests1", ThisKey:="PersonId", OtherKey:="RequestorId")>  _
	Public Property AnalysisRequests1() As EntitySet(Of AnalysisRequest)
		Get
			Return Me._AnalysisRequests1
		End Get
		Set
			Me._AnalysisRequests1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AnalysisPeople_PersonType_AnalysisRequestPeople", Storage:="_AnalysisPeople_PersonType", ThisKey:="PersonTypeId", OtherKey:="PersonTypeId", IsForeignKey:=true)>  _
	Public Property AnalysisPeople_PersonType() As AnalysisPeople_PersonType
		Get
			Return Me._AnalysisPeople_PersonType.Entity
		End Get
		Set
			Dim previousValue As AnalysisPeople_PersonType = Me._AnalysisPeople_PersonType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AnalysisPeople_PersonType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AnalysisPeople_PersonType.Entity = Nothing
					previousValue.AnalysisRequestPeoples.Remove(Me)
				End If
				Me._AnalysisPeople_PersonType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AnalysisRequestPeoples.Add(Me)
					Me._PersonTypeId = value.PersonTypeId
				Else
					Me._PersonTypeId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AnalysisPeople_PersonType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AnalysisRequests(ByVal entity As AnalysisRequest)
		Me.SendPropertyChanging
		entity.AnalysisPeople = Me
	End Sub
	
	Private Sub detach_AnalysisRequests(ByVal entity As AnalysisRequest)
		Me.SendPropertyChanging
		entity.AnalysisPeople = Nothing
	End Sub
	
	Private Sub attach_AnalysisRequests1(ByVal entity As AnalysisRequest)
		Me.SendPropertyChanging
		entity.AnalysisRequestPeople = Me
	End Sub
	
	Private Sub detach_AnalysisRequests1(ByVal entity As AnalysisRequest)
		Me.SendPropertyChanging
		entity.AnalysisRequestPeople = Nothing
	End Sub
End Class
