'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class ProgramRatingDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertRating_StatisticType(instance As Rating_StatisticType)
    End Sub
  Partial Private Sub UpdateRating_StatisticType(instance As Rating_StatisticType)
    End Sub
  Partial Private Sub DeleteRating_StatisticType(instance As Rating_StatisticType)
    End Sub
  Partial Private Sub InsertRating_PolicyStatistic(instance As Rating_PolicyStatistic)
    End Sub
  Partial Private Sub UpdateRating_PolicyStatistic(instance As Rating_PolicyStatistic)
    End Sub
  Partial Private Sub DeleteRating_PolicyStatistic(instance As Rating_PolicyStatistic)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Rating_StatisticTypes() As System.Data.Linq.Table(Of Rating_StatisticType)
		Get
			Return Me.GetTable(Of Rating_StatisticType)
		End Get
	End Property
	
	Public ReadOnly Property Rating_PolicyStatistics() As System.Data.Linq.Table(Of Rating_PolicyStatistic)
		Get
			Return Me.GetTable(Of Rating_PolicyStatistic)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Rating_StatisticTypes")>  _
Partial Public Class Rating_StatisticType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StatisticTypeId As Integer
	
	Private _StatisticTypeName As String
	
	Private _StatisticTypeDescription As String
	
	Private _Rating_PolicyStatistics As EntitySet(Of Rating_PolicyStatistic)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStatisticTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStatisticTypeIdChanged()
    End Sub
    Partial Private Sub OnStatisticTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnStatisticTypeNameChanged()
    End Sub
    Partial Private Sub OnStatisticTypeDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnStatisticTypeDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Rating_PolicyStatistics = New EntitySet(Of Rating_PolicyStatistic)(AddressOf Me.attach_Rating_PolicyStatistics, AddressOf Me.detach_Rating_PolicyStatistics)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatisticTypeId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property StatisticTypeId() As Integer
		Get
			Return Me._StatisticTypeId
		End Get
		Set
			If ((Me._StatisticTypeId = value)  _
						= false) Then
				Me.OnStatisticTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._StatisticTypeId = value
				Me.SendPropertyChanged("StatisticTypeId")
				Me.OnStatisticTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatisticTypeName", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property StatisticTypeName() As String
		Get
			Return Me._StatisticTypeName
		End Get
		Set
			If (String.Equals(Me._StatisticTypeName, value) = false) Then
				Me.OnStatisticTypeNameChanging(value)
				Me.SendPropertyChanging
				Me._StatisticTypeName = value
				Me.SendPropertyChanged("StatisticTypeName")
				Me.OnStatisticTypeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatisticTypeDescription", DbType:="VarChar(2000) NOT NULL", CanBeNull:=false)>  _
	Public Property StatisticTypeDescription() As String
		Get
			Return Me._StatisticTypeDescription
		End Get
		Set
			If (String.Equals(Me._StatisticTypeDescription, value) = false) Then
				Me.OnStatisticTypeDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._StatisticTypeDescription = value
				Me.SendPropertyChanged("StatisticTypeDescription")
				Me.OnStatisticTypeDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Rating_StatisticType_Rating_PolicyStatistic", Storage:="_Rating_PolicyStatistics", ThisKey:="StatisticTypeId", OtherKey:="StatisticTypeId")>  _
	Public Property Rating_PolicyStatistics() As EntitySet(Of Rating_PolicyStatistic)
		Get
			Return Me._Rating_PolicyStatistics
		End Get
		Set
			Me._Rating_PolicyStatistics.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Rating_PolicyStatistics(ByVal entity As Rating_PolicyStatistic)
		Me.SendPropertyChanging
		entity.Rating_StatisticType = Me
	End Sub
	
	Private Sub detach_Rating_PolicyStatistics(ByVal entity As Rating_PolicyStatistic)
		Me.SendPropertyChanging
		entity.Rating_StatisticType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Rating_PolicyStatistics")>  _
Partial Public Class Rating_PolicyStatistic
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PolicyStatisticId As Integer
	
	Private _policyid As Integer
	
	Private _StatisticTypeId As Integer
	
	Private _StatisticValue As Decimal
	
	Private _Rating_StatisticType As EntityRef(Of Rating_StatisticType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPolicyStatisticIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPolicyStatisticIdChanged()
    End Sub
    Partial Private Sub OnpolicyidChanging(value As Integer)
    End Sub
    Partial Private Sub OnpolicyidChanged()
    End Sub
    Partial Private Sub OnStatisticTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStatisticTypeIdChanged()
    End Sub
    Partial Private Sub OnStatisticValueChanging(value As Decimal)
    End Sub
    Partial Private Sub OnStatisticValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Rating_StatisticType = CType(Nothing, EntityRef(Of Rating_StatisticType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PolicyStatisticId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PolicyStatisticId() As Integer
		Get
			Return Me._PolicyStatisticId
		End Get
		Set
			If ((Me._PolicyStatisticId = value)  _
						= false) Then
				Me.OnPolicyStatisticIdChanging(value)
				Me.SendPropertyChanging
				Me._PolicyStatisticId = value
				Me.SendPropertyChanged("PolicyStatisticId")
				Me.OnPolicyStatisticIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_policyid", DbType:="Int NOT NULL")>  _
	Public Property policyid() As Integer
		Get
			Return Me._policyid
		End Get
		Set
			If ((Me._policyid = value)  _
						= false) Then
				Me.OnpolicyidChanging(value)
				Me.SendPropertyChanging
				Me._policyid = value
				Me.SendPropertyChanged("policyid")
				Me.OnpolicyidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatisticTypeId", DbType:="Int NOT NULL")>  _
	Public Property StatisticTypeId() As Integer
		Get
			Return Me._StatisticTypeId
		End Get
		Set
			If ((Me._StatisticTypeId = value)  _
						= false) Then
				If Me._Rating_StatisticType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStatisticTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._StatisticTypeId = value
				Me.SendPropertyChanged("StatisticTypeId")
				Me.OnStatisticTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatisticValue", DbType:="Money NOT NULL")>  _
	Public Property StatisticValue() As Decimal
		Get
			Return Me._StatisticValue
		End Get
		Set
			If ((Me._StatisticValue = value)  _
						= false) Then
				Me.OnStatisticValueChanging(value)
				Me.SendPropertyChanging
				Me._StatisticValue = value
				Me.SendPropertyChanged("StatisticValue")
				Me.OnStatisticValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Rating_StatisticType_Rating_PolicyStatistic", Storage:="_Rating_StatisticType", ThisKey:="StatisticTypeId", OtherKey:="StatisticTypeId", IsForeignKey:=true)>  _
	Public Property Rating_StatisticType() As Rating_StatisticType
		Get
			Return Me._Rating_StatisticType.Entity
		End Get
		Set
			Dim previousValue As Rating_StatisticType = Me._Rating_StatisticType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Rating_StatisticType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Rating_StatisticType.Entity = Nothing
					previousValue.Rating_PolicyStatistics.Remove(Me)
				End If
				Me._Rating_StatisticType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Rating_PolicyStatistics.Add(Me)
					Me._StatisticTypeId = value.StatisticTypeId
				Else
					Me._StatisticTypeId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Rating_StatisticType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
