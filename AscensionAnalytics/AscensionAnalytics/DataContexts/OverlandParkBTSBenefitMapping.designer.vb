'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class OverlandParkBTSBenefitMappingDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertOverlandParkBTS_BenefitMapping(instance As OverlandParkBTS_BenefitMapping)
    End Sub
  Partial Private Sub UpdateOverlandParkBTS_BenefitMapping(instance As OverlandParkBTS_BenefitMapping)
    End Sub
  Partial Private Sub DeleteOverlandParkBTS_BenefitMapping(instance As OverlandParkBTS_BenefitMapping)
    End Sub
  Partial Private Sub InsertOverlandParkBTS_BenefitCode(instance As OverlandParkBTS_BenefitCode)
    End Sub
  Partial Private Sub UpdateOverlandParkBTS_BenefitCode(instance As OverlandParkBTS_BenefitCode)
    End Sub
  Partial Private Sub DeleteOverlandParkBTS_BenefitCode(instance As OverlandParkBTS_BenefitCode)
    End Sub
  Partial Private Sub InsertOPBTS_BenefitMapping_AscensionBenefit(instance As OPBTS_BenefitMapping_AscensionBenefit)
    End Sub
  Partial Private Sub UpdateOPBTS_BenefitMapping_AscensionBenefit(instance As OPBTS_BenefitMapping_AscensionBenefit)
    End Sub
  Partial Private Sub DeleteOPBTS_BenefitMapping_AscensionBenefit(instance As OPBTS_BenefitMapping_AscensionBenefit)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property OverlandParkBTS_BenefitMappings() As System.Data.Linq.Table(Of OverlandParkBTS_BenefitMapping)
		Get
			Return Me.GetTable(Of OverlandParkBTS_BenefitMapping)
		End Get
	End Property
	
	Public ReadOnly Property OverlandParkBTS_BenefitCodes() As System.Data.Linq.Table(Of OverlandParkBTS_BenefitCode)
		Get
			Return Me.GetTable(Of OverlandParkBTS_BenefitCode)
		End Get
	End Property
	
	Public ReadOnly Property OPBTS_BenefitMapping_AscensionBenefits() As System.Data.Linq.Table(Of OPBTS_BenefitMapping_AscensionBenefit)
		Get
			Return Me.GetTable(Of OPBTS_BenefitMapping_AscensionBenefit)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OverlandParkBTS_BenefitMapping")>  _
Partial Public Class OverlandParkBTS_BenefitMapping
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OPBTSBenefitMappingId As Integer
	
	Private _OPBTSBenefitCode As String
	
	Private _AscensionBenefitId As Integer
	
	Private _OverlandParkBTS_BenefitCode As EntityRef(Of OverlandParkBTS_BenefitCode)
	
	Private _OPBTS_BenefitMapping_AscensionBenefit As EntityRef(Of OPBTS_BenefitMapping_AscensionBenefit)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOPBTSBenefitMappingIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnOPBTSBenefitMappingIdChanged()
    End Sub
    Partial Private Sub OnOPBTSBenefitCodeChanging(value As String)
    End Sub
    Partial Private Sub OnOPBTSBenefitCodeChanged()
    End Sub
    Partial Private Sub OnAscensionBenefitIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAscensionBenefitIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OverlandParkBTS_BenefitCode = CType(Nothing, EntityRef(Of OverlandParkBTS_BenefitCode))
		Me._OPBTS_BenefitMapping_AscensionBenefit = CType(Nothing, EntityRef(Of OPBTS_BenefitMapping_AscensionBenefit))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OPBTSBenefitMappingId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property OPBTSBenefitMappingId() As Integer
		Get
			Return Me._OPBTSBenefitMappingId
		End Get
		Set
			If ((Me._OPBTSBenefitMappingId = value)  _
						= false) Then
				Me.OnOPBTSBenefitMappingIdChanging(value)
				Me.SendPropertyChanging
				Me._OPBTSBenefitMappingId = value
				Me.SendPropertyChanged("OPBTSBenefitMappingId")
				Me.OnOPBTSBenefitMappingIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OPBTSBenefitCode", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property OPBTSBenefitCode() As String
		Get
			Return Me._OPBTSBenefitCode
		End Get
		Set
			If (String.Equals(Me._OPBTSBenefitCode, value) = false) Then
				If Me._OverlandParkBTS_BenefitCode.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOPBTSBenefitCodeChanging(value)
				Me.SendPropertyChanging
				Me._OPBTSBenefitCode = value
				Me.SendPropertyChanged("OPBTSBenefitCode")
				Me.OnOPBTSBenefitCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AscensionBenefitId", DbType:="Int NOT NULL")>  _
	Public Property AscensionBenefitId() As Integer
		Get
			Return Me._AscensionBenefitId
		End Get
		Set
			If ((Me._AscensionBenefitId = value)  _
						= false) Then
				If Me._OPBTS_BenefitMapping_AscensionBenefit.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAscensionBenefitIdChanging(value)
				Me.SendPropertyChanging
				Me._AscensionBenefitId = value
				Me.SendPropertyChanged("AscensionBenefitId")
				Me.OnAscensionBenefitIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OverlandParkBTS_BenefitCode_OverlandParkBTS_BenefitMapping", Storage:="_OverlandParkBTS_BenefitCode", ThisKey:="OPBTSBenefitCode", OtherKey:="BenCode", IsForeignKey:=true)>  _
	Public Property OverlandParkBTS_BenefitCode() As OverlandParkBTS_BenefitCode
		Get
			Return Me._OverlandParkBTS_BenefitCode.Entity
		End Get
		Set
			Dim previousValue As OverlandParkBTS_BenefitCode = Me._OverlandParkBTS_BenefitCode.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OverlandParkBTS_BenefitCode.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OverlandParkBTS_BenefitCode.Entity = Nothing
					previousValue.OverlandParkBTS_BenefitMappings.Remove(Me)
				End If
				Me._OverlandParkBTS_BenefitCode.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OverlandParkBTS_BenefitMappings.Add(Me)
					Me._OPBTSBenefitCode = value.BenCode
				Else
					Me._OPBTSBenefitCode = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("OverlandParkBTS_BenefitCode")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OPBTS_BenefitMapping_AscensionBenefit_OverlandParkBTS_BenefitMapping", Storage:="_OPBTS_BenefitMapping_AscensionBenefit", ThisKey:="AscensionBenefitId", OtherKey:="BenefitId", IsForeignKey:=true)>  _
	Public Property OPBTS_BenefitMapping_AscensionBenefit() As OPBTS_BenefitMapping_AscensionBenefit
		Get
			Return Me._OPBTS_BenefitMapping_AscensionBenefit.Entity
		End Get
		Set
			Dim previousValue As OPBTS_BenefitMapping_AscensionBenefit = Me._OPBTS_BenefitMapping_AscensionBenefit.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OPBTS_BenefitMapping_AscensionBenefit.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OPBTS_BenefitMapping_AscensionBenefit.Entity = Nothing
					previousValue.OverlandParkBTS_BenefitMappings.Remove(Me)
				End If
				Me._OPBTS_BenefitMapping_AscensionBenefit.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OverlandParkBTS_BenefitMappings.Add(Me)
					Me._AscensionBenefitId = value.BenefitId
				Else
					Me._AscensionBenefitId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("OPBTS_BenefitMapping_AscensionBenefit")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OverlandParkBTS_BenefitCodes")>  _
Partial Public Class OverlandParkBTS_BenefitCode
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BenefitID As Short
	
	Private _BenCode As String
	
	Private _BenDescription As String
	
	Private _CovCode As String
	
	Private _BenCategoryID As System.Nullable(Of Integer)
	
	Private _OverlandParkBTS_BenefitMappings As EntitySet(Of OverlandParkBTS_BenefitMapping)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBenefitIDChanging(value As Short)
    End Sub
    Partial Private Sub OnBenefitIDChanged()
    End Sub
    Partial Private Sub OnBenCodeChanging(value As String)
    End Sub
    Partial Private Sub OnBenCodeChanged()
    End Sub
    Partial Private Sub OnBenDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnBenDescriptionChanged()
    End Sub
    Partial Private Sub OnCovCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCovCodeChanged()
    End Sub
    Partial Private Sub OnBenCategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBenCategoryIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OverlandParkBTS_BenefitMappings = New EntitySet(Of OverlandParkBTS_BenefitMapping)(AddressOf Me.attach_OverlandParkBTS_BenefitMappings, AddressOf Me.detach_OverlandParkBTS_BenefitMappings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenefitID", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property BenefitID() As Short
		Get
			Return Me._BenefitID
		End Get
		Set
			If ((Me._BenefitID = value)  _
						= false) Then
				Me.OnBenefitIDChanging(value)
				Me.SendPropertyChanging
				Me._BenefitID = value
				Me.SendPropertyChanged("BenefitID")
				Me.OnBenefitIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenCode", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property BenCode() As String
		Get
			Return Me._BenCode
		End Get
		Set
			If (String.Equals(Me._BenCode, value) = false) Then
				Me.OnBenCodeChanging(value)
				Me.SendPropertyChanging
				Me._BenCode = value
				Me.SendPropertyChanged("BenCode")
				Me.OnBenCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenDescription", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property BenDescription() As String
		Get
			Return Me._BenDescription
		End Get
		Set
			If (String.Equals(Me._BenDescription, value) = false) Then
				Me.OnBenDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._BenDescription = value
				Me.SendPropertyChanged("BenDescription")
				Me.OnBenDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CovCode", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CovCode() As String
		Get
			Return Me._CovCode
		End Get
		Set
			If (String.Equals(Me._CovCode, value) = false) Then
				Me.OnCovCodeChanging(value)
				Me.SendPropertyChanging
				Me._CovCode = value
				Me.SendPropertyChanged("CovCode")
				Me.OnCovCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenCategoryID", DbType:="Int")>  _
	Public Property BenCategoryID() As System.Nullable(Of Integer)
		Get
			Return Me._BenCategoryID
		End Get
		Set
			If (Me._BenCategoryID.Equals(value) = false) Then
				Me.OnBenCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._BenCategoryID = value
				Me.SendPropertyChanged("BenCategoryID")
				Me.OnBenCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OverlandParkBTS_BenefitCode_OverlandParkBTS_BenefitMapping", Storage:="_OverlandParkBTS_BenefitMappings", ThisKey:="BenCode", OtherKey:="OPBTSBenefitCode")>  _
	Public Property OverlandParkBTS_BenefitMappings() As EntitySet(Of OverlandParkBTS_BenefitMapping)
		Get
			Return Me._OverlandParkBTS_BenefitMappings
		End Get
		Set
			Me._OverlandParkBTS_BenefitMappings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OverlandParkBTS_BenefitMappings(ByVal entity As OverlandParkBTS_BenefitMapping)
		Me.SendPropertyChanging
		entity.OverlandParkBTS_BenefitCode = Me
	End Sub
	
	Private Sub detach_OverlandParkBTS_BenefitMappings(ByVal entity As OverlandParkBTS_BenefitMapping)
		Me.SendPropertyChanging
		entity.OverlandParkBTS_BenefitCode = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Benefits")>  _
Partial Public Class OPBTS_BenefitMapping_AscensionBenefit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BenefitId As Integer
	
	Private _BenefitCode As String
	
	Private _BenefitDescription As String
	
	Private _BenefitCategoryId As Integer
	
	Private _IsRxBenefit As Byte
	
	Private _IsMentalHealthBenefit As Byte
	
	Private _IsInpatientBenefit As Byte
	
	Private _IsOfficeVisitBenefit As Byte
	
	Private _IsEmergencyRoomBenefit As Byte
	
	Private _OverlandParkBTS_BenefitMappings As EntitySet(Of OverlandParkBTS_BenefitMapping)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBenefitIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBenefitIdChanged()
    End Sub
    Partial Private Sub OnBenefitCodeChanging(value As String)
    End Sub
    Partial Private Sub OnBenefitCodeChanged()
    End Sub
    Partial Private Sub OnBenefitDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnBenefitDescriptionChanged()
    End Sub
    Partial Private Sub OnBenefitCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBenefitCategoryIdChanged()
    End Sub
    Partial Private Sub OnIsRxBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsRxBenefitChanged()
    End Sub
    Partial Private Sub OnIsMentalHealthBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsMentalHealthBenefitChanged()
    End Sub
    Partial Private Sub OnIsInpatientBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsInpatientBenefitChanged()
    End Sub
    Partial Private Sub OnIsOfficeVisitBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsOfficeVisitBenefitChanged()
    End Sub
    Partial Private Sub OnIsEmergencyRoomBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsEmergencyRoomBenefitChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OverlandParkBTS_BenefitMappings = New EntitySet(Of OverlandParkBTS_BenefitMapping)(AddressOf Me.attach_OverlandParkBTS_BenefitMappings, AddressOf Me.detach_OverlandParkBTS_BenefitMappings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenefitId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BenefitId() As Integer
		Get
			Return Me._BenefitId
		End Get
		Set
			If ((Me._BenefitId = value)  _
						= false) Then
				Me.OnBenefitIdChanging(value)
				Me.SendPropertyChanging
				Me._BenefitId = value
				Me.SendPropertyChanged("BenefitId")
				Me.OnBenefitIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenefitCode", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property BenefitCode() As String
		Get
			Return Me._BenefitCode
		End Get
		Set
			If (String.Equals(Me._BenefitCode, value) = false) Then
				Me.OnBenefitCodeChanging(value)
				Me.SendPropertyChanging
				Me._BenefitCode = value
				Me.SendPropertyChanged("BenefitCode")
				Me.OnBenefitCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenefitDescription", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property BenefitDescription() As String
		Get
			Return Me._BenefitDescription
		End Get
		Set
			If (String.Equals(Me._BenefitDescription, value) = false) Then
				Me.OnBenefitDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._BenefitDescription = value
				Me.SendPropertyChanged("BenefitDescription")
				Me.OnBenefitDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenefitCategoryId", DbType:="Int NOT NULL")>  _
	Public Property BenefitCategoryId() As Integer
		Get
			Return Me._BenefitCategoryId
		End Get
		Set
			If ((Me._BenefitCategoryId = value)  _
						= false) Then
				Me.OnBenefitCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._BenefitCategoryId = value
				Me.SendPropertyChanged("BenefitCategoryId")
				Me.OnBenefitCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsRxBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsRxBenefit() As Byte
		Get
			Return Me._IsRxBenefit
		End Get
		Set
			If ((Me._IsRxBenefit = value)  _
						= false) Then
				Me.OnIsRxBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsRxBenefit = value
				Me.SendPropertyChanged("IsRxBenefit")
				Me.OnIsRxBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsMentalHealthBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsMentalHealthBenefit() As Byte
		Get
			Return Me._IsMentalHealthBenefit
		End Get
		Set
			If ((Me._IsMentalHealthBenefit = value)  _
						= false) Then
				Me.OnIsMentalHealthBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsMentalHealthBenefit = value
				Me.SendPropertyChanged("IsMentalHealthBenefit")
				Me.OnIsMentalHealthBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsInpatientBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsInpatientBenefit() As Byte
		Get
			Return Me._IsInpatientBenefit
		End Get
		Set
			If ((Me._IsInpatientBenefit = value)  _
						= false) Then
				Me.OnIsInpatientBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsInpatientBenefit = value
				Me.SendPropertyChanged("IsInpatientBenefit")
				Me.OnIsInpatientBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsOfficeVisitBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsOfficeVisitBenefit() As Byte
		Get
			Return Me._IsOfficeVisitBenefit
		End Get
		Set
			If ((Me._IsOfficeVisitBenefit = value)  _
						= false) Then
				Me.OnIsOfficeVisitBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsOfficeVisitBenefit = value
				Me.SendPropertyChanged("IsOfficeVisitBenefit")
				Me.OnIsOfficeVisitBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsEmergencyRoomBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsEmergencyRoomBenefit() As Byte
		Get
			Return Me._IsEmergencyRoomBenefit
		End Get
		Set
			If ((Me._IsEmergencyRoomBenefit = value)  _
						= false) Then
				Me.OnIsEmergencyRoomBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsEmergencyRoomBenefit = value
				Me.SendPropertyChanged("IsEmergencyRoomBenefit")
				Me.OnIsEmergencyRoomBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OPBTS_BenefitMapping_AscensionBenefit_OverlandParkBTS_BenefitMapping", Storage:="_OverlandParkBTS_BenefitMappings", ThisKey:="BenefitId", OtherKey:="AscensionBenefitId")>  _
	Public Property OverlandParkBTS_BenefitMappings() As EntitySet(Of OverlandParkBTS_BenefitMapping)
		Get
			Return Me._OverlandParkBTS_BenefitMappings
		End Get
		Set
			Me._OverlandParkBTS_BenefitMappings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OverlandParkBTS_BenefitMappings(ByVal entity As OverlandParkBTS_BenefitMapping)
		Me.SendPropertyChanging
		entity.OPBTS_BenefitMapping_AscensionBenefit = Me
	End Sub
	
	Private Sub detach_OverlandParkBTS_BenefitMappings(ByVal entity As OverlandParkBTS_BenefitMapping)
		Me.SendPropertyChanging
		entity.OPBTS_BenefitMapping_AscensionBenefit = Nothing
	End Sub
End Class
