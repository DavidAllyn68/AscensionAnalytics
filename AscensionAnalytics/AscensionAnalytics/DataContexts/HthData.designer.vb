'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class HthDataDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertHTH_GROUP(instance As HTH_GROUP)
    End Sub
  Partial Private Sub UpdateHTH_GROUP(instance As HTH_GROUP)
    End Sub
  Partial Private Sub DeleteHTH_GROUP(instance As HTH_GROUP)
    End Sub
  Partial Private Sub InsertHTH_GROUPS_MAP(instance As HTH_GROUPS_MAP)
    End Sub
  Partial Private Sub UpdateHTH_GROUPS_MAP(instance As HTH_GROUPS_MAP)
    End Sub
  Partial Private Sub DeleteHTH_GROUPS_MAP(instance As HTH_GROUPS_MAP)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property HTH_GROUPs() As System.Data.Linq.Table(Of HTH_GROUP)
		Get
			Return Me.GetTable(Of HTH_GROUP)
		End Get
	End Property
	
	Public ReadOnly Property HthDataSchoolgroups() As System.Data.Linq.Table(Of HthDataSchoolgroups)
		Get
			Return Me.GetTable(Of HthDataSchoolgroups)
		End Get
	End Property
	
	Public ReadOnly Property HTH_GROUPS_MAPs() As System.Data.Linq.Table(Of HTH_GROUPS_MAP)
		Get
			Return Me.GetTable(Of HTH_GROUPS_MAP)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.hthFileImport_FinishAndCleanUp")>  _
	Public Function hthFileImport_FinishAndCleanUp() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.hthFileImport_LoadDenormForNightlyCompile")>  _
	Public Function hthFileImport_LoadDenormForNightlyCompile() As ISingleResult(Of hthFileImport_LoadDenormForNightlyCompileResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of hthFileImport_LoadDenormForNightlyCompileResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.hthFileImport_ProcessDataTranslators")>  _
	Public Function hthFileImport_ProcessDataTranslators() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HTH_GROUPS")>  _
Partial Public Class HTH_GROUP
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GROUP_CODE As Integer
	
	Private _GROUP_DESCRIPTION As String
	
	Private _SUB_GROUP_DESCRIPTION As String
	
	Private _HTH_GROUPS_MAP As EntityRef(Of HTH_GROUPS_MAP)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGROUP_CODEChanging(value As Integer)
    End Sub
    Partial Private Sub OnGROUP_CODEChanged()
    End Sub
    Partial Private Sub OnGROUP_DESCRIPTIONChanging(value As String)
    End Sub
    Partial Private Sub OnGROUP_DESCRIPTIONChanged()
    End Sub
    Partial Private Sub OnSUB_GROUP_DESCRIPTIONChanging(value As String)
    End Sub
    Partial Private Sub OnSUB_GROUP_DESCRIPTIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._HTH_GROUPS_MAP = CType(Nothing, EntityRef(Of HTH_GROUPS_MAP))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GROUP_CODE", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property GROUP_CODE() As Integer
		Get
			Return Me._GROUP_CODE
		End Get
		Set
			If ((Me._GROUP_CODE = value)  _
						= false) Then
				Me.OnGROUP_CODEChanging(value)
				Me.SendPropertyChanging
				Me._GROUP_CODE = value
				Me.SendPropertyChanged("GROUP_CODE")
				Me.OnGROUP_CODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GROUP_DESCRIPTION", DbType:="VarChar(50)")>  _
	Public Property GROUP_DESCRIPTION() As String
		Get
			Return Me._GROUP_DESCRIPTION
		End Get
		Set
			If (String.Equals(Me._GROUP_DESCRIPTION, value) = false) Then
				Me.OnGROUP_DESCRIPTIONChanging(value)
				Me.SendPropertyChanging
				Me._GROUP_DESCRIPTION = value
				Me.SendPropertyChanged("GROUP_DESCRIPTION")
				Me.OnGROUP_DESCRIPTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SUB_GROUP_DESCRIPTION", DbType:="VarChar(50)")>  _
	Public Property SUB_GROUP_DESCRIPTION() As String
		Get
			Return Me._SUB_GROUP_DESCRIPTION
		End Get
		Set
			If (String.Equals(Me._SUB_GROUP_DESCRIPTION, value) = false) Then
				Me.OnSUB_GROUP_DESCRIPTIONChanging(value)
				Me.SendPropertyChanging
				Me._SUB_GROUP_DESCRIPTION = value
				Me.SendPropertyChanged("SUB_GROUP_DESCRIPTION")
				Me.OnSUB_GROUP_DESCRIPTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HTH_GROUP_HTH_GROUPS_MAP", Storage:="_HTH_GROUPS_MAP", ThisKey:="GROUP_CODE", OtherKey:="hth_group_cd", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property HTH_GROUPS_MAP() As HTH_GROUPS_MAP
		Get
			Return Me._HTH_GROUPS_MAP.Entity
		End Get
		Set
			Dim previousValue As HTH_GROUPS_MAP = Me._HTH_GROUPS_MAP.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._HTH_GROUPS_MAP.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._HTH_GROUPS_MAP.Entity = Nothing
					previousValue.HTH_GROUP = Nothing
				End If
				Me._HTH_GROUPS_MAP.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.HTH_GROUP = Me
				End If
				Me.SendPropertyChanged("HTH_GROUPS_MAP")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.schoolgroups")>  _
Partial Public Class HthDataSchoolgroups
	
	Private _school_nm As String
	
	Private _schoolgroup_cd As String
	
	Private _schoolgroup_nm As String
	
	Private _schoolgroup As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_school_nm", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property school_nm() As String
		Get
			Return Me._school_nm
		End Get
		Set
			If (String.Equals(Me._school_nm, value) = false) Then
				Me._school_nm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_schoolgroup_cd", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property schoolgroup_cd() As String
		Get
			Return Me._schoolgroup_cd
		End Get
		Set
			If (String.Equals(Me._schoolgroup_cd, value) = false) Then
				Me._schoolgroup_cd = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_schoolgroup_nm", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property schoolgroup_nm() As String
		Get
			Return Me._schoolgroup_nm
		End Get
		Set
			If (String.Equals(Me._schoolgroup_nm, value) = false) Then
				Me._schoolgroup_nm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_schoolgroup", DbType:="VarChar(103)")>  _
	Public Property schoolgroup() As String
		Get
			Return Me._schoolgroup
		End Get
		Set
			If (String.Equals(Me._schoolgroup, value) = false) Then
				Me._schoolgroup = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HTH_GROUPS_MAP")>  _
Partial Public Class HTH_GROUPS_MAP
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _hth_group_cd As Integer
	
	Private _hth_group_ds As String
	
	Private _hth_sub_group_ds As String
	
	Private _ren_group_cd As String
	
	Private _HTH_GROUP As EntityRef(Of HTH_GROUP)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onhth_group_cdChanging(value As Integer)
    End Sub
    Partial Private Sub Onhth_group_cdChanged()
    End Sub
    Partial Private Sub Onhth_group_dsChanging(value As String)
    End Sub
    Partial Private Sub Onhth_group_dsChanged()
    End Sub
    Partial Private Sub Onhth_sub_group_dsChanging(value As String)
    End Sub
    Partial Private Sub Onhth_sub_group_dsChanged()
    End Sub
    Partial Private Sub Onren_group_cdChanging(value As String)
    End Sub
    Partial Private Sub Onren_group_cdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._HTH_GROUP = CType(Nothing, EntityRef(Of HTH_GROUP))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hth_group_cd", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property hth_group_cd() As Integer
		Get
			Return Me._hth_group_cd
		End Get
		Set
			If ((Me._hth_group_cd = value)  _
						= false) Then
				If Me._HTH_GROUP.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onhth_group_cdChanging(value)
				Me.SendPropertyChanging
				Me._hth_group_cd = value
				Me.SendPropertyChanged("hth_group_cd")
				Me.Onhth_group_cdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hth_group_ds", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property hth_group_ds() As String
		Get
			Return Me._hth_group_ds
		End Get
		Set
			If (String.Equals(Me._hth_group_ds, value) = false) Then
				Me.Onhth_group_dsChanging(value)
				Me.SendPropertyChanging
				Me._hth_group_ds = value
				Me.SendPropertyChanged("hth_group_ds")
				Me.Onhth_group_dsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hth_sub_group_ds", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property hth_sub_group_ds() As String
		Get
			Return Me._hth_sub_group_ds
		End Get
		Set
			If (String.Equals(Me._hth_sub_group_ds, value) = false) Then
				Me.Onhth_sub_group_dsChanging(value)
				Me.SendPropertyChanging
				Me._hth_sub_group_ds = value
				Me.SendPropertyChanged("hth_sub_group_ds")
				Me.Onhth_sub_group_dsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ren_group_cd", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property ren_group_cd() As String
		Get
			Return Me._ren_group_cd
		End Get
		Set
			If (String.Equals(Me._ren_group_cd, value) = false) Then
				Me.Onren_group_cdChanging(value)
				Me.SendPropertyChanging
				Me._ren_group_cd = value
				Me.SendPropertyChanged("ren_group_cd")
				Me.Onren_group_cdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HTH_GROUP_HTH_GROUPS_MAP", Storage:="_HTH_GROUP", ThisKey:="hth_group_cd", OtherKey:="GROUP_CODE", IsForeignKey:=true)>  _
	Public Property HTH_GROUP() As HTH_GROUP
		Get
			Return Me._HTH_GROUP.Entity
		End Get
		Set
			Dim previousValue As HTH_GROUP = Me._HTH_GROUP.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._HTH_GROUP.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._HTH_GROUP.Entity = Nothing
					previousValue.HTH_GROUPS_MAP = Nothing
				End If
				Me._HTH_GROUP.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HTH_GROUPS_MAP = Me
					Me._hth_group_cd = value.GROUP_CODE
				Else
					Me._hth_group_cd = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("HTH_GROUP")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class hthFileImport_LoadDenormForNightlyCompileResult
	
	Private _MessageQueueId As Integer
	
	Private _MessageSubject As String
	
	Private _MessageBody As String
	
	Private _MessageSenderAddress As String
	
	Private _MessageRecipientAddress As String
	
	Private _MessageCreatedDate As Date
	
	Private _MessageScheduleDate As Date
	
	Private _MessageSentDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageQueueId", DbType:="Int NOT NULL")>  _
	Public Property MessageQueueId() As Integer
		Get
			Return Me._MessageQueueId
		End Get
		Set
			If ((Me._MessageQueueId = value)  _
						= false) Then
				Me._MessageQueueId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageSubject", DbType:="VarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property MessageSubject() As String
		Get
			Return Me._MessageSubject
		End Get
		Set
			If (String.Equals(Me._MessageSubject, value) = false) Then
				Me._MessageSubject = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageBody", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MessageBody() As String
		Get
			Return Me._MessageBody
		End Get
		Set
			If (String.Equals(Me._MessageBody, value) = false) Then
				Me._MessageBody = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageSenderAddress", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property MessageSenderAddress() As String
		Get
			Return Me._MessageSenderAddress
		End Get
		Set
			If (String.Equals(Me._MessageSenderAddress, value) = false) Then
				Me._MessageSenderAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageRecipientAddress", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property MessageRecipientAddress() As String
		Get
			Return Me._MessageRecipientAddress
		End Get
		Set
			If (String.Equals(Me._MessageRecipientAddress, value) = false) Then
				Me._MessageRecipientAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageCreatedDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property MessageCreatedDate() As Date
		Get
			Return Me._MessageCreatedDate
		End Get
		Set
			If ((Me._MessageCreatedDate = value)  _
						= false) Then
				Me._MessageCreatedDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageScheduleDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property MessageScheduleDate() As Date
		Get
			Return Me._MessageScheduleDate
		End Get
		Set
			If ((Me._MessageScheduleDate = value)  _
						= false) Then
				Me._MessageScheduleDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageSentDate", DbType:="SmallDateTime")>  _
	Public Property MessageSentDate() As System.Nullable(Of Date)
		Get
			Return Me._MessageSentDate
		End Get
		Set
			If (Me._MessageSentDate.Equals(value) = false) Then
				Me._MessageSentDate = value
			End If
		End Set
	End Property
End Class
