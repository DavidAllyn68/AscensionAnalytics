'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class DistriubtionTiersDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertDistribution(instance As Distribution)
    End Sub
  Partial Private Sub UpdateDistribution(instance As Distribution)
    End Sub
  Partial Private Sub DeleteDistribution(instance As Distribution)
    End Sub
  Partial Private Sub InsertDistributionTier(instance As DistributionTier)
    End Sub
  Partial Private Sub UpdateDistributionTier(instance As DistributionTier)
    End Sub
  Partial Private Sub DeleteDistributionTier(instance As DistributionTier)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Distributions() As System.Data.Linq.Table(Of Distribution)
		Get
			Return Me.GetTable(Of Distribution)
		End Get
	End Property
	
	Public ReadOnly Property DistributionTiers() As System.Data.Linq.Table(Of DistributionTier)
		Get
			Return Me.GetTable(Of DistributionTier)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Distributions")>  _
Partial Public Class Distribution
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DistributionId As Integer
	
	Private _DistributionName As String
	
	Private _DistributionDescription As String
	
	Private _DistributionTiers As EntitySet(Of DistributionTier)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDistributionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDistributionIdChanged()
    End Sub
    Partial Private Sub OnDistributionNameChanging(value As String)
    End Sub
    Partial Private Sub OnDistributionNameChanged()
    End Sub
    Partial Private Sub OnDistributionDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDistributionDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DistributionTiers = New EntitySet(Of DistributionTier)(AddressOf Me.attach_DistributionTiers, AddressOf Me.detach_DistributionTiers)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistributionId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DistributionId() As Integer
		Get
			Return Me._DistributionId
		End Get
		Set
			If ((Me._DistributionId = value)  _
						= false) Then
				Me.OnDistributionIdChanging(value)
				Me.SendPropertyChanging
				Me._DistributionId = value
				Me.SendPropertyChanged("DistributionId")
				Me.OnDistributionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistributionName", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property DistributionName() As String
		Get
			Return Me._DistributionName
		End Get
		Set
			If (String.Equals(Me._DistributionName, value) = false) Then
				Me.OnDistributionNameChanging(value)
				Me.SendPropertyChanging
				Me._DistributionName = value
				Me.SendPropertyChanged("DistributionName")
				Me.OnDistributionNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistributionDescription", DbType:="VarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property DistributionDescription() As String
		Get
			Return Me._DistributionDescription
		End Get
		Set
			If (String.Equals(Me._DistributionDescription, value) = false) Then
				Me.OnDistributionDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._DistributionDescription = value
				Me.SendPropertyChanged("DistributionDescription")
				Me.OnDistributionDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Distribution_DistributionTier", Storage:="_DistributionTiers", ThisKey:="DistributionId", OtherKey:="DistributionId")>  _
	Public Property DistributionTiers() As EntitySet(Of DistributionTier)
		Get
			Return Me._DistributionTiers
		End Get
		Set
			Me._DistributionTiers.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DistributionTiers(ByVal entity As DistributionTier)
		Me.SendPropertyChanging
		entity.Distribution = Me
	End Sub
	
	Private Sub detach_DistributionTiers(ByVal entity As DistributionTier)
		Me.SendPropertyChanging
		entity.Distribution = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DistributionTiers")>  _
Partial Public Class DistributionTier
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DistributionTierId As Integer
	
	Private _DistributionId As Integer
	
	Private _TierFloor As Double
	
	Private _TierCeiling As Double
	
	Private _TierDisplay As String
	
	Private _sortOrder As Double
	
	Private _Distribution As EntityRef(Of Distribution)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDistributionTierIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDistributionTierIdChanged()
    End Sub
    Partial Private Sub OnDistributionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDistributionIdChanged()
    End Sub
    Partial Private Sub OnTierFloorChanging(value As Double)
    End Sub
    Partial Private Sub OnTierFloorChanged()
    End Sub
    Partial Private Sub OnTierCeilingChanging(value As Double)
    End Sub
    Partial Private Sub OnTierCeilingChanged()
    End Sub
    Partial Private Sub OnTierDisplayChanging(value As String)
    End Sub
    Partial Private Sub OnTierDisplayChanged()
    End Sub
    Partial Private Sub OnsortOrderChanging(value As Double)
    End Sub
    Partial Private Sub OnsortOrderChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Distribution = CType(Nothing, EntityRef(Of Distribution))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistributionTierId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DistributionTierId() As Integer
		Get
			Return Me._DistributionTierId
		End Get
		Set
			If ((Me._DistributionTierId = value)  _
						= false) Then
				Me.OnDistributionTierIdChanging(value)
				Me.SendPropertyChanging
				Me._DistributionTierId = value
				Me.SendPropertyChanged("DistributionTierId")
				Me.OnDistributionTierIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistributionId", DbType:="Int NOT NULL")>  _
	Public Property DistributionId() As Integer
		Get
			Return Me._DistributionId
		End Get
		Set
			If ((Me._DistributionId = value)  _
						= false) Then
				If Me._Distribution.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDistributionIdChanging(value)
				Me.SendPropertyChanging
				Me._DistributionId = value
				Me.SendPropertyChanged("DistributionId")
				Me.OnDistributionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TierFloor", DbType:="Float NOT NULL")>  _
	Public Property TierFloor() As Double
		Get
			Return Me._TierFloor
		End Get
		Set
			If ((Me._TierFloor = value)  _
						= false) Then
				Me.OnTierFloorChanging(value)
				Me.SendPropertyChanging
				Me._TierFloor = value
				Me.SendPropertyChanged("TierFloor")
				Me.OnTierFloorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TierCeiling", DbType:="Float NOT NULL")>  _
	Public Property TierCeiling() As Double
		Get
			Return Me._TierCeiling
		End Get
		Set
			If ((Me._TierCeiling = value)  _
						= false) Then
				Me.OnTierCeilingChanging(value)
				Me.SendPropertyChanging
				Me._TierCeiling = value
				Me.SendPropertyChanged("TierCeiling")
				Me.OnTierCeilingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TierDisplay", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TierDisplay() As String
		Get
			Return Me._TierDisplay
		End Get
		Set
			If (String.Equals(Me._TierDisplay, value) = false) Then
				Me.OnTierDisplayChanging(value)
				Me.SendPropertyChanging
				Me._TierDisplay = value
				Me.SendPropertyChanged("TierDisplay")
				Me.OnTierDisplayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortOrder", DbType:="Float NOT NULL")>  _
	Public Property sortOrder() As Double
		Get
			Return Me._sortOrder
		End Get
		Set
			If ((Me._sortOrder = value)  _
						= false) Then
				Me.OnsortOrderChanging(value)
				Me.SendPropertyChanging
				Me._sortOrder = value
				Me.SendPropertyChanged("sortOrder")
				Me.OnsortOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Distribution_DistributionTier", Storage:="_Distribution", ThisKey:="DistributionId", OtherKey:="DistributionId", IsForeignKey:=true)>  _
	Public Property Distribution() As Distribution
		Get
			Return Me._Distribution.Entity
		End Get
		Set
			Dim previousValue As Distribution = Me._Distribution.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Distribution.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Distribution.Entity = Nothing
					previousValue.DistributionTiers.Remove(Me)
				End If
				Me._Distribution.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DistributionTiers.Add(Me)
					Me._DistributionId = value.DistributionId
				Else
					Me._DistributionId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Distribution")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
