'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class DataWarehouseDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertDataWarehouseTypeOfService(instance As DataWarehouseTypeOfService)
    End Sub
  Partial Private Sub UpdateDataWarehouseTypeOfService(instance As DataWarehouseTypeOfService)
    End Sub
  Partial Private Sub DeleteDataWarehouseTypeOfService(instance As DataWarehouseTypeOfService)
    End Sub
  Partial Private Sub InsertDataWarehouseTypeOfServiceCategory(instance As DataWarehouseTypeOfServiceCategory)
    End Sub
  Partial Private Sub UpdateDataWarehouseTypeOfServiceCategory(instance As DataWarehouseTypeOfServiceCategory)
    End Sub
  Partial Private Sub DeleteDataWarehouseTypeOfServiceCategory(instance As DataWarehouseTypeOfServiceCategory)
    End Sub
  Partial Private Sub InsertDataWarehouseTypeOfServiceSubCategory(instance As DataWarehouseTypeOfServiceSubCategory)
    End Sub
  Partial Private Sub UpdateDataWarehouseTypeOfServiceSubCategory(instance As DataWarehouseTypeOfServiceSubCategory)
    End Sub
  Partial Private Sub DeleteDataWarehouseTypeOfServiceSubCategory(instance As DataWarehouseTypeOfServiceSubCategory)
    End Sub
  Partial Private Sub InsertDataWarehouseDiagnoses(instance As DataWarehouseDiagnoses)
    End Sub
  Partial Private Sub UpdateDataWarehouseDiagnoses(instance As DataWarehouseDiagnoses)
    End Sub
  Partial Private Sub DeleteDataWarehouseDiagnoses(instance As DataWarehouseDiagnoses)
    End Sub
  Partial Private Sub InsertDataWarehouseDatasources(instance As DataWarehouseDatasources)
    End Sub
  Partial Private Sub UpdateDataWarehouseDatasources(instance As DataWarehouseDatasources)
    End Sub
  Partial Private Sub DeleteDataWarehouseDatasources(instance As DataWarehouseDatasources)
    End Sub
  Partial Private Sub InsertDataWarehouseDiagnosisCategories(instance As DataWarehouseDiagnosisCategories)
    End Sub
  Partial Private Sub UpdateDataWarehouseDiagnosisCategories(instance As DataWarehouseDiagnosisCategories)
    End Sub
  Partial Private Sub DeleteDataWarehouseDiagnosisCategories(instance As DataWarehouseDiagnosisCategories)
    End Sub
  Partial Private Sub InsertDataWarehouseDiagnosisCodeType(instance As DataWarehouseDiagnosisCodeType)
    End Sub
  Partial Private Sub UpdateDataWarehouseDiagnosisCodeType(instance As DataWarehouseDiagnosisCodeType)
    End Sub
  Partial Private Sub DeleteDataWarehouseDiagnosisCodeType(instance As DataWarehouseDiagnosisCodeType)
    End Sub
  Partial Private Sub InsertDataWarehouseService(instance As DataWarehouseService)
    End Sub
  Partial Private Sub UpdateDataWarehouseService(instance As DataWarehouseService)
    End Sub
  Partial Private Sub DeleteDataWarehouseService(instance As DataWarehouseService)
    End Sub
  Partial Private Sub InsertDataWarehouseServiceCodeType(instance As DataWarehouseServiceCodeType)
    End Sub
  Partial Private Sub UpdateDataWarehouseServiceCodeType(instance As DataWarehouseServiceCodeType)
    End Sub
  Partial Private Sub DeleteDataWarehouseServiceCodeType(instance As DataWarehouseServiceCodeType)
    End Sub
  Partial Private Sub InsertDataWarehouseBenefit(instance As DataWarehouseBenefit)
    End Sub
  Partial Private Sub UpdateDataWarehouseBenefit(instance As DataWarehouseBenefit)
    End Sub
  Partial Private Sub DeleteDataWarehouseBenefit(instance As DataWarehouseBenefit)
    End Sub
  Partial Private Sub InsertDataWarehouseBenefitCategory(instance As DataWarehouseBenefitCategory)
    End Sub
  Partial Private Sub UpdateDataWarehouseBenefitCategory(instance As DataWarehouseBenefitCategory)
    End Sub
  Partial Private Sub DeleteDataWarehouseBenefitCategory(instance As DataWarehouseBenefitCategory)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property DataWarehouseTypeOfServices() As System.Data.Linq.Table(Of DataWarehouseTypeOfService)
		Get
			Return Me.GetTable(Of DataWarehouseTypeOfService)
		End Get
	End Property
	
	Public ReadOnly Property DataWarehouseTypeOfServiceCategories() As System.Data.Linq.Table(Of DataWarehouseTypeOfServiceCategory)
		Get
			Return Me.GetTable(Of DataWarehouseTypeOfServiceCategory)
		End Get
	End Property
	
	Public ReadOnly Property DataWarehouseTypeOfServiceSubCategories() As System.Data.Linq.Table(Of DataWarehouseTypeOfServiceSubCategory)
		Get
			Return Me.GetTable(Of DataWarehouseTypeOfServiceSubCategory)
		End Get
	End Property
	
	Public ReadOnly Property DataWarehouseDiagnoses() As System.Data.Linq.Table(Of DataWarehouseDiagnoses)
		Get
			Return Me.GetTable(Of DataWarehouseDiagnoses)
		End Get
	End Property
	
	Public ReadOnly Property DataWarehouseDatasources() As System.Data.Linq.Table(Of DataWarehouseDatasources)
		Get
			Return Me.GetTable(Of DataWarehouseDatasources)
		End Get
	End Property
	
	Public ReadOnly Property DataWarehouseDiagnosisCategories() As System.Data.Linq.Table(Of DataWarehouseDiagnosisCategories)
		Get
			Return Me.GetTable(Of DataWarehouseDiagnosisCategories)
		End Get
	End Property
	
	Public ReadOnly Property DataWarehouseDiagnosisCodeTypes() As System.Data.Linq.Table(Of DataWarehouseDiagnosisCodeType)
		Get
			Return Me.GetTable(Of DataWarehouseDiagnosisCodeType)
		End Get
	End Property
	
	Public ReadOnly Property DataWarehouseServices() As System.Data.Linq.Table(Of DataWarehouseService)
		Get
			Return Me.GetTable(Of DataWarehouseService)
		End Get
	End Property
	
	Public ReadOnly Property DataWarehouseServiceCodeTypes() As System.Data.Linq.Table(Of DataWarehouseServiceCodeType)
		Get
			Return Me.GetTable(Of DataWarehouseServiceCodeType)
		End Get
	End Property
	
	Public ReadOnly Property DataWarehouseBenefits() As System.Data.Linq.Table(Of DataWarehouseBenefit)
		Get
			Return Me.GetTable(Of DataWarehouseBenefit)
		End Get
	End Property
	
	Public ReadOnly Property DataWarehouseBenefitCategories() As System.Data.Linq.Table(Of DataWarehouseBenefitCategory)
		Get
			Return Me.GetTable(Of DataWarehouseBenefitCategory)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TypeOfService")>  _
Partial Public Class DataWarehouseTypeOfService
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TypeOfServiceId As Integer
	
	Private _BETOSCode As String
	
	Private _TypeOfService As String
	
	Private _TypeOfServiceSubCategoryId As Integer
	
	Private _TypeOfServiceCategoryId As Integer
	
	Private _DataWarehouseServices As EntitySet(Of DataWarehouseService)
	
	Private _DataWarehouseTypeOfServiceCategory As EntityRef(Of DataWarehouseTypeOfServiceCategory)
	
	Private _DataWarehouseTypeOfServiceSubCategory As EntityRef(Of DataWarehouseTypeOfServiceSubCategory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTypeOfServiceIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTypeOfServiceIdChanged()
    End Sub
    Partial Private Sub OnBETOSCodeChanging(value As String)
    End Sub
    Partial Private Sub OnBETOSCodeChanged()
    End Sub
    Partial Private Sub OnTypeOfServiceChanging(value As String)
    End Sub
    Partial Private Sub OnTypeOfServiceChanged()
    End Sub
    Partial Private Sub OnTypeOfServiceSubCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTypeOfServiceSubCategoryIdChanged()
    End Sub
    Partial Private Sub OnTypeOfServiceCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTypeOfServiceCategoryIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataWarehouseServices = New EntitySet(Of DataWarehouseService)(AddressOf Me.attach_DataWarehouseServices, AddressOf Me.detach_DataWarehouseServices)
		Me._DataWarehouseTypeOfServiceCategory = CType(Nothing, EntityRef(Of DataWarehouseTypeOfServiceCategory))
		Me._DataWarehouseTypeOfServiceSubCategory = CType(Nothing, EntityRef(Of DataWarehouseTypeOfServiceSubCategory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeOfServiceId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TypeOfServiceId() As Integer
		Get
			Return Me._TypeOfServiceId
		End Get
		Set
			If ((Me._TypeOfServiceId = value)  _
						= false) Then
				Me.OnTypeOfServiceIdChanging(value)
				Me.SendPropertyChanging
				Me._TypeOfServiceId = value
				Me.SendPropertyChanged("TypeOfServiceId")
				Me.OnTypeOfServiceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BETOSCode", DbType:="Char(3) NOT NULL", CanBeNull:=false)>  _
	Public Property BETOSCode() As String
		Get
			Return Me._BETOSCode
		End Get
		Set
			If (String.Equals(Me._BETOSCode, value) = false) Then
				Me.OnBETOSCodeChanging(value)
				Me.SendPropertyChanging
				Me._BETOSCode = value
				Me.SendPropertyChanged("BETOSCode")
				Me.OnBETOSCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeOfService", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property TypeOfService() As String
		Get
			Return Me._TypeOfService
		End Get
		Set
			If (String.Equals(Me._TypeOfService, value) = false) Then
				Me.OnTypeOfServiceChanging(value)
				Me.SendPropertyChanging
				Me._TypeOfService = value
				Me.SendPropertyChanged("TypeOfService")
				Me.OnTypeOfServiceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeOfServiceSubCategoryId", DbType:="Int NOT NULL")>  _
	Public Property TypeOfServiceSubCategoryId() As Integer
		Get
			Return Me._TypeOfServiceSubCategoryId
		End Get
		Set
			If ((Me._TypeOfServiceSubCategoryId = value)  _
						= false) Then
				If Me._DataWarehouseTypeOfServiceSubCategory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTypeOfServiceSubCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._TypeOfServiceSubCategoryId = value
				Me.SendPropertyChanged("TypeOfServiceSubCategoryId")
				Me.OnTypeOfServiceSubCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeOfServiceCategoryId", DbType:="Int NOT NULL")>  _
	Public Property TypeOfServiceCategoryId() As Integer
		Get
			Return Me._TypeOfServiceCategoryId
		End Get
		Set
			If ((Me._TypeOfServiceCategoryId = value)  _
						= false) Then
				If Me._DataWarehouseTypeOfServiceCategory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTypeOfServiceCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._TypeOfServiceCategoryId = value
				Me.SendPropertyChanged("TypeOfServiceCategoryId")
				Me.OnTypeOfServiceCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataWarehouseTypeOfService_DataWarehouseService", Storage:="_DataWarehouseServices", ThisKey:="TypeOfServiceId", OtherKey:="TypeOfServiceId")>  _
	Public Property DataWarehouseServices() As EntitySet(Of DataWarehouseService)
		Get
			Return Me._DataWarehouseServices
		End Get
		Set
			Me._DataWarehouseServices.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataWarehouseTypeOfServiceCategory_DataWarehouseTypeOfService", Storage:="_DataWarehouseTypeOfServiceCategory", ThisKey:="TypeOfServiceCategoryId", OtherKey:="TypeOfServiceCategoryId", IsForeignKey:=true)>  _
	Public Property DataWarehouseTypeOfServiceCategory() As DataWarehouseTypeOfServiceCategory
		Get
			Return Me._DataWarehouseTypeOfServiceCategory.Entity
		End Get
		Set
			Dim previousValue As DataWarehouseTypeOfServiceCategory = Me._DataWarehouseTypeOfServiceCategory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DataWarehouseTypeOfServiceCategory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DataWarehouseTypeOfServiceCategory.Entity = Nothing
					previousValue.DataWarehouseTypeOfServices.Remove(Me)
				End If
				Me._DataWarehouseTypeOfServiceCategory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DataWarehouseTypeOfServices.Add(Me)
					Me._TypeOfServiceCategoryId = value.TypeOfServiceCategoryId
				Else
					Me._TypeOfServiceCategoryId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DataWarehouseTypeOfServiceCategory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataWarehouseTypeOfServiceSubCategory_DataWarehouseTypeOfService", Storage:="_DataWarehouseTypeOfServiceSubCategory", ThisKey:="TypeOfServiceSubCategoryId", OtherKey:="TypeOfServiceSubCategoryId", IsForeignKey:=true)>  _
	Public Property DataWarehouseTypeOfServiceSubCategory() As DataWarehouseTypeOfServiceSubCategory
		Get
			Return Me._DataWarehouseTypeOfServiceSubCategory.Entity
		End Get
		Set
			Dim previousValue As DataWarehouseTypeOfServiceSubCategory = Me._DataWarehouseTypeOfServiceSubCategory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DataWarehouseTypeOfServiceSubCategory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DataWarehouseTypeOfServiceSubCategory.Entity = Nothing
					previousValue.DataWarehouseTypeOfServices.Remove(Me)
				End If
				Me._DataWarehouseTypeOfServiceSubCategory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DataWarehouseTypeOfServices.Add(Me)
					Me._TypeOfServiceSubCategoryId = value.TypeOfServiceSubCategoryId
				Else
					Me._TypeOfServiceSubCategoryId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DataWarehouseTypeOfServiceSubCategory")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DataWarehouseServices(ByVal entity As DataWarehouseService)
		Me.SendPropertyChanging
		entity.DataWarehouseTypeOfService = Me
	End Sub
	
	Private Sub detach_DataWarehouseServices(ByVal entity As DataWarehouseService)
		Me.SendPropertyChanging
		entity.DataWarehouseTypeOfService = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TypeOfServiceCategories")>  _
Partial Public Class DataWarehouseTypeOfServiceCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TypeOfServiceCategoryId As Integer
	
	Private _TypeOfServiceCategory As String
	
	Private _DataWarehouseTypeOfServices As EntitySet(Of DataWarehouseTypeOfService)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTypeOfServiceCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTypeOfServiceCategoryIdChanged()
    End Sub
    Partial Private Sub OnTypeOfServiceCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnTypeOfServiceCategoryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataWarehouseTypeOfServices = New EntitySet(Of DataWarehouseTypeOfService)(AddressOf Me.attach_DataWarehouseTypeOfServices, AddressOf Me.detach_DataWarehouseTypeOfServices)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeOfServiceCategoryId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TypeOfServiceCategoryId() As Integer
		Get
			Return Me._TypeOfServiceCategoryId
		End Get
		Set
			If ((Me._TypeOfServiceCategoryId = value)  _
						= false) Then
				Me.OnTypeOfServiceCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._TypeOfServiceCategoryId = value
				Me.SendPropertyChanged("TypeOfServiceCategoryId")
				Me.OnTypeOfServiceCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeOfServiceCategory", DbType:="VarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property TypeOfServiceCategory() As String
		Get
			Return Me._TypeOfServiceCategory
		End Get
		Set
			If (String.Equals(Me._TypeOfServiceCategory, value) = false) Then
				Me.OnTypeOfServiceCategoryChanging(value)
				Me.SendPropertyChanging
				Me._TypeOfServiceCategory = value
				Me.SendPropertyChanged("TypeOfServiceCategory")
				Me.OnTypeOfServiceCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataWarehouseTypeOfServiceCategory_DataWarehouseTypeOfService", Storage:="_DataWarehouseTypeOfServices", ThisKey:="TypeOfServiceCategoryId", OtherKey:="TypeOfServiceCategoryId")>  _
	Public Property DataWarehouseTypeOfServices() As EntitySet(Of DataWarehouseTypeOfService)
		Get
			Return Me._DataWarehouseTypeOfServices
		End Get
		Set
			Me._DataWarehouseTypeOfServices.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DataWarehouseTypeOfServices(ByVal entity As DataWarehouseTypeOfService)
		Me.SendPropertyChanging
		entity.DataWarehouseTypeOfServiceCategory = Me
	End Sub
	
	Private Sub detach_DataWarehouseTypeOfServices(ByVal entity As DataWarehouseTypeOfService)
		Me.SendPropertyChanging
		entity.DataWarehouseTypeOfServiceCategory = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TypeOfServiceSubCategories")>  _
Partial Public Class DataWarehouseTypeOfServiceSubCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TypeOfServiceSubCategoryId As Integer
	
	Private _TypeOfServiceSubCategory As String
	
	Private _DataWarehouseTypeOfServices As EntitySet(Of DataWarehouseTypeOfService)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTypeOfServiceSubCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTypeOfServiceSubCategoryIdChanged()
    End Sub
    Partial Private Sub OnTypeOfServiceSubCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnTypeOfServiceSubCategoryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataWarehouseTypeOfServices = New EntitySet(Of DataWarehouseTypeOfService)(AddressOf Me.attach_DataWarehouseTypeOfServices, AddressOf Me.detach_DataWarehouseTypeOfServices)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeOfServiceSubCategoryId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TypeOfServiceSubCategoryId() As Integer
		Get
			Return Me._TypeOfServiceSubCategoryId
		End Get
		Set
			If ((Me._TypeOfServiceSubCategoryId = value)  _
						= false) Then
				Me.OnTypeOfServiceSubCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._TypeOfServiceSubCategoryId = value
				Me.SendPropertyChanged("TypeOfServiceSubCategoryId")
				Me.OnTypeOfServiceSubCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeOfServiceSubCategory", DbType:="VarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property TypeOfServiceSubCategory() As String
		Get
			Return Me._TypeOfServiceSubCategory
		End Get
		Set
			If (String.Equals(Me._TypeOfServiceSubCategory, value) = false) Then
				Me.OnTypeOfServiceSubCategoryChanging(value)
				Me.SendPropertyChanging
				Me._TypeOfServiceSubCategory = value
				Me.SendPropertyChanged("TypeOfServiceSubCategory")
				Me.OnTypeOfServiceSubCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataWarehouseTypeOfServiceSubCategory_DataWarehouseTypeOfService", Storage:="_DataWarehouseTypeOfServices", ThisKey:="TypeOfServiceSubCategoryId", OtherKey:="TypeOfServiceSubCategoryId")>  _
	Public Property DataWarehouseTypeOfServices() As EntitySet(Of DataWarehouseTypeOfService)
		Get
			Return Me._DataWarehouseTypeOfServices
		End Get
		Set
			Me._DataWarehouseTypeOfServices.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DataWarehouseTypeOfServices(ByVal entity As DataWarehouseTypeOfService)
		Me.SendPropertyChanging
		entity.DataWarehouseTypeOfServiceSubCategory = Me
	End Sub
	
	Private Sub detach_DataWarehouseTypeOfServices(ByVal entity As DataWarehouseTypeOfService)
		Me.SendPropertyChanging
		entity.DataWarehouseTypeOfServiceSubCategory = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Diagnoses")>  _
Partial Public Class DataWarehouseDiagnoses
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DiagnosisId As Integer
	
	Private _DiagnosisCode As String
	
	Private _DiagnosisFullDescription As String
	
	Private _DiagnosisAbbreviatedDescription As String
	
	Private _DiagnosisDatasourceId As Integer
	
	Private _DiagnosisCategoryId As Integer
	
	Private _DiagnosisCodeTypeId As Integer
	
	Private _DataWarehouseDatasources As EntityRef(Of DataWarehouseDatasources)
	
	Private _DataWarehouseDiagnosisCategories As EntityRef(Of DataWarehouseDiagnosisCategories)
	
	Private _DataWarehouseDiagnosisCodeType As EntityRef(Of DataWarehouseDiagnosisCodeType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDiagnosisIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDiagnosisIdChanged()
    End Sub
    Partial Private Sub OnDiagnosisCodeChanging(value As String)
    End Sub
    Partial Private Sub OnDiagnosisCodeChanged()
    End Sub
    Partial Private Sub OnDiagnosisFullDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDiagnosisFullDescriptionChanged()
    End Sub
    Partial Private Sub OnDiagnosisAbbreviatedDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDiagnosisAbbreviatedDescriptionChanged()
    End Sub
    Partial Private Sub OnDiagnosisDatasourceIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDiagnosisDatasourceIdChanged()
    End Sub
    Partial Private Sub OnDiagnosisCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDiagnosisCategoryIdChanged()
    End Sub
    Partial Private Sub OnDiagnosisCodeTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDiagnosisCodeTypeIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataWarehouseDatasources = CType(Nothing, EntityRef(Of DataWarehouseDatasources))
		Me._DataWarehouseDiagnosisCategories = CType(Nothing, EntityRef(Of DataWarehouseDiagnosisCategories))
		Me._DataWarehouseDiagnosisCodeType = CType(Nothing, EntityRef(Of DataWarehouseDiagnosisCodeType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiagnosisId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DiagnosisId() As Integer
		Get
			Return Me._DiagnosisId
		End Get
		Set
			If ((Me._DiagnosisId = value)  _
						= false) Then
				Me.OnDiagnosisIdChanging(value)
				Me.SendPropertyChanging
				Me._DiagnosisId = value
				Me.SendPropertyChanged("DiagnosisId")
				Me.OnDiagnosisIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiagnosisCode", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property DiagnosisCode() As String
		Get
			Return Me._DiagnosisCode
		End Get
		Set
			If (String.Equals(Me._DiagnosisCode, value) = false) Then
				Me.OnDiagnosisCodeChanging(value)
				Me.SendPropertyChanging
				Me._DiagnosisCode = value
				Me.SendPropertyChanged("DiagnosisCode")
				Me.OnDiagnosisCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiagnosisFullDescription", DbType:="VarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property DiagnosisFullDescription() As String
		Get
			Return Me._DiagnosisFullDescription
		End Get
		Set
			If (String.Equals(Me._DiagnosisFullDescription, value) = false) Then
				Me.OnDiagnosisFullDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._DiagnosisFullDescription = value
				Me.SendPropertyChanged("DiagnosisFullDescription")
				Me.OnDiagnosisFullDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiagnosisAbbreviatedDescription", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property DiagnosisAbbreviatedDescription() As String
		Get
			Return Me._DiagnosisAbbreviatedDescription
		End Get
		Set
			If (String.Equals(Me._DiagnosisAbbreviatedDescription, value) = false) Then
				Me.OnDiagnosisAbbreviatedDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._DiagnosisAbbreviatedDescription = value
				Me.SendPropertyChanged("DiagnosisAbbreviatedDescription")
				Me.OnDiagnosisAbbreviatedDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiagnosisDatasourceId", DbType:="Int NOT NULL")>  _
	Public Property DiagnosisDatasourceId() As Integer
		Get
			Return Me._DiagnosisDatasourceId
		End Get
		Set
			If ((Me._DiagnosisDatasourceId = value)  _
						= false) Then
				If Me._DataWarehouseDatasources.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDiagnosisDatasourceIdChanging(value)
				Me.SendPropertyChanging
				Me._DiagnosisDatasourceId = value
				Me.SendPropertyChanged("DiagnosisDatasourceId")
				Me.OnDiagnosisDatasourceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiagnosisCategoryId", DbType:="Int NOT NULL")>  _
	Public Property DiagnosisCategoryId() As Integer
		Get
			Return Me._DiagnosisCategoryId
		End Get
		Set
			If ((Me._DiagnosisCategoryId = value)  _
						= false) Then
				If Me._DataWarehouseDiagnosisCategories.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDiagnosisCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._DiagnosisCategoryId = value
				Me.SendPropertyChanged("DiagnosisCategoryId")
				Me.OnDiagnosisCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiagnosisCodeTypeId", DbType:="Int NOT NULL")>  _
	Public Property DiagnosisCodeTypeId() As Integer
		Get
			Return Me._DiagnosisCodeTypeId
		End Get
		Set
			If ((Me._DiagnosisCodeTypeId = value)  _
						= false) Then
				If Me._DataWarehouseDiagnosisCodeType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDiagnosisCodeTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._DiagnosisCodeTypeId = value
				Me.SendPropertyChanged("DiagnosisCodeTypeId")
				Me.OnDiagnosisCodeTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataWarehouseDatasources_DataWarehouseDiagnoses", Storage:="_DataWarehouseDatasources", ThisKey:="DiagnosisDatasourceId", OtherKey:="DataSourceId", IsForeignKey:=true)>  _
	Public Property DataWarehouseDatasources() As DataWarehouseDatasources
		Get
			Return Me._DataWarehouseDatasources.Entity
		End Get
		Set
			Dim previousValue As DataWarehouseDatasources = Me._DataWarehouseDatasources.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DataWarehouseDatasources.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DataWarehouseDatasources.Entity = Nothing
					previousValue.DataWarehouseDiagnoses.Remove(Me)
				End If
				Me._DataWarehouseDatasources.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DataWarehouseDiagnoses.Add(Me)
					Me._DiagnosisDatasourceId = value.DataSourceId
				Else
					Me._DiagnosisDatasourceId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DataWarehouseDatasources")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataWarehouseDiagnosisCategories_DataWarehouseDiagnoses", Storage:="_DataWarehouseDiagnosisCategories", ThisKey:="DiagnosisCategoryId", OtherKey:="DiagnosisCategoryId", IsForeignKey:=true)>  _
	Public Property DataWarehouseDiagnosisCategories() As DataWarehouseDiagnosisCategories
		Get
			Return Me._DataWarehouseDiagnosisCategories.Entity
		End Get
		Set
			Dim previousValue As DataWarehouseDiagnosisCategories = Me._DataWarehouseDiagnosisCategories.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DataWarehouseDiagnosisCategories.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DataWarehouseDiagnosisCategories.Entity = Nothing
					previousValue.DataWarehouseDiagnoses.Remove(Me)
				End If
				Me._DataWarehouseDiagnosisCategories.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DataWarehouseDiagnoses.Add(Me)
					Me._DiagnosisCategoryId = value.DiagnosisCategoryId
				Else
					Me._DiagnosisCategoryId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DataWarehouseDiagnosisCategories")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataWarehouseDiagnosisCodeType_DataWarehouseDiagnoses", Storage:="_DataWarehouseDiagnosisCodeType", ThisKey:="DiagnosisCodeTypeId", OtherKey:="DiagnosisCodeTypeId", IsForeignKey:=true)>  _
	Public Property DataWarehouseDiagnosisCodeType() As DataWarehouseDiagnosisCodeType
		Get
			Return Me._DataWarehouseDiagnosisCodeType.Entity
		End Get
		Set
			Dim previousValue As DataWarehouseDiagnosisCodeType = Me._DataWarehouseDiagnosisCodeType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DataWarehouseDiagnosisCodeType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DataWarehouseDiagnosisCodeType.Entity = Nothing
					previousValue.DataWarehouseDiagnoses.Remove(Me)
				End If
				Me._DataWarehouseDiagnosisCodeType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DataWarehouseDiagnoses.Add(Me)
					Me._DiagnosisCodeTypeId = value.DiagnosisCodeTypeId
				Else
					Me._DiagnosisCodeTypeId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DataWarehouseDiagnosisCodeType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Datasources")>  _
Partial Public Class DataWarehouseDatasources
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DataSourceId As Integer
	
	Private _DataSourceName As String
	
	Private _DataSourceNotes As String
	
	Private _DataSourceDelivery As String
	
	Private _DataSourceClaimsTableName As String
	
	Private _DataSourceWebsite As String
	
	Private _DataSourcePrimaryContact As String
	
	Private _DataSourceLastImport As System.Nullable(Of Date)
	
	Private _DataWarehouseDiagnoses As EntitySet(Of DataWarehouseDiagnoses)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDataSourceIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataSourceIdChanged()
    End Sub
    Partial Private Sub OnDataSourceNameChanging(value As String)
    End Sub
    Partial Private Sub OnDataSourceNameChanged()
    End Sub
    Partial Private Sub OnDataSourceNotesChanging(value As String)
    End Sub
    Partial Private Sub OnDataSourceNotesChanged()
    End Sub
    Partial Private Sub OnDataSourceDeliveryChanging(value As String)
    End Sub
    Partial Private Sub OnDataSourceDeliveryChanged()
    End Sub
    Partial Private Sub OnDataSourceClaimsTableNameChanging(value As String)
    End Sub
    Partial Private Sub OnDataSourceClaimsTableNameChanged()
    End Sub
    Partial Private Sub OnDataSourceWebsiteChanging(value As String)
    End Sub
    Partial Private Sub OnDataSourceWebsiteChanged()
    End Sub
    Partial Private Sub OnDataSourcePrimaryContactChanging(value As String)
    End Sub
    Partial Private Sub OnDataSourcePrimaryContactChanged()
    End Sub
    Partial Private Sub OnDataSourceLastImportChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDataSourceLastImportChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataWarehouseDiagnoses = New EntitySet(Of DataWarehouseDiagnoses)(AddressOf Me.attach_DataWarehouseDiagnoses, AddressOf Me.detach_DataWarehouseDiagnoses)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataSourceId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DataSourceId() As Integer
		Get
			Return Me._DataSourceId
		End Get
		Set
			If ((Me._DataSourceId = value)  _
						= false) Then
				Me.OnDataSourceIdChanging(value)
				Me.SendPropertyChanging
				Me._DataSourceId = value
				Me.SendPropertyChanged("DataSourceId")
				Me.OnDataSourceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataSourceName", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property DataSourceName() As String
		Get
			Return Me._DataSourceName
		End Get
		Set
			If (String.Equals(Me._DataSourceName, value) = false) Then
				Me.OnDataSourceNameChanging(value)
				Me.SendPropertyChanging
				Me._DataSourceName = value
				Me.SendPropertyChanged("DataSourceName")
				Me.OnDataSourceNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataSourceNotes", DbType:="VarChar(1000)")>  _
	Public Property DataSourceNotes() As String
		Get
			Return Me._DataSourceNotes
		End Get
		Set
			If (String.Equals(Me._DataSourceNotes, value) = false) Then
				Me.OnDataSourceNotesChanging(value)
				Me.SendPropertyChanging
				Me._DataSourceNotes = value
				Me.SendPropertyChanged("DataSourceNotes")
				Me.OnDataSourceNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataSourceDelivery", DbType:="VarChar(30)")>  _
	Public Property DataSourceDelivery() As String
		Get
			Return Me._DataSourceDelivery
		End Get
		Set
			If (String.Equals(Me._DataSourceDelivery, value) = false) Then
				Me.OnDataSourceDeliveryChanging(value)
				Me.SendPropertyChanging
				Me._DataSourceDelivery = value
				Me.SendPropertyChanged("DataSourceDelivery")
				Me.OnDataSourceDeliveryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataSourceClaimsTableName", DbType:="VarChar(200)")>  _
	Public Property DataSourceClaimsTableName() As String
		Get
			Return Me._DataSourceClaimsTableName
		End Get
		Set
			If (String.Equals(Me._DataSourceClaimsTableName, value) = false) Then
				Me.OnDataSourceClaimsTableNameChanging(value)
				Me.SendPropertyChanging
				Me._DataSourceClaimsTableName = value
				Me.SendPropertyChanged("DataSourceClaimsTableName")
				Me.OnDataSourceClaimsTableNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataSourceWebsite", DbType:="VarChar(2000)")>  _
	Public Property DataSourceWebsite() As String
		Get
			Return Me._DataSourceWebsite
		End Get
		Set
			If (String.Equals(Me._DataSourceWebsite, value) = false) Then
				Me.OnDataSourceWebsiteChanging(value)
				Me.SendPropertyChanging
				Me._DataSourceWebsite = value
				Me.SendPropertyChanged("DataSourceWebsite")
				Me.OnDataSourceWebsiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataSourcePrimaryContact", DbType:="VarChar(300)")>  _
	Public Property DataSourcePrimaryContact() As String
		Get
			Return Me._DataSourcePrimaryContact
		End Get
		Set
			If (String.Equals(Me._DataSourcePrimaryContact, value) = false) Then
				Me.OnDataSourcePrimaryContactChanging(value)
				Me.SendPropertyChanging
				Me._DataSourcePrimaryContact = value
				Me.SendPropertyChanged("DataSourcePrimaryContact")
				Me.OnDataSourcePrimaryContactChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataSourceLastImport", DbType:="SmallDateTime")>  _
	Public Property DataSourceLastImport() As System.Nullable(Of Date)
		Get
			Return Me._DataSourceLastImport
		End Get
		Set
			If (Me._DataSourceLastImport.Equals(value) = false) Then
				Me.OnDataSourceLastImportChanging(value)
				Me.SendPropertyChanging
				Me._DataSourceLastImport = value
				Me.SendPropertyChanged("DataSourceLastImport")
				Me.OnDataSourceLastImportChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataWarehouseDatasources_DataWarehouseDiagnoses", Storage:="_DataWarehouseDiagnoses", ThisKey:="DataSourceId", OtherKey:="DiagnosisDatasourceId")>  _
	Public Property DataWarehouseDiagnoses() As EntitySet(Of DataWarehouseDiagnoses)
		Get
			Return Me._DataWarehouseDiagnoses
		End Get
		Set
			Me._DataWarehouseDiagnoses.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DataWarehouseDiagnoses(ByVal entity As DataWarehouseDiagnoses)
		Me.SendPropertyChanging
		entity.DataWarehouseDatasources = Me
	End Sub
	
	Private Sub detach_DataWarehouseDiagnoses(ByVal entity As DataWarehouseDiagnoses)
		Me.SendPropertyChanging
		entity.DataWarehouseDatasources = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DiagnosisCategories")>  _
Partial Public Class DataWarehouseDiagnosisCategories
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DiagnosisCategoryId As Integer
	
	Private _DiagnosisCategory As String
	
	Private _DiagnosisCodeRangeBegin As String
	
	Private _DiagnosisCodeRangeEnd As String
	
	Private _DataWarehouseDiagnoses As EntitySet(Of DataWarehouseDiagnoses)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDiagnosisCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDiagnosisCategoryIdChanged()
    End Sub
    Partial Private Sub OnDiagnosisCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnDiagnosisCategoryChanged()
    End Sub
    Partial Private Sub OnDiagnosisCodeRangeBeginChanging(value As String)
    End Sub
    Partial Private Sub OnDiagnosisCodeRangeBeginChanged()
    End Sub
    Partial Private Sub OnDiagnosisCodeRangeEndChanging(value As String)
    End Sub
    Partial Private Sub OnDiagnosisCodeRangeEndChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataWarehouseDiagnoses = New EntitySet(Of DataWarehouseDiagnoses)(AddressOf Me.attach_DataWarehouseDiagnoses, AddressOf Me.detach_DataWarehouseDiagnoses)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiagnosisCategoryId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DiagnosisCategoryId() As Integer
		Get
			Return Me._DiagnosisCategoryId
		End Get
		Set
			If ((Me._DiagnosisCategoryId = value)  _
						= false) Then
				Me.OnDiagnosisCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._DiagnosisCategoryId = value
				Me.SendPropertyChanged("DiagnosisCategoryId")
				Me.OnDiagnosisCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiagnosisCategory", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property DiagnosisCategory() As String
		Get
			Return Me._DiagnosisCategory
		End Get
		Set
			If (String.Equals(Me._DiagnosisCategory, value) = false) Then
				Me.OnDiagnosisCategoryChanging(value)
				Me.SendPropertyChanging
				Me._DiagnosisCategory = value
				Me.SendPropertyChanged("DiagnosisCategory")
				Me.OnDiagnosisCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiagnosisCodeRangeBegin", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property DiagnosisCodeRangeBegin() As String
		Get
			Return Me._DiagnosisCodeRangeBegin
		End Get
		Set
			If (String.Equals(Me._DiagnosisCodeRangeBegin, value) = false) Then
				Me.OnDiagnosisCodeRangeBeginChanging(value)
				Me.SendPropertyChanging
				Me._DiagnosisCodeRangeBegin = value
				Me.SendPropertyChanged("DiagnosisCodeRangeBegin")
				Me.OnDiagnosisCodeRangeBeginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiagnosisCodeRangeEnd", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property DiagnosisCodeRangeEnd() As String
		Get
			Return Me._DiagnosisCodeRangeEnd
		End Get
		Set
			If (String.Equals(Me._DiagnosisCodeRangeEnd, value) = false) Then
				Me.OnDiagnosisCodeRangeEndChanging(value)
				Me.SendPropertyChanging
				Me._DiagnosisCodeRangeEnd = value
				Me.SendPropertyChanged("DiagnosisCodeRangeEnd")
				Me.OnDiagnosisCodeRangeEndChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataWarehouseDiagnosisCategories_DataWarehouseDiagnoses", Storage:="_DataWarehouseDiagnoses", ThisKey:="DiagnosisCategoryId", OtherKey:="DiagnosisCategoryId")>  _
	Public Property DataWarehouseDiagnoses() As EntitySet(Of DataWarehouseDiagnoses)
		Get
			Return Me._DataWarehouseDiagnoses
		End Get
		Set
			Me._DataWarehouseDiagnoses.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DataWarehouseDiagnoses(ByVal entity As DataWarehouseDiagnoses)
		Me.SendPropertyChanging
		entity.DataWarehouseDiagnosisCategories = Me
	End Sub
	
	Private Sub detach_DataWarehouseDiagnoses(ByVal entity As DataWarehouseDiagnoses)
		Me.SendPropertyChanging
		entity.DataWarehouseDiagnosisCategories = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DiagnosisCodeTypes")>  _
Partial Public Class DataWarehouseDiagnosisCodeType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DiagnosisCodeTypeId As Integer
	
	Private _DiagnosisCodeType As String
	
	Private _DataWarehouseDiagnoses As EntitySet(Of DataWarehouseDiagnoses)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDiagnosisCodeTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDiagnosisCodeTypeIdChanged()
    End Sub
    Partial Private Sub OnDiagnosisCodeTypeChanging(value As String)
    End Sub
    Partial Private Sub OnDiagnosisCodeTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataWarehouseDiagnoses = New EntitySet(Of DataWarehouseDiagnoses)(AddressOf Me.attach_DataWarehouseDiagnoses, AddressOf Me.detach_DataWarehouseDiagnoses)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiagnosisCodeTypeId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DiagnosisCodeTypeId() As Integer
		Get
			Return Me._DiagnosisCodeTypeId
		End Get
		Set
			If ((Me._DiagnosisCodeTypeId = value)  _
						= false) Then
				Me.OnDiagnosisCodeTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._DiagnosisCodeTypeId = value
				Me.SendPropertyChanged("DiagnosisCodeTypeId")
				Me.OnDiagnosisCodeTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiagnosisCodeType", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DiagnosisCodeType() As String
		Get
			Return Me._DiagnosisCodeType
		End Get
		Set
			If (String.Equals(Me._DiagnosisCodeType, value) = false) Then
				Me.OnDiagnosisCodeTypeChanging(value)
				Me.SendPropertyChanging
				Me._DiagnosisCodeType = value
				Me.SendPropertyChanged("DiagnosisCodeType")
				Me.OnDiagnosisCodeTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataWarehouseDiagnosisCodeType_DataWarehouseDiagnoses", Storage:="_DataWarehouseDiagnoses", ThisKey:="DiagnosisCodeTypeId", OtherKey:="DiagnosisCodeTypeId")>  _
	Public Property DataWarehouseDiagnoses() As EntitySet(Of DataWarehouseDiagnoses)
		Get
			Return Me._DataWarehouseDiagnoses
		End Get
		Set
			Me._DataWarehouseDiagnoses.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DataWarehouseDiagnoses(ByVal entity As DataWarehouseDiagnoses)
		Me.SendPropertyChanging
		entity.DataWarehouseDiagnosisCodeType = Me
	End Sub
	
	Private Sub detach_DataWarehouseDiagnoses(ByVal entity As DataWarehouseDiagnoses)
		Me.SendPropertyChanging
		entity.DataWarehouseDiagnosisCodeType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Services")>  _
Partial Public Class DataWarehouseService
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ServiceId As Integer
	
	Private _ServiceCode As String
	
	Private _ServiceDescription As String
	
	Private _TypeOfServiceId As Integer
	
	Private _ServiceCodeTypeId As System.Nullable(Of Integer)
	
	Private _DataWarehouseTypeOfService As EntityRef(Of DataWarehouseTypeOfService)
	
	Private _DataWarehouseServiceCodeType As EntityRef(Of DataWarehouseServiceCodeType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnServiceIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnServiceIdChanged()
    End Sub
    Partial Private Sub OnServiceCodeChanging(value As String)
    End Sub
    Partial Private Sub OnServiceCodeChanged()
    End Sub
    Partial Private Sub OnServiceDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnServiceDescriptionChanged()
    End Sub
    Partial Private Sub OnTypeOfServiceIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTypeOfServiceIdChanged()
    End Sub
    Partial Private Sub OnServiceCodeTypeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnServiceCodeTypeIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataWarehouseTypeOfService = CType(Nothing, EntityRef(Of DataWarehouseTypeOfService))
		Me._DataWarehouseServiceCodeType = CType(Nothing, EntityRef(Of DataWarehouseServiceCodeType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ServiceId() As Integer
		Get
			Return Me._ServiceId
		End Get
		Set
			If ((Me._ServiceId = value)  _
						= false) Then
				Me.OnServiceIdChanging(value)
				Me.SendPropertyChanging
				Me._ServiceId = value
				Me.SendPropertyChanged("ServiceId")
				Me.OnServiceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCode", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property ServiceCode() As String
		Get
			Return Me._ServiceCode
		End Get
		Set
			If (String.Equals(Me._ServiceCode, value) = false) Then
				Me.OnServiceCodeChanging(value)
				Me.SendPropertyChanging
				Me._ServiceCode = value
				Me.SendPropertyChanged("ServiceCode")
				Me.OnServiceCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="VarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property ServiceDescription() As String
		Get
			Return Me._ServiceDescription
		End Get
		Set
			If (String.Equals(Me._ServiceDescription, value) = false) Then
				Me.OnServiceDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ServiceDescription = value
				Me.SendPropertyChanged("ServiceDescription")
				Me.OnServiceDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeOfServiceId", DbType:="Int NOT NULL")>  _
	Public Property TypeOfServiceId() As Integer
		Get
			Return Me._TypeOfServiceId
		End Get
		Set
			If ((Me._TypeOfServiceId = value)  _
						= false) Then
				If Me._DataWarehouseTypeOfService.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTypeOfServiceIdChanging(value)
				Me.SendPropertyChanging
				Me._TypeOfServiceId = value
				Me.SendPropertyChanged("TypeOfServiceId")
				Me.OnTypeOfServiceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCodeTypeId", DbType:="Int")>  _
	Public Property ServiceCodeTypeId() As System.Nullable(Of Integer)
		Get
			Return Me._ServiceCodeTypeId
		End Get
		Set
			If (Me._ServiceCodeTypeId.Equals(value) = false) Then
				If Me._DataWarehouseServiceCodeType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnServiceCodeTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._ServiceCodeTypeId = value
				Me.SendPropertyChanged("ServiceCodeTypeId")
				Me.OnServiceCodeTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataWarehouseTypeOfService_DataWarehouseService", Storage:="_DataWarehouseTypeOfService", ThisKey:="TypeOfServiceId", OtherKey:="TypeOfServiceId", IsForeignKey:=true)>  _
	Public Property DataWarehouseTypeOfService() As DataWarehouseTypeOfService
		Get
			Return Me._DataWarehouseTypeOfService.Entity
		End Get
		Set
			Dim previousValue As DataWarehouseTypeOfService = Me._DataWarehouseTypeOfService.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DataWarehouseTypeOfService.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DataWarehouseTypeOfService.Entity = Nothing
					previousValue.DataWarehouseServices.Remove(Me)
				End If
				Me._DataWarehouseTypeOfService.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DataWarehouseServices.Add(Me)
					Me._TypeOfServiceId = value.TypeOfServiceId
				Else
					Me._TypeOfServiceId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DataWarehouseTypeOfService")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataWarehouseServiceCodeType_DataWarehouseService", Storage:="_DataWarehouseServiceCodeType", ThisKey:="ServiceCodeTypeId", OtherKey:="ServiceCodeTypeId", IsForeignKey:=true)>  _
	Public Property DataWarehouseServiceCodeType() As DataWarehouseServiceCodeType
		Get
			Return Me._DataWarehouseServiceCodeType.Entity
		End Get
		Set
			Dim previousValue As DataWarehouseServiceCodeType = Me._DataWarehouseServiceCodeType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DataWarehouseServiceCodeType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DataWarehouseServiceCodeType.Entity = Nothing
					previousValue.DataWarehouseServices.Remove(Me)
				End If
				Me._DataWarehouseServiceCodeType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DataWarehouseServices.Add(Me)
					Me._ServiceCodeTypeId = value.ServiceCodeTypeId
				Else
					Me._ServiceCodeTypeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("DataWarehouseServiceCodeType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ServiceCodeTypes")>  _
Partial Public Class DataWarehouseServiceCodeType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ServiceCodeTypeId As Integer
	
	Private _ServiceCodeType As String
	
	Private _ServiceCodeTypeDescription As String
	
	Private _DataWarehouseServices As EntitySet(Of DataWarehouseService)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnServiceCodeTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnServiceCodeTypeIdChanged()
    End Sub
    Partial Private Sub OnServiceCodeTypeChanging(value As String)
    End Sub
    Partial Private Sub OnServiceCodeTypeChanged()
    End Sub
    Partial Private Sub OnServiceCodeTypeDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnServiceCodeTypeDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataWarehouseServices = New EntitySet(Of DataWarehouseService)(AddressOf Me.attach_DataWarehouseServices, AddressOf Me.detach_DataWarehouseServices)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCodeTypeId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ServiceCodeTypeId() As Integer
		Get
			Return Me._ServiceCodeTypeId
		End Get
		Set
			If ((Me._ServiceCodeTypeId = value)  _
						= false) Then
				Me.OnServiceCodeTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._ServiceCodeTypeId = value
				Me.SendPropertyChanged("ServiceCodeTypeId")
				Me.OnServiceCodeTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCodeType", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property ServiceCodeType() As String
		Get
			Return Me._ServiceCodeType
		End Get
		Set
			If (String.Equals(Me._ServiceCodeType, value) = false) Then
				Me.OnServiceCodeTypeChanging(value)
				Me.SendPropertyChanging
				Me._ServiceCodeType = value
				Me.SendPropertyChanged("ServiceCodeType")
				Me.OnServiceCodeTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCodeTypeDescription", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property ServiceCodeTypeDescription() As String
		Get
			Return Me._ServiceCodeTypeDescription
		End Get
		Set
			If (String.Equals(Me._ServiceCodeTypeDescription, value) = false) Then
				Me.OnServiceCodeTypeDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ServiceCodeTypeDescription = value
				Me.SendPropertyChanged("ServiceCodeTypeDescription")
				Me.OnServiceCodeTypeDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataWarehouseServiceCodeType_DataWarehouseService", Storage:="_DataWarehouseServices", ThisKey:="ServiceCodeTypeId", OtherKey:="ServiceCodeTypeId")>  _
	Public Property DataWarehouseServices() As EntitySet(Of DataWarehouseService)
		Get
			Return Me._DataWarehouseServices
		End Get
		Set
			Me._DataWarehouseServices.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DataWarehouseServices(ByVal entity As DataWarehouseService)
		Me.SendPropertyChanging
		entity.DataWarehouseServiceCodeType = Me
	End Sub
	
	Private Sub detach_DataWarehouseServices(ByVal entity As DataWarehouseService)
		Me.SendPropertyChanging
		entity.DataWarehouseServiceCodeType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Benefits")>  _
Partial Public Class DataWarehouseBenefit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BenefitId As Integer
	
	Private _BenefitCode As String
	
	Private _BenefitDescription As String
	
	Private _BenefitCategoryId As Integer
	
	Private _IsRxBenefit As Byte
	
	Private _IsMentalHealthBenefit As Byte
	
	Private _IsInpatientBenefit As Byte
	
	Private _IsOfficeVisitBenefit As Byte
	
	Private _IsEmergencyRoomBenefit As Byte
	
	Private _DataWarehouseBenefitCategory As EntityRef(Of DataWarehouseBenefitCategory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBenefitIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBenefitIdChanged()
    End Sub
    Partial Private Sub OnBenefitCodeChanging(value As String)
    End Sub
    Partial Private Sub OnBenefitCodeChanged()
    End Sub
    Partial Private Sub OnBenefitDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnBenefitDescriptionChanged()
    End Sub
    Partial Private Sub OnBenefitCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBenefitCategoryIdChanged()
    End Sub
    Partial Private Sub OnIsRxBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsRxBenefitChanged()
    End Sub
    Partial Private Sub OnIsMentalHealthBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsMentalHealthBenefitChanged()
    End Sub
    Partial Private Sub OnIsInpatientBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsInpatientBenefitChanged()
    End Sub
    Partial Private Sub OnIsOfficeVisitBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsOfficeVisitBenefitChanged()
    End Sub
    Partial Private Sub OnIsEmergencyRoomBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsEmergencyRoomBenefitChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataWarehouseBenefitCategory = CType(Nothing, EntityRef(Of DataWarehouseBenefitCategory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenefitId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BenefitId() As Integer
		Get
			Return Me._BenefitId
		End Get
		Set
			If ((Me._BenefitId = value)  _
						= false) Then
				Me.OnBenefitIdChanging(value)
				Me.SendPropertyChanging
				Me._BenefitId = value
				Me.SendPropertyChanged("BenefitId")
				Me.OnBenefitIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenefitCode", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property BenefitCode() As String
		Get
			Return Me._BenefitCode
		End Get
		Set
			If (String.Equals(Me._BenefitCode, value) = false) Then
				Me.OnBenefitCodeChanging(value)
				Me.SendPropertyChanging
				Me._BenefitCode = value
				Me.SendPropertyChanged("BenefitCode")
				Me.OnBenefitCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenefitDescription", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property BenefitDescription() As String
		Get
			Return Me._BenefitDescription
		End Get
		Set
			If (String.Equals(Me._BenefitDescription, value) = false) Then
				Me.OnBenefitDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._BenefitDescription = value
				Me.SendPropertyChanged("BenefitDescription")
				Me.OnBenefitDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenefitCategoryId", DbType:="Int NOT NULL")>  _
	Public Property BenefitCategoryId() As Integer
		Get
			Return Me._BenefitCategoryId
		End Get
		Set
			If ((Me._BenefitCategoryId = value)  _
						= false) Then
				If Me._DataWarehouseBenefitCategory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBenefitCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._BenefitCategoryId = value
				Me.SendPropertyChanged("BenefitCategoryId")
				Me.OnBenefitCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsRxBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsRxBenefit() As Byte
		Get
			Return Me._IsRxBenefit
		End Get
		Set
			If ((Me._IsRxBenefit = value)  _
						= false) Then
				Me.OnIsRxBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsRxBenefit = value
				Me.SendPropertyChanged("IsRxBenefit")
				Me.OnIsRxBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsMentalHealthBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsMentalHealthBenefit() As Byte
		Get
			Return Me._IsMentalHealthBenefit
		End Get
		Set
			If ((Me._IsMentalHealthBenefit = value)  _
						= false) Then
				Me.OnIsMentalHealthBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsMentalHealthBenefit = value
				Me.SendPropertyChanged("IsMentalHealthBenefit")
				Me.OnIsMentalHealthBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsInpatientBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsInpatientBenefit() As Byte
		Get
			Return Me._IsInpatientBenefit
		End Get
		Set
			If ((Me._IsInpatientBenefit = value)  _
						= false) Then
				Me.OnIsInpatientBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsInpatientBenefit = value
				Me.SendPropertyChanged("IsInpatientBenefit")
				Me.OnIsInpatientBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsOfficeVisitBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsOfficeVisitBenefit() As Byte
		Get
			Return Me._IsOfficeVisitBenefit
		End Get
		Set
			If ((Me._IsOfficeVisitBenefit = value)  _
						= false) Then
				Me.OnIsOfficeVisitBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsOfficeVisitBenefit = value
				Me.SendPropertyChanged("IsOfficeVisitBenefit")
				Me.OnIsOfficeVisitBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsEmergencyRoomBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsEmergencyRoomBenefit() As Byte
		Get
			Return Me._IsEmergencyRoomBenefit
		End Get
		Set
			If ((Me._IsEmergencyRoomBenefit = value)  _
						= false) Then
				Me.OnIsEmergencyRoomBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsEmergencyRoomBenefit = value
				Me.SendPropertyChanged("IsEmergencyRoomBenefit")
				Me.OnIsEmergencyRoomBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataWarehouseBenefitCategory_DataWarehouseBenefit", Storage:="_DataWarehouseBenefitCategory", ThisKey:="BenefitCategoryId", OtherKey:="BenefitCategoryId", IsForeignKey:=true)>  _
	Public Property DataWarehouseBenefitCategory() As DataWarehouseBenefitCategory
		Get
			Return Me._DataWarehouseBenefitCategory.Entity
		End Get
		Set
			Dim previousValue As DataWarehouseBenefitCategory = Me._DataWarehouseBenefitCategory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DataWarehouseBenefitCategory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DataWarehouseBenefitCategory.Entity = Nothing
					previousValue.DataWarehouseBenefits.Remove(Me)
				End If
				Me._DataWarehouseBenefitCategory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DataWarehouseBenefits.Add(Me)
					Me._BenefitCategoryId = value.BenefitCategoryId
				Else
					Me._BenefitCategoryId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DataWarehouseBenefitCategory")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BenefitCategories")>  _
Partial Public Class DataWarehouseBenefitCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BenefitCategoryId As Integer
	
	Private _BenefitCategory As String
	
	Private _DataWarehouseBenefits As EntitySet(Of DataWarehouseBenefit)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBenefitCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBenefitCategoryIdChanged()
    End Sub
    Partial Private Sub OnBenefitCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnBenefitCategoryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataWarehouseBenefits = New EntitySet(Of DataWarehouseBenefit)(AddressOf Me.attach_DataWarehouseBenefits, AddressOf Me.detach_DataWarehouseBenefits)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenefitCategoryId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BenefitCategoryId() As Integer
		Get
			Return Me._BenefitCategoryId
		End Get
		Set
			If ((Me._BenefitCategoryId = value)  _
						= false) Then
				Me.OnBenefitCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._BenefitCategoryId = value
				Me.SendPropertyChanged("BenefitCategoryId")
				Me.OnBenefitCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenefitCategory", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property BenefitCategory() As String
		Get
			Return Me._BenefitCategory
		End Get
		Set
			If (String.Equals(Me._BenefitCategory, value) = false) Then
				Me.OnBenefitCategoryChanging(value)
				Me.SendPropertyChanging
				Me._BenefitCategory = value
				Me.SendPropertyChanged("BenefitCategory")
				Me.OnBenefitCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataWarehouseBenefitCategory_DataWarehouseBenefit", Storage:="_DataWarehouseBenefits", ThisKey:="BenefitCategoryId", OtherKey:="BenefitCategoryId")>  _
	Public Property DataWarehouseBenefits() As EntitySet(Of DataWarehouseBenefit)
		Get
			Return Me._DataWarehouseBenefits
		End Get
		Set
			Me._DataWarehouseBenefits.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DataWarehouseBenefits(ByVal entity As DataWarehouseBenefit)
		Me.SendPropertyChanging
		entity.DataWarehouseBenefitCategory = Me
	End Sub
	
	Private Sub detach_DataWarehouseBenefits(ByVal entity As DataWarehouseBenefit)
		Me.SendPropertyChanging
		entity.DataWarehouseBenefitCategory = Nothing
	End Sub
End Class
