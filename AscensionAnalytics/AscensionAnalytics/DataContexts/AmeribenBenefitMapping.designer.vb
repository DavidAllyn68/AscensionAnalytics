'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class AmeribenBenefitMappingDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAmeribenMapping_AscensionBenefits(instance As AmeribenMapping_AscensionBenefits)
    End Sub
  Partial Private Sub UpdateAmeribenMapping_AscensionBenefits(instance As AmeribenMapping_AscensionBenefits)
    End Sub
  Partial Private Sub DeleteAmeribenMapping_AscensionBenefits(instance As AmeribenMapping_AscensionBenefits)
    End Sub
  Partial Private Sub InsertAmeriben_BenefitMapping(instance As Ameriben_BenefitMapping)
    End Sub
  Partial Private Sub UpdateAmeriben_BenefitMapping(instance As Ameriben_BenefitMapping)
    End Sub
  Partial Private Sub DeleteAmeriben_BenefitMapping(instance As Ameriben_BenefitMapping)
    End Sub
  Partial Private Sub InsertAmeriben_POS(instance As Ameriben_POS)
    End Sub
  Partial Private Sub UpdateAmeriben_POS(instance As Ameriben_POS)
    End Sub
  Partial Private Sub DeleteAmeriben_POS(instance As Ameriben_POS)
    End Sub
  Partial Private Sub InsertAmeriben_TOS(instance As Ameriben_TOS)
    End Sub
  Partial Private Sub UpdateAmeriben_TOS(instance As Ameriben_TOS)
    End Sub
  Partial Private Sub DeleteAmeriben_TOS(instance As Ameriben_TOS)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property AmeribenMapping_AscensionBenefits() As System.Data.Linq.Table(Of AmeribenMapping_AscensionBenefits)
		Get
			Return Me.GetTable(Of AmeribenMapping_AscensionBenefits)
		End Get
	End Property
	
	Public ReadOnly Property Ameriben_BenefitMappings() As System.Data.Linq.Table(Of Ameriben_BenefitMapping)
		Get
			Return Me.GetTable(Of Ameriben_BenefitMapping)
		End Get
	End Property
	
	Public ReadOnly Property Ameriben_POS() As System.Data.Linq.Table(Of Ameriben_POS)
		Get
			Return Me.GetTable(Of Ameriben_POS)
		End Get
	End Property
	
	Public ReadOnly Property Ameriben_TOS() As System.Data.Linq.Table(Of Ameriben_TOS)
		Get
			Return Me.GetTable(Of Ameriben_TOS)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Benefits")>  _
Partial Public Class AmeribenMapping_AscensionBenefits
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BenefitId As Integer
	
	Private _BenefitCode As String
	
	Private _BenefitDescription As String
	
	Private _IsRxBenefit As Byte
	
	Private _IsMentalHealthBenefit As Byte
	
	Private _IsInpatientBenefit As Byte
	
	Private _IsOfficeVisitBenefit As Byte
	
	Private _IsEmergencyRoomBenefit As Byte
	
	Private _Ameriben_BenefitMappings As EntitySet(Of Ameriben_BenefitMapping)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBenefitIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBenefitIdChanged()
    End Sub
    Partial Private Sub OnBenefitCodeChanging(value As String)
    End Sub
    Partial Private Sub OnBenefitCodeChanged()
    End Sub
    Partial Private Sub OnBenefitDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnBenefitDescriptionChanged()
    End Sub
    Partial Private Sub OnIsRxBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsRxBenefitChanged()
    End Sub
    Partial Private Sub OnIsMentalHealthBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsMentalHealthBenefitChanged()
    End Sub
    Partial Private Sub OnIsInpatientBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsInpatientBenefitChanged()
    End Sub
    Partial Private Sub OnIsOfficeVisitBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsOfficeVisitBenefitChanged()
    End Sub
    Partial Private Sub OnIsEmergencyRoomBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsEmergencyRoomBenefitChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Ameriben_BenefitMappings = New EntitySet(Of Ameriben_BenefitMapping)(AddressOf Me.attach_Ameriben_BenefitMappings, AddressOf Me.detach_Ameriben_BenefitMappings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenefitId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BenefitId() As Integer
		Get
			Return Me._BenefitId
		End Get
		Set
			If ((Me._BenefitId = value)  _
						= false) Then
				Me.OnBenefitIdChanging(value)
				Me.SendPropertyChanging
				Me._BenefitId = value
				Me.SendPropertyChanged("BenefitId")
				Me.OnBenefitIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenefitCode", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property BenefitCode() As String
		Get
			Return Me._BenefitCode
		End Get
		Set
			If (String.Equals(Me._BenefitCode, value) = false) Then
				Me.OnBenefitCodeChanging(value)
				Me.SendPropertyChanging
				Me._BenefitCode = value
				Me.SendPropertyChanged("BenefitCode")
				Me.OnBenefitCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenefitDescription", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property BenefitDescription() As String
		Get
			Return Me._BenefitDescription
		End Get
		Set
			If (String.Equals(Me._BenefitDescription, value) = false) Then
				Me.OnBenefitDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._BenefitDescription = value
				Me.SendPropertyChanged("BenefitDescription")
				Me.OnBenefitDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsRxBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsRxBenefit() As Byte
		Get
			Return Me._IsRxBenefit
		End Get
		Set
			If ((Me._IsRxBenefit = value)  _
						= false) Then
				Me.OnIsRxBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsRxBenefit = value
				Me.SendPropertyChanged("IsRxBenefit")
				Me.OnIsRxBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsMentalHealthBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsMentalHealthBenefit() As Byte
		Get
			Return Me._IsMentalHealthBenefit
		End Get
		Set
			If ((Me._IsMentalHealthBenefit = value)  _
						= false) Then
				Me.OnIsMentalHealthBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsMentalHealthBenefit = value
				Me.SendPropertyChanged("IsMentalHealthBenefit")
				Me.OnIsMentalHealthBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsInpatientBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsInpatientBenefit() As Byte
		Get
			Return Me._IsInpatientBenefit
		End Get
		Set
			If ((Me._IsInpatientBenefit = value)  _
						= false) Then
				Me.OnIsInpatientBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsInpatientBenefit = value
				Me.SendPropertyChanged("IsInpatientBenefit")
				Me.OnIsInpatientBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsOfficeVisitBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsOfficeVisitBenefit() As Byte
		Get
			Return Me._IsOfficeVisitBenefit
		End Get
		Set
			If ((Me._IsOfficeVisitBenefit = value)  _
						= false) Then
				Me.OnIsOfficeVisitBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsOfficeVisitBenefit = value
				Me.SendPropertyChanged("IsOfficeVisitBenefit")
				Me.OnIsOfficeVisitBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsEmergencyRoomBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsEmergencyRoomBenefit() As Byte
		Get
			Return Me._IsEmergencyRoomBenefit
		End Get
		Set
			If ((Me._IsEmergencyRoomBenefit = value)  _
						= false) Then
				Me.OnIsEmergencyRoomBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsEmergencyRoomBenefit = value
				Me.SendPropertyChanged("IsEmergencyRoomBenefit")
				Me.OnIsEmergencyRoomBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AmeribenMapping_AscensionBenefits_Ameriben_BenefitMapping", Storage:="_Ameriben_BenefitMappings", ThisKey:="BenefitId", OtherKey:="AscensionBenefitId")>  _
	Public Property Ameriben_BenefitMappings() As EntitySet(Of Ameriben_BenefitMapping)
		Get
			Return Me._Ameriben_BenefitMappings
		End Get
		Set
			Me._Ameriben_BenefitMappings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Ameriben_BenefitMappings(ByVal entity As Ameriben_BenefitMapping)
		Me.SendPropertyChanging
		entity.AmeribenMapping_AscensionBenefits = Me
	End Sub
	
	Private Sub detach_Ameriben_BenefitMappings(ByVal entity As Ameriben_BenefitMapping)
		Me.SendPropertyChanging
		entity.AmeribenMapping_AscensionBenefits = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Ameriben_BenefitMapping")>  _
Partial Public Class Ameriben_BenefitMapping
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AmeribenBenefitMappingId As Integer
	
	Private _AmeribenPOS As String
	
	Private _AmeribenTOS As String
	
	Private _AscensionBenefitId As Integer
	
	Private _Benefits As EntityRef(Of AmeribenMapping_AscensionBenefits)
	
	Private _Ameriben_POS As EntityRef(Of Ameriben_POS)
	
	Private _Ameriben_TOS As EntityRef(Of Ameriben_TOS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAmeribenBenefitMappingIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAmeribenBenefitMappingIdChanged()
    End Sub
    Partial Private Sub OnAmeribenPOSChanging(value As String)
    End Sub
    Partial Private Sub OnAmeribenPOSChanged()
    End Sub
    Partial Private Sub OnAmeribenTOSChanging(value As String)
    End Sub
    Partial Private Sub OnAmeribenTOSChanged()
    End Sub
    Partial Private Sub OnAscensionBenefitIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAscensionBenefitIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Benefits = CType(Nothing, EntityRef(Of AmeribenMapping_AscensionBenefits))
		Me._Ameriben_POS = CType(Nothing, EntityRef(Of Ameriben_POS))
		Me._Ameriben_TOS = CType(Nothing, EntityRef(Of Ameriben_TOS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmeribenBenefitMappingId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AmeribenBenefitMappingId() As Integer
		Get
			Return Me._AmeribenBenefitMappingId
		End Get
		Set
			If ((Me._AmeribenBenefitMappingId = value)  _
						= false) Then
				Me.OnAmeribenBenefitMappingIdChanging(value)
				Me.SendPropertyChanging
				Me._AmeribenBenefitMappingId = value
				Me.SendPropertyChanged("AmeribenBenefitMappingId")
				Me.OnAmeribenBenefitMappingIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmeribenPOS", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property AmeribenPOS() As String
		Get
			Return Me._AmeribenPOS
		End Get
		Set
			If (String.Equals(Me._AmeribenPOS, value) = false) Then
				If Me._Ameriben_POS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAmeribenPOSChanging(value)
				Me.SendPropertyChanging
				Me._AmeribenPOS = value
				Me.SendPropertyChanged("AmeribenPOS")
				Me.OnAmeribenPOSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmeribenTOS", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property AmeribenTOS() As String
		Get
			Return Me._AmeribenTOS
		End Get
		Set
			If (String.Equals(Me._AmeribenTOS, value) = false) Then
				If Me._Ameriben_TOS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAmeribenTOSChanging(value)
				Me.SendPropertyChanging
				Me._AmeribenTOS = value
				Me.SendPropertyChanged("AmeribenTOS")
				Me.OnAmeribenTOSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AscensionBenefitId", DbType:="Int NOT NULL")>  _
	Public Property AscensionBenefitId() As Integer
		Get
			Return Me._AscensionBenefitId
		End Get
		Set
			If ((Me._AscensionBenefitId = value)  _
						= false) Then
				If Me._Benefits.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAscensionBenefitIdChanging(value)
				Me.SendPropertyChanging
				Me._AscensionBenefitId = value
				Me.SendPropertyChanged("AscensionBenefitId")
				Me.OnAscensionBenefitIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AmeribenMapping_AscensionBenefits_Ameriben_BenefitMapping", Storage:="_Benefits", ThisKey:="AscensionBenefitId", OtherKey:="BenefitId", IsForeignKey:=true)>  _
	Public Property AmeribenMapping_AscensionBenefits() As AmeribenMapping_AscensionBenefits
		Get
			Return Me._Benefits.Entity
		End Get
		Set
			Dim previousValue As AmeribenMapping_AscensionBenefits = Me._Benefits.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Benefits.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Benefits.Entity = Nothing
					previousValue.Ameriben_BenefitMappings.Remove(Me)
				End If
				Me._Benefits.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Ameriben_BenefitMappings.Add(Me)
					Me._AscensionBenefitId = value.BenefitId
				Else
					Me._AscensionBenefitId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AmeribenMapping_AscensionBenefits")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ameriben_POS_Ameriben_BenefitMapping", Storage:="_Ameriben_POS", ThisKey:="AmeribenPOS", OtherKey:="POSCode", IsForeignKey:=true)>  _
	Public Property Ameriben_POS() As Ameriben_POS
		Get
			Return Me._Ameriben_POS.Entity
		End Get
		Set
			Dim previousValue As Ameriben_POS = Me._Ameriben_POS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Ameriben_POS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Ameriben_POS.Entity = Nothing
					previousValue.Ameriben_BenefitMappings.Remove(Me)
				End If
				Me._Ameriben_POS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Ameriben_BenefitMappings.Add(Me)
					Me._AmeribenPOS = value.POSCode
				Else
					Me._AmeribenPOS = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Ameriben_POS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ameriben_TOS_Ameriben_BenefitMapping", Storage:="_Ameriben_TOS", ThisKey:="AmeribenTOS", OtherKey:="ChargeType", IsForeignKey:=true)>  _
	Public Property Ameriben_TOS() As Ameriben_TOS
		Get
			Return Me._Ameriben_TOS.Entity
		End Get
		Set
			Dim previousValue As Ameriben_TOS = Me._Ameriben_TOS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Ameriben_TOS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Ameriben_TOS.Entity = Nothing
					previousValue.Ameriben_BenefitMappings.Remove(Me)
				End If
				Me._Ameriben_TOS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Ameriben_BenefitMappings.Add(Me)
					Me._AmeribenTOS = value.ChargeType
				Else
					Me._AmeribenTOS = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Ameriben_TOS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Ameriben_POS")>  _
Partial Public Class Ameriben_POS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _POSCode As String
	
	Private _POSDescription As String
	
	Private _RenaissancePOSDescription As String
	
	Private _Ameriben_BenefitMappings As EntitySet(Of Ameriben_BenefitMapping)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPOSCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPOSCodeChanged()
    End Sub
    Partial Private Sub OnPOSDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnPOSDescriptionChanged()
    End Sub
    Partial Private Sub OnRenaissancePOSDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnRenaissancePOSDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Ameriben_BenefitMappings = New EntitySet(Of Ameriben_BenefitMapping)(AddressOf Me.attach_Ameriben_BenefitMappings, AddressOf Me.detach_Ameriben_BenefitMappings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_POSCode", DbType:="Char(2) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property POSCode() As String
		Get
			Return Me._POSCode
		End Get
		Set
			If (String.Equals(Me._POSCode, value) = false) Then
				Me.OnPOSCodeChanging(value)
				Me.SendPropertyChanging
				Me._POSCode = value
				Me.SendPropertyChanged("POSCode")
				Me.OnPOSCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_POSDescription", DbType:="VarChar(50)")>  _
	Public Property POSDescription() As String
		Get
			Return Me._POSDescription
		End Get
		Set
			If (String.Equals(Me._POSDescription, value) = false) Then
				Me.OnPOSDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._POSDescription = value
				Me.SendPropertyChanged("POSDescription")
				Me.OnPOSDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RenaissancePOSDescription", DbType:="VarChar(50)")>  _
	Public Property RenaissancePOSDescription() As String
		Get
			Return Me._RenaissancePOSDescription
		End Get
		Set
			If (String.Equals(Me._RenaissancePOSDescription, value) = false) Then
				Me.OnRenaissancePOSDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._RenaissancePOSDescription = value
				Me.SendPropertyChanged("RenaissancePOSDescription")
				Me.OnRenaissancePOSDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ameriben_POS_Ameriben_BenefitMapping", Storage:="_Ameriben_BenefitMappings", ThisKey:="POSCode", OtherKey:="AmeribenPOS")>  _
	Public Property Ameriben_BenefitMappings() As EntitySet(Of Ameriben_BenefitMapping)
		Get
			Return Me._Ameriben_BenefitMappings
		End Get
		Set
			Me._Ameriben_BenefitMappings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Ameriben_BenefitMappings(ByVal entity As Ameriben_BenefitMapping)
		Me.SendPropertyChanging
		entity.Ameriben_POS = Me
	End Sub
	
	Private Sub detach_Ameriben_BenefitMappings(ByVal entity As Ameriben_BenefitMapping)
		Me.SendPropertyChanging
		entity.Ameriben_POS = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Ameriben_TOS")>  _
Partial Public Class Ameriben_TOS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ChargeType As String
	
	Private _DetailChargeType As String
	
	Private _SummaryChargeType As String
	
	Private _BenefitType As String
	
	Private _Ameriben_BenefitMappings As EntitySet(Of Ameriben_BenefitMapping)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnChargeTypeChanging(value As String)
    End Sub
    Partial Private Sub OnChargeTypeChanged()
    End Sub
    Partial Private Sub OnDetailChargeTypeChanging(value As String)
    End Sub
    Partial Private Sub OnDetailChargeTypeChanged()
    End Sub
    Partial Private Sub OnSummaryChargeTypeChanging(value As String)
    End Sub
    Partial Private Sub OnSummaryChargeTypeChanged()
    End Sub
    Partial Private Sub OnBenefitTypeChanging(value As String)
    End Sub
    Partial Private Sub OnBenefitTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Ameriben_BenefitMappings = New EntitySet(Of Ameriben_BenefitMapping)(AddressOf Me.attach_Ameriben_BenefitMappings, AddressOf Me.detach_Ameriben_BenefitMappings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChargeType", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ChargeType() As String
		Get
			Return Me._ChargeType
		End Get
		Set
			If (String.Equals(Me._ChargeType, value) = false) Then
				Me.OnChargeTypeChanging(value)
				Me.SendPropertyChanging
				Me._ChargeType = value
				Me.SendPropertyChanged("ChargeType")
				Me.OnChargeTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DetailChargeType", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DetailChargeType() As String
		Get
			Return Me._DetailChargeType
		End Get
		Set
			If (String.Equals(Me._DetailChargeType, value) = false) Then
				Me.OnDetailChargeTypeChanging(value)
				Me.SendPropertyChanging
				Me._DetailChargeType = value
				Me.SendPropertyChanged("DetailChargeType")
				Me.OnDetailChargeTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SummaryChargeType", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property SummaryChargeType() As String
		Get
			Return Me._SummaryChargeType
		End Get
		Set
			If (String.Equals(Me._SummaryChargeType, value) = false) Then
				Me.OnSummaryChargeTypeChanging(value)
				Me.SendPropertyChanging
				Me._SummaryChargeType = value
				Me.SendPropertyChanged("SummaryChargeType")
				Me.OnSummaryChargeTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BenefitType", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property BenefitType() As String
		Get
			Return Me._BenefitType
		End Get
		Set
			If (String.Equals(Me._BenefitType, value) = false) Then
				Me.OnBenefitTypeChanging(value)
				Me.SendPropertyChanging
				Me._BenefitType = value
				Me.SendPropertyChanged("BenefitType")
				Me.OnBenefitTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ameriben_TOS_Ameriben_BenefitMapping", Storage:="_Ameriben_BenefitMappings", ThisKey:="ChargeType", OtherKey:="AmeribenTOS")>  _
	Public Property Ameriben_BenefitMappings() As EntitySet(Of Ameriben_BenefitMapping)
		Get
			Return Me._Ameriben_BenefitMappings
		End Get
		Set
			Me._Ameriben_BenefitMappings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Ameriben_BenefitMappings(ByVal entity As Ameriben_BenefitMapping)
		Me.SendPropertyChanging
		entity.Ameriben_TOS = Me
	End Sub
	
	Private Sub detach_Ameriben_BenefitMappings(ByVal entity As Ameriben_BenefitMapping)
		Me.SendPropertyChanging
		entity.Ameriben_TOS = Nothing
	End Sub
End Class
