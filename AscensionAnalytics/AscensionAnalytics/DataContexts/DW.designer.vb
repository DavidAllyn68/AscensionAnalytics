'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class DWDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertDW_Policy(instance As DW_Policy)
    End Sub
  Partial Private Sub UpdateDW_Policy(instance As DW_Policy)
    End Sub
  Partial Private Sub DeleteDW_Policy(instance As DW_Policy)
    End Sub
  Partial Private Sub InsertDW_Datasource(instance As DW_Datasource)
    End Sub
  Partial Private Sub UpdateDW_Datasource(instance As DW_Datasource)
    End Sub
  Partial Private Sub DeleteDW_Datasource(instance As DW_Datasource)
    End Sub
  Partial Private Sub InsertDW_Group(instance As DW_Group)
    End Sub
  Partial Private Sub UpdateDW_Group(instance As DW_Group)
    End Sub
  Partial Private Sub DeleteDW_Group(instance As DW_Group)
    End Sub
  Partial Private Sub InsertDW_Underwriter(instance As DW_Underwriter)
    End Sub
  Partial Private Sub UpdateDW_Underwriter(instance As DW_Underwriter)
    End Sub
  Partial Private Sub DeleteDW_Underwriter(instance As DW_Underwriter)
    End Sub
  Partial Private Sub InsertDW_Client(instance As DW_Client)
    End Sub
  Partial Private Sub UpdateDW_Client(instance As DW_Client)
    End Sub
  Partial Private Sub DeleteDW_Client(instance As DW_Client)
    End Sub
  Partial Private Sub InsertDW_Population(instance As DW_Population)
    End Sub
  Partial Private Sub UpdateDW_Population(instance As DW_Population)
    End Sub
  Partial Private Sub DeleteDW_Population(instance As DW_Population)
    End Sub
  Partial Private Sub InsertDW_Product(instance As DW_Product)
    End Sub
  Partial Private Sub UpdateDW_Product(instance As DW_Product)
    End Sub
  Partial Private Sub DeleteDW_Product(instance As DW_Product)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property DW_Policies() As System.Data.Linq.Table(Of DW_Policy)
		Get
			Return Me.GetTable(Of DW_Policy)
		End Get
	End Property
	
	Public ReadOnly Property DW_Datasources() As System.Data.Linq.Table(Of DW_Datasource)
		Get
			Return Me.GetTable(Of DW_Datasource)
		End Get
	End Property
	
	Public ReadOnly Property DW_Groups() As System.Data.Linq.Table(Of DW_Group)
		Get
			Return Me.GetTable(Of DW_Group)
		End Get
	End Property
	
	Public ReadOnly Property DW_Underwriters() As System.Data.Linq.Table(Of DW_Underwriter)
		Get
			Return Me.GetTable(Of DW_Underwriter)
		End Get
	End Property
	
	Public ReadOnly Property DW_Clients() As System.Data.Linq.Table(Of DW_Client)
		Get
			Return Me.GetTable(Of DW_Client)
		End Get
	End Property
	
	Public ReadOnly Property DW_Populations() As System.Data.Linq.Table(Of DW_Population)
		Get
			Return Me.GetTable(Of DW_Population)
		End Get
	End Property
	
	Public ReadOnly Property DW_Products() As System.Data.Linq.Table(Of DW_Product)
		Get
			Return Me.GetTable(Of DW_Product)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DW_Policies")>  _
Partial Public Class DW_Policy
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PolicyId As Integer
	
	Private _PolicyAbbreviation As String
	
	Private _PolicyName As String
	
	Private _GroupId As Integer
	
	Private _UnderwriterId As Integer
	
	Private _PolicyYearId As Integer
	
	Private _EffectiveDate As Date
	
	Private _ExpirationDate As Date
	
	Private _OriginatingDataSourceId As Integer
	
	Private _DW_Datasource As EntityRef(Of DW_Datasource)
	
	Private _DW_Group As EntityRef(Of DW_Group)
	
	Private _DW_Underwriter As EntityRef(Of DW_Underwriter)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPolicyIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPolicyIdChanged()
    End Sub
    Partial Private Sub OnPolicyAbbreviationChanging(value As String)
    End Sub
    Partial Private Sub OnPolicyAbbreviationChanged()
    End Sub
    Partial Private Sub OnPolicyNameChanging(value As String)
    End Sub
    Partial Private Sub OnPolicyNameChanged()
    End Sub
    Partial Private Sub OnGroupIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnGroupIdChanged()
    End Sub
    Partial Private Sub OnUnderwriterIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUnderwriterIdChanged()
    End Sub
    Partial Private Sub OnPolicyYearIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPolicyYearIdChanged()
    End Sub
    Partial Private Sub OnEffectiveDateChanging(value As Date)
    End Sub
    Partial Private Sub OnEffectiveDateChanged()
    End Sub
    Partial Private Sub OnExpirationDateChanging(value As Date)
    End Sub
    Partial Private Sub OnExpirationDateChanged()
    End Sub
    Partial Private Sub OnOriginatingDataSourceIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnOriginatingDataSourceIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DW_Datasource = CType(Nothing, EntityRef(Of DW_Datasource))
		Me._DW_Group = CType(Nothing, EntityRef(Of DW_Group))
		Me._DW_Underwriter = CType(Nothing, EntityRef(Of DW_Underwriter))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PolicyId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PolicyId() As Integer
		Get
			Return Me._PolicyId
		End Get
		Set
			If ((Me._PolicyId = value)  _
						= false) Then
				Me.OnPolicyIdChanging(value)
				Me.SendPropertyChanging
				Me._PolicyId = value
				Me.SendPropertyChanged("PolicyId")
				Me.OnPolicyIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PolicyAbbreviation", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property PolicyAbbreviation() As String
		Get
			Return Me._PolicyAbbreviation
		End Get
		Set
			If (String.Equals(Me._PolicyAbbreviation, value) = false) Then
				Me.OnPolicyAbbreviationChanging(value)
				Me.SendPropertyChanging
				Me._PolicyAbbreviation = value
				Me.SendPropertyChanged("PolicyAbbreviation")
				Me.OnPolicyAbbreviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PolicyName", DbType:="VarChar(300) NOT NULL", CanBeNull:=false)>  _
	Public Property PolicyName() As String
		Get
			Return Me._PolicyName
		End Get
		Set
			If (String.Equals(Me._PolicyName, value) = false) Then
				Me.OnPolicyNameChanging(value)
				Me.SendPropertyChanging
				Me._PolicyName = value
				Me.SendPropertyChanged("PolicyName")
				Me.OnPolicyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupId", DbType:="Int NOT NULL")>  _
	Public Property GroupId() As Integer
		Get
			Return Me._GroupId
		End Get
		Set
			If ((Me._GroupId = value)  _
						= false) Then
				If Me._DW_Group.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnGroupIdChanging(value)
				Me.SendPropertyChanging
				Me._GroupId = value
				Me.SendPropertyChanged("GroupId")
				Me.OnGroupIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnderwriterId", DbType:="Int NOT NULL")>  _
	Public Property UnderwriterId() As Integer
		Get
			Return Me._UnderwriterId
		End Get
		Set
			If ((Me._UnderwriterId = value)  _
						= false) Then
				If Me._DW_Underwriter.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUnderwriterIdChanging(value)
				Me.SendPropertyChanging
				Me._UnderwriterId = value
				Me.SendPropertyChanged("UnderwriterId")
				Me.OnUnderwriterIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PolicyYearId", DbType:="Int NOT NULL")>  _
	Public Property PolicyYearId() As Integer
		Get
			Return Me._PolicyYearId
		End Get
		Set
			If ((Me._PolicyYearId = value)  _
						= false) Then
				Me.OnPolicyYearIdChanging(value)
				Me.SendPropertyChanging
				Me._PolicyYearId = value
				Me.SendPropertyChanged("PolicyYearId")
				Me.OnPolicyYearIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EffectiveDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property EffectiveDate() As Date
		Get
			Return Me._EffectiveDate
		End Get
		Set
			If ((Me._EffectiveDate = value)  _
						= false) Then
				Me.OnEffectiveDateChanging(value)
				Me.SendPropertyChanging
				Me._EffectiveDate = value
				Me.SendPropertyChanged("EffectiveDate")
				Me.OnEffectiveDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpirationDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property ExpirationDate() As Date
		Get
			Return Me._ExpirationDate
		End Get
		Set
			If ((Me._ExpirationDate = value)  _
						= false) Then
				Me.OnExpirationDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpirationDate = value
				Me.SendPropertyChanged("ExpirationDate")
				Me.OnExpirationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OriginatingDataSourceId", DbType:="Int NOT NULL")>  _
	Public Property OriginatingDataSourceId() As Integer
		Get
			Return Me._OriginatingDataSourceId
		End Get
		Set
			If ((Me._OriginatingDataSourceId = value)  _
						= false) Then
				If Me._DW_Datasource.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOriginatingDataSourceIdChanging(value)
				Me.SendPropertyChanging
				Me._OriginatingDataSourceId = value
				Me.SendPropertyChanged("OriginatingDataSourceId")
				Me.OnOriginatingDataSourceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Datasource_DW_Policy", Storage:="_DW_Datasource", ThisKey:="OriginatingDataSourceId", OtherKey:="DataSourceId", IsForeignKey:=true)>  _
	Public Property DW_Datasource() As DW_Datasource
		Get
			Return Me._DW_Datasource.Entity
		End Get
		Set
			Dim previousValue As DW_Datasource = Me._DW_Datasource.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DW_Datasource.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DW_Datasource.Entity = Nothing
					previousValue.DW_Policies.Remove(Me)
				End If
				Me._DW_Datasource.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DW_Policies.Add(Me)
					Me._OriginatingDataSourceId = value.DataSourceId
				Else
					Me._OriginatingDataSourceId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DW_Datasource")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Group_DW_Policy", Storage:="_DW_Group", ThisKey:="GroupId", OtherKey:="GroupId", IsForeignKey:=true)>  _
	Public Property DW_Group() As DW_Group
		Get
			Return Me._DW_Group.Entity
		End Get
		Set
			Dim previousValue As DW_Group = Me._DW_Group.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DW_Group.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DW_Group.Entity = Nothing
					previousValue.DW_Policies.Remove(Me)
				End If
				Me._DW_Group.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DW_Policies.Add(Me)
					Me._GroupId = value.GroupId
				Else
					Me._GroupId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DW_Group")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Underwriter_DW_Policy", Storage:="_DW_Underwriter", ThisKey:="UnderwriterId", OtherKey:="UnderwriterId", IsForeignKey:=true)>  _
	Public Property DW_Underwriter() As DW_Underwriter
		Get
			Return Me._DW_Underwriter.Entity
		End Get
		Set
			Dim previousValue As DW_Underwriter = Me._DW_Underwriter.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DW_Underwriter.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DW_Underwriter.Entity = Nothing
					previousValue.DW_Policies.Remove(Me)
				End If
				Me._DW_Underwriter.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DW_Policies.Add(Me)
					Me._UnderwriterId = value.UnderwriterId
				Else
					Me._UnderwriterId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DW_Underwriter")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Datasources")>  _
Partial Public Class DW_Datasource
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DataSourceId As Integer
	
	Private _DataSourceName As String
	
	Private _DataSourceNotes As String
	
	Private _DataSourceDelivery As String
	
	Private _DataSourceClaimsTableName As String
	
	Private _DataSourceWebsite As String
	
	Private _DataSourcePrimaryContact As String
	
	Private _DataSourceLastImport As System.Nullable(Of Date)
	
	Private _DW_Policies As EntitySet(Of DW_Policy)
	
	Private _DW_Groups As EntitySet(Of DW_Group)
	
	Private _DW_Underwriters As EntitySet(Of DW_Underwriter)
	
	Private _DW_Clients As EntitySet(Of DW_Client)
	
	Private _DW_Populations As EntitySet(Of DW_Population)
	
	Private _DW_Products As EntitySet(Of DW_Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDataSourceIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataSourceIdChanged()
    End Sub
    Partial Private Sub OnDataSourceNameChanging(value As String)
    End Sub
    Partial Private Sub OnDataSourceNameChanged()
    End Sub
    Partial Private Sub OnDataSourceNotesChanging(value As String)
    End Sub
    Partial Private Sub OnDataSourceNotesChanged()
    End Sub
    Partial Private Sub OnDataSourceDeliveryChanging(value As String)
    End Sub
    Partial Private Sub OnDataSourceDeliveryChanged()
    End Sub
    Partial Private Sub OnDataSourceClaimsTableNameChanging(value As String)
    End Sub
    Partial Private Sub OnDataSourceClaimsTableNameChanged()
    End Sub
    Partial Private Sub OnDataSourceWebsiteChanging(value As String)
    End Sub
    Partial Private Sub OnDataSourceWebsiteChanged()
    End Sub
    Partial Private Sub OnDataSourcePrimaryContactChanging(value As String)
    End Sub
    Partial Private Sub OnDataSourcePrimaryContactChanged()
    End Sub
    Partial Private Sub OnDataSourceLastImportChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDataSourceLastImportChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DW_Policies = New EntitySet(Of DW_Policy)(AddressOf Me.attach_DW_Policies, AddressOf Me.detach_DW_Policies)
		Me._DW_Groups = New EntitySet(Of DW_Group)(AddressOf Me.attach_DW_Groups, AddressOf Me.detach_DW_Groups)
		Me._DW_Underwriters = New EntitySet(Of DW_Underwriter)(AddressOf Me.attach_DW_Underwriters, AddressOf Me.detach_DW_Underwriters)
		Me._DW_Clients = New EntitySet(Of DW_Client)(AddressOf Me.attach_DW_Clients, AddressOf Me.detach_DW_Clients)
		Me._DW_Populations = New EntitySet(Of DW_Population)(AddressOf Me.attach_DW_Populations, AddressOf Me.detach_DW_Populations)
		Me._DW_Products = New EntitySet(Of DW_Product)(AddressOf Me.attach_DW_Products, AddressOf Me.detach_DW_Products)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataSourceId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DataSourceId() As Integer
		Get
			Return Me._DataSourceId
		End Get
		Set
			If ((Me._DataSourceId = value)  _
						= false) Then
				Me.OnDataSourceIdChanging(value)
				Me.SendPropertyChanging
				Me._DataSourceId = value
				Me.SendPropertyChanged("DataSourceId")
				Me.OnDataSourceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataSourceName", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property DataSourceName() As String
		Get
			Return Me._DataSourceName
		End Get
		Set
			If (String.Equals(Me._DataSourceName, value) = false) Then
				Me.OnDataSourceNameChanging(value)
				Me.SendPropertyChanging
				Me._DataSourceName = value
				Me.SendPropertyChanged("DataSourceName")
				Me.OnDataSourceNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataSourceNotes", DbType:="VarChar(1000)")>  _
	Public Property DataSourceNotes() As String
		Get
			Return Me._DataSourceNotes
		End Get
		Set
			If (String.Equals(Me._DataSourceNotes, value) = false) Then
				Me.OnDataSourceNotesChanging(value)
				Me.SendPropertyChanging
				Me._DataSourceNotes = value
				Me.SendPropertyChanged("DataSourceNotes")
				Me.OnDataSourceNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataSourceDelivery", DbType:="VarChar(30)")>  _
	Public Property DataSourceDelivery() As String
		Get
			Return Me._DataSourceDelivery
		End Get
		Set
			If (String.Equals(Me._DataSourceDelivery, value) = false) Then
				Me.OnDataSourceDeliveryChanging(value)
				Me.SendPropertyChanging
				Me._DataSourceDelivery = value
				Me.SendPropertyChanged("DataSourceDelivery")
				Me.OnDataSourceDeliveryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataSourceClaimsTableName", DbType:="VarChar(200)")>  _
	Public Property DataSourceClaimsTableName() As String
		Get
			Return Me._DataSourceClaimsTableName
		End Get
		Set
			If (String.Equals(Me._DataSourceClaimsTableName, value) = false) Then
				Me.OnDataSourceClaimsTableNameChanging(value)
				Me.SendPropertyChanging
				Me._DataSourceClaimsTableName = value
				Me.SendPropertyChanged("DataSourceClaimsTableName")
				Me.OnDataSourceClaimsTableNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataSourceWebsite", DbType:="VarChar(2000)")>  _
	Public Property DataSourceWebsite() As String
		Get
			Return Me._DataSourceWebsite
		End Get
		Set
			If (String.Equals(Me._DataSourceWebsite, value) = false) Then
				Me.OnDataSourceWebsiteChanging(value)
				Me.SendPropertyChanging
				Me._DataSourceWebsite = value
				Me.SendPropertyChanged("DataSourceWebsite")
				Me.OnDataSourceWebsiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataSourcePrimaryContact", DbType:="VarChar(300)")>  _
	Public Property DataSourcePrimaryContact() As String
		Get
			Return Me._DataSourcePrimaryContact
		End Get
		Set
			If (String.Equals(Me._DataSourcePrimaryContact, value) = false) Then
				Me.OnDataSourcePrimaryContactChanging(value)
				Me.SendPropertyChanging
				Me._DataSourcePrimaryContact = value
				Me.SendPropertyChanged("DataSourcePrimaryContact")
				Me.OnDataSourcePrimaryContactChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataSourceLastImport", DbType:="SmallDateTime")>  _
	Public Property DataSourceLastImport() As System.Nullable(Of Date)
		Get
			Return Me._DataSourceLastImport
		End Get
		Set
			If (Me._DataSourceLastImport.Equals(value) = false) Then
				Me.OnDataSourceLastImportChanging(value)
				Me.SendPropertyChanging
				Me._DataSourceLastImport = value
				Me.SendPropertyChanged("DataSourceLastImport")
				Me.OnDataSourceLastImportChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Datasource_DW_Policy", Storage:="_DW_Policies", ThisKey:="DataSourceId", OtherKey:="OriginatingDataSourceId")>  _
	Public Property DW_Policies() As EntitySet(Of DW_Policy)
		Get
			Return Me._DW_Policies
		End Get
		Set
			Me._DW_Policies.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Datasource_DW_Group", Storage:="_DW_Groups", ThisKey:="DataSourceId", OtherKey:="OriginatingDataSourceId")>  _
	Public Property DW_Groups() As EntitySet(Of DW_Group)
		Get
			Return Me._DW_Groups
		End Get
		Set
			Me._DW_Groups.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Datasource_DW_Underwriter", Storage:="_DW_Underwriters", ThisKey:="DataSourceId", OtherKey:="OriginatingDataSourceId")>  _
	Public Property DW_Underwriters() As EntitySet(Of DW_Underwriter)
		Get
			Return Me._DW_Underwriters
		End Get
		Set
			Me._DW_Underwriters.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Datasource_DW_Client", Storage:="_DW_Clients", ThisKey:="DataSourceId", OtherKey:="OriginatingDataSourceId")>  _
	Public Property DW_Clients() As EntitySet(Of DW_Client)
		Get
			Return Me._DW_Clients
		End Get
		Set
			Me._DW_Clients.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Datasource_DW_Population", Storage:="_DW_Populations", ThisKey:="DataSourceId", OtherKey:="OriginatingDataSourceId")>  _
	Public Property DW_Populations() As EntitySet(Of DW_Population)
		Get
			Return Me._DW_Populations
		End Get
		Set
			Me._DW_Populations.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Datasource_DW_Product", Storage:="_DW_Products", ThisKey:="DataSourceId", OtherKey:="OriginatingDataSourceId")>  _
	Public Property DW_Products() As EntitySet(Of DW_Product)
		Get
			Return Me._DW_Products
		End Get
		Set
			Me._DW_Products.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DW_Policies(ByVal entity As DW_Policy)
		Me.SendPropertyChanging
		entity.DW_Datasource = Me
	End Sub
	
	Private Sub detach_DW_Policies(ByVal entity As DW_Policy)
		Me.SendPropertyChanging
		entity.DW_Datasource = Nothing
	End Sub
	
	Private Sub attach_DW_Groups(ByVal entity As DW_Group)
		Me.SendPropertyChanging
		entity.DW_Datasource = Me
	End Sub
	
	Private Sub detach_DW_Groups(ByVal entity As DW_Group)
		Me.SendPropertyChanging
		entity.DW_Datasource = Nothing
	End Sub
	
	Private Sub attach_DW_Underwriters(ByVal entity As DW_Underwriter)
		Me.SendPropertyChanging
		entity.DW_Datasource = Me
	End Sub
	
	Private Sub detach_DW_Underwriters(ByVal entity As DW_Underwriter)
		Me.SendPropertyChanging
		entity.DW_Datasource = Nothing
	End Sub
	
	Private Sub attach_DW_Clients(ByVal entity As DW_Client)
		Me.SendPropertyChanging
		entity.DW_Datasource = Me
	End Sub
	
	Private Sub detach_DW_Clients(ByVal entity As DW_Client)
		Me.SendPropertyChanging
		entity.DW_Datasource = Nothing
	End Sub
	
	Private Sub attach_DW_Populations(ByVal entity As DW_Population)
		Me.SendPropertyChanging
		entity.DW_Datasource = Me
	End Sub
	
	Private Sub detach_DW_Populations(ByVal entity As DW_Population)
		Me.SendPropertyChanging
		entity.DW_Datasource = Nothing
	End Sub
	
	Private Sub attach_DW_Products(ByVal entity As DW_Product)
		Me.SendPropertyChanging
		entity.DW_Datasource = Me
	End Sub
	
	Private Sub detach_DW_Products(ByVal entity As DW_Product)
		Me.SendPropertyChanging
		entity.DW_Datasource = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DW_Groups")>  _
Partial Public Class DW_Group
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GroupId As Integer
	
	Private _GroupAbbreviation As String
	
	Private _GroupName As String
	
	Private _ClientId As Integer
	
	Private _PopulationId As Integer
	
	Private _ProductId As Integer
	
	Private _OriginatingDataSourceId As Integer
	
	Private _DW_Policies As EntitySet(Of DW_Policy)
	
	Private _DW_Datasource As EntityRef(Of DW_Datasource)
	
	Private _DW_Client As EntityRef(Of DW_Client)
	
	Private _DW_Population As EntityRef(Of DW_Population)
	
	Private _DW_Product As EntityRef(Of DW_Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGroupIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnGroupIdChanged()
    End Sub
    Partial Private Sub OnGroupAbbreviationChanging(value As String)
    End Sub
    Partial Private Sub OnGroupAbbreviationChanged()
    End Sub
    Partial Private Sub OnGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnGroupNameChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    Partial Private Sub OnPopulationIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPopulationIdChanged()
    End Sub
    Partial Private Sub OnProductIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIdChanged()
    End Sub
    Partial Private Sub OnOriginatingDataSourceIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnOriginatingDataSourceIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DW_Policies = New EntitySet(Of DW_Policy)(AddressOf Me.attach_DW_Policies, AddressOf Me.detach_DW_Policies)
		Me._DW_Datasource = CType(Nothing, EntityRef(Of DW_Datasource))
		Me._DW_Client = CType(Nothing, EntityRef(Of DW_Client))
		Me._DW_Population = CType(Nothing, EntityRef(Of DW_Population))
		Me._DW_Product = CType(Nothing, EntityRef(Of DW_Product))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property GroupId() As Integer
		Get
			Return Me._GroupId
		End Get
		Set
			If ((Me._GroupId = value)  _
						= false) Then
				Me.OnGroupIdChanging(value)
				Me.SendPropertyChanging
				Me._GroupId = value
				Me.SendPropertyChanged("GroupId")
				Me.OnGroupIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupAbbreviation", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property GroupAbbreviation() As String
		Get
			Return Me._GroupAbbreviation
		End Get
		Set
			If (String.Equals(Me._GroupAbbreviation, value) = false) Then
				Me.OnGroupAbbreviationChanging(value)
				Me.SendPropertyChanging
				Me._GroupAbbreviation = value
				Me.SendPropertyChanged("GroupAbbreviation")
				Me.OnGroupAbbreviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupName", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property GroupName() As String
		Get
			Return Me._GroupName
		End Get
		Set
			If (String.Equals(Me._GroupName, value) = false) Then
				Me.OnGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._GroupName = value
				Me.SendPropertyChanged("GroupName")
				Me.OnGroupNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="Int NOT NULL")>  _
	Public Property ClientId() As Integer
		Get
			Return Me._ClientId
		End Get
		Set
			If ((Me._ClientId = value)  _
						= false) Then
				If Me._DW_Client.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PopulationId", DbType:="Int NOT NULL")>  _
	Public Property PopulationId() As Integer
		Get
			Return Me._PopulationId
		End Get
		Set
			If ((Me._PopulationId = value)  _
						= false) Then
				If Me._DW_Population.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPopulationIdChanging(value)
				Me.SendPropertyChanging
				Me._PopulationId = value
				Me.SendPropertyChanged("PopulationId")
				Me.OnPopulationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductId", DbType:="Int NOT NULL")>  _
	Public Property ProductId() As Integer
		Get
			Return Me._ProductId
		End Get
		Set
			If ((Me._ProductId = value)  _
						= false) Then
				If Me._DW_Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProductIdChanging(value)
				Me.SendPropertyChanging
				Me._ProductId = value
				Me.SendPropertyChanged("ProductId")
				Me.OnProductIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OriginatingDataSourceId", DbType:="Int NOT NULL")>  _
	Public Property OriginatingDataSourceId() As Integer
		Get
			Return Me._OriginatingDataSourceId
		End Get
		Set
			If ((Me._OriginatingDataSourceId = value)  _
						= false) Then
				If Me._DW_Datasource.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOriginatingDataSourceIdChanging(value)
				Me.SendPropertyChanging
				Me._OriginatingDataSourceId = value
				Me.SendPropertyChanged("OriginatingDataSourceId")
				Me.OnOriginatingDataSourceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Group_DW_Policy", Storage:="_DW_Policies", ThisKey:="GroupId", OtherKey:="GroupId")>  _
	Public Property DW_Policies() As EntitySet(Of DW_Policy)
		Get
			Return Me._DW_Policies
		End Get
		Set
			Me._DW_Policies.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Datasource_DW_Group", Storage:="_DW_Datasource", ThisKey:="OriginatingDataSourceId", OtherKey:="DataSourceId", IsForeignKey:=true)>  _
	Public Property DW_Datasource() As DW_Datasource
		Get
			Return Me._DW_Datasource.Entity
		End Get
		Set
			Dim previousValue As DW_Datasource = Me._DW_Datasource.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DW_Datasource.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DW_Datasource.Entity = Nothing
					previousValue.DW_Groups.Remove(Me)
				End If
				Me._DW_Datasource.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DW_Groups.Add(Me)
					Me._OriginatingDataSourceId = value.DataSourceId
				Else
					Me._OriginatingDataSourceId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DW_Datasource")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Client_DW_Group", Storage:="_DW_Client", ThisKey:="ClientId", OtherKey:="ClientId", IsForeignKey:=true)>  _
	Public Property DW_Client() As DW_Client
		Get
			Return Me._DW_Client.Entity
		End Get
		Set
			Dim previousValue As DW_Client = Me._DW_Client.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DW_Client.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DW_Client.Entity = Nothing
					previousValue.DW_Groups.Remove(Me)
				End If
				Me._DW_Client.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DW_Groups.Add(Me)
					Me._ClientId = value.ClientId
				Else
					Me._ClientId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DW_Client")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Population_DW_Group", Storage:="_DW_Population", ThisKey:="PopulationId", OtherKey:="PopulationId", IsForeignKey:=true)>  _
	Public Property DW_Population() As DW_Population
		Get
			Return Me._DW_Population.Entity
		End Get
		Set
			Dim previousValue As DW_Population = Me._DW_Population.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DW_Population.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DW_Population.Entity = Nothing
					previousValue.DW_Groups.Remove(Me)
				End If
				Me._DW_Population.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DW_Groups.Add(Me)
					Me._PopulationId = value.PopulationId
				Else
					Me._PopulationId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DW_Population")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Product_DW_Group", Storage:="_DW_Product", ThisKey:="ProductId", OtherKey:="ProductId", IsForeignKey:=true)>  _
	Public Property DW_Product() As DW_Product
		Get
			Return Me._DW_Product.Entity
		End Get
		Set
			Dim previousValue As DW_Product = Me._DW_Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DW_Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DW_Product.Entity = Nothing
					previousValue.DW_Groups.Remove(Me)
				End If
				Me._DW_Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DW_Groups.Add(Me)
					Me._ProductId = value.ProductId
				Else
					Me._ProductId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DW_Product")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DW_Policies(ByVal entity As DW_Policy)
		Me.SendPropertyChanging
		entity.DW_Group = Me
	End Sub
	
	Private Sub detach_DW_Policies(ByVal entity As DW_Policy)
		Me.SendPropertyChanging
		entity.DW_Group = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DW_Underwriters")>  _
Partial Public Class DW_Underwriter
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UnderwriterId As Integer
	
	Private _UnderwriterAbbreviation As String
	
	Private _UnderwriterName As String
	
	Private _OriginatingDataSourceId As Integer
	
	Private _DW_Policies As EntitySet(Of DW_Policy)
	
	Private _DW_Datasource As EntityRef(Of DW_Datasource)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUnderwriterIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUnderwriterIdChanged()
    End Sub
    Partial Private Sub OnUnderwriterAbbreviationChanging(value As String)
    End Sub
    Partial Private Sub OnUnderwriterAbbreviationChanged()
    End Sub
    Partial Private Sub OnUnderwriterNameChanging(value As String)
    End Sub
    Partial Private Sub OnUnderwriterNameChanged()
    End Sub
    Partial Private Sub OnOriginatingDataSourceIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnOriginatingDataSourceIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DW_Policies = New EntitySet(Of DW_Policy)(AddressOf Me.attach_DW_Policies, AddressOf Me.detach_DW_Policies)
		Me._DW_Datasource = CType(Nothing, EntityRef(Of DW_Datasource))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnderwriterId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UnderwriterId() As Integer
		Get
			Return Me._UnderwriterId
		End Get
		Set
			If ((Me._UnderwriterId = value)  _
						= false) Then
				Me.OnUnderwriterIdChanging(value)
				Me.SendPropertyChanging
				Me._UnderwriterId = value
				Me.SendPropertyChanged("UnderwriterId")
				Me.OnUnderwriterIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnderwriterAbbreviation", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property UnderwriterAbbreviation() As String
		Get
			Return Me._UnderwriterAbbreviation
		End Get
		Set
			If (String.Equals(Me._UnderwriterAbbreviation, value) = false) Then
				Me.OnUnderwriterAbbreviationChanging(value)
				Me.SendPropertyChanging
				Me._UnderwriterAbbreviation = value
				Me.SendPropertyChanged("UnderwriterAbbreviation")
				Me.OnUnderwriterAbbreviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnderwriterName", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property UnderwriterName() As String
		Get
			Return Me._UnderwriterName
		End Get
		Set
			If (String.Equals(Me._UnderwriterName, value) = false) Then
				Me.OnUnderwriterNameChanging(value)
				Me.SendPropertyChanging
				Me._UnderwriterName = value
				Me.SendPropertyChanged("UnderwriterName")
				Me.OnUnderwriterNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OriginatingDataSourceId", DbType:="Int NOT NULL")>  _
	Public Property OriginatingDataSourceId() As Integer
		Get
			Return Me._OriginatingDataSourceId
		End Get
		Set
			If ((Me._OriginatingDataSourceId = value)  _
						= false) Then
				If Me._DW_Datasource.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOriginatingDataSourceIdChanging(value)
				Me.SendPropertyChanging
				Me._OriginatingDataSourceId = value
				Me.SendPropertyChanged("OriginatingDataSourceId")
				Me.OnOriginatingDataSourceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Underwriter_DW_Policy", Storage:="_DW_Policies", ThisKey:="UnderwriterId", OtherKey:="UnderwriterId")>  _
	Public Property DW_Policies() As EntitySet(Of DW_Policy)
		Get
			Return Me._DW_Policies
		End Get
		Set
			Me._DW_Policies.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Datasource_DW_Underwriter", Storage:="_DW_Datasource", ThisKey:="OriginatingDataSourceId", OtherKey:="DataSourceId", IsForeignKey:=true)>  _
	Public Property DW_Datasource() As DW_Datasource
		Get
			Return Me._DW_Datasource.Entity
		End Get
		Set
			Dim previousValue As DW_Datasource = Me._DW_Datasource.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DW_Datasource.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DW_Datasource.Entity = Nothing
					previousValue.DW_Underwriters.Remove(Me)
				End If
				Me._DW_Datasource.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DW_Underwriters.Add(Me)
					Me._OriginatingDataSourceId = value.DataSourceId
				Else
					Me._OriginatingDataSourceId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DW_Datasource")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DW_Policies(ByVal entity As DW_Policy)
		Me.SendPropertyChanging
		entity.DW_Underwriter = Me
	End Sub
	
	Private Sub detach_DW_Policies(ByVal entity As DW_Policy)
		Me.SendPropertyChanging
		entity.DW_Underwriter = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DW_Clients")>  _
Partial Public Class DW_Client
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ClientId As Integer
	
	Private _ClientAbbreviation As String
	
	Private _ClientName As String
	
	Private _OriginatingDataSourceId As Integer
	
	Private _DW_Groups As EntitySet(Of DW_Group)
	
	Private _DW_Datasource As EntityRef(Of DW_Datasource)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnClientIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    Partial Private Sub OnClientAbbreviationChanging(value As String)
    End Sub
    Partial Private Sub OnClientAbbreviationChanged()
    End Sub
    Partial Private Sub OnClientNameChanging(value As String)
    End Sub
    Partial Private Sub OnClientNameChanged()
    End Sub
    Partial Private Sub OnOriginatingDataSourceIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnOriginatingDataSourceIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DW_Groups = New EntitySet(Of DW_Group)(AddressOf Me.attach_DW_Groups, AddressOf Me.detach_DW_Groups)
		Me._DW_Datasource = CType(Nothing, EntityRef(Of DW_Datasource))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ClientId() As Integer
		Get
			Return Me._ClientId
		End Get
		Set
			If ((Me._ClientId = value)  _
						= false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientAbbreviation", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property ClientAbbreviation() As String
		Get
			Return Me._ClientAbbreviation
		End Get
		Set
			If (String.Equals(Me._ClientAbbreviation, value) = false) Then
				Me.OnClientAbbreviationChanging(value)
				Me.SendPropertyChanging
				Me._ClientAbbreviation = value
				Me.SendPropertyChanged("ClientAbbreviation")
				Me.OnClientAbbreviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientName", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property ClientName() As String
		Get
			Return Me._ClientName
		End Get
		Set
			If (String.Equals(Me._ClientName, value) = false) Then
				Me.OnClientNameChanging(value)
				Me.SendPropertyChanging
				Me._ClientName = value
				Me.SendPropertyChanged("ClientName")
				Me.OnClientNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OriginatingDataSourceId", DbType:="Int NOT NULL")>  _
	Public Property OriginatingDataSourceId() As Integer
		Get
			Return Me._OriginatingDataSourceId
		End Get
		Set
			If ((Me._OriginatingDataSourceId = value)  _
						= false) Then
				If Me._DW_Datasource.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOriginatingDataSourceIdChanging(value)
				Me.SendPropertyChanging
				Me._OriginatingDataSourceId = value
				Me.SendPropertyChanged("OriginatingDataSourceId")
				Me.OnOriginatingDataSourceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Client_DW_Group", Storage:="_DW_Groups", ThisKey:="ClientId", OtherKey:="ClientId")>  _
	Public Property DW_Groups() As EntitySet(Of DW_Group)
		Get
			Return Me._DW_Groups
		End Get
		Set
			Me._DW_Groups.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Datasource_DW_Client", Storage:="_DW_Datasource", ThisKey:="OriginatingDataSourceId", OtherKey:="DataSourceId", IsForeignKey:=true)>  _
	Public Property DW_Datasource() As DW_Datasource
		Get
			Return Me._DW_Datasource.Entity
		End Get
		Set
			Dim previousValue As DW_Datasource = Me._DW_Datasource.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DW_Datasource.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DW_Datasource.Entity = Nothing
					previousValue.DW_Clients.Remove(Me)
				End If
				Me._DW_Datasource.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DW_Clients.Add(Me)
					Me._OriginatingDataSourceId = value.DataSourceId
				Else
					Me._OriginatingDataSourceId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DW_Datasource")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DW_Groups(ByVal entity As DW_Group)
		Me.SendPropertyChanging
		entity.DW_Client = Me
	End Sub
	
	Private Sub detach_DW_Groups(ByVal entity As DW_Group)
		Me.SendPropertyChanging
		entity.DW_Client = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DW_Populations")>  _
Partial Public Class DW_Population
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PopulationId As Integer
	
	Private _PopulationAbbreviation As String
	
	Private _PopulationName As String
	
	Private _OriginatingDataSourceId As Integer
	
	Private _DW_Groups As EntitySet(Of DW_Group)
	
	Private _DW_Datasource As EntityRef(Of DW_Datasource)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPopulationIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPopulationIdChanged()
    End Sub
    Partial Private Sub OnPopulationAbbreviationChanging(value As String)
    End Sub
    Partial Private Sub OnPopulationAbbreviationChanged()
    End Sub
    Partial Private Sub OnPopulationNameChanging(value As String)
    End Sub
    Partial Private Sub OnPopulationNameChanged()
    End Sub
    Partial Private Sub OnOriginatingDataSourceIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnOriginatingDataSourceIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DW_Groups = New EntitySet(Of DW_Group)(AddressOf Me.attach_DW_Groups, AddressOf Me.detach_DW_Groups)
		Me._DW_Datasource = CType(Nothing, EntityRef(Of DW_Datasource))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PopulationId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PopulationId() As Integer
		Get
			Return Me._PopulationId
		End Get
		Set
			If ((Me._PopulationId = value)  _
						= false) Then
				Me.OnPopulationIdChanging(value)
				Me.SendPropertyChanging
				Me._PopulationId = value
				Me.SendPropertyChanged("PopulationId")
				Me.OnPopulationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PopulationAbbreviation", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property PopulationAbbreviation() As String
		Get
			Return Me._PopulationAbbreviation
		End Get
		Set
			If (String.Equals(Me._PopulationAbbreviation, value) = false) Then
				Me.OnPopulationAbbreviationChanging(value)
				Me.SendPropertyChanging
				Me._PopulationAbbreviation = value
				Me.SendPropertyChanged("PopulationAbbreviation")
				Me.OnPopulationAbbreviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PopulationName", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property PopulationName() As String
		Get
			Return Me._PopulationName
		End Get
		Set
			If (String.Equals(Me._PopulationName, value) = false) Then
				Me.OnPopulationNameChanging(value)
				Me.SendPropertyChanging
				Me._PopulationName = value
				Me.SendPropertyChanged("PopulationName")
				Me.OnPopulationNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OriginatingDataSourceId", DbType:="Int NOT NULL")>  _
	Public Property OriginatingDataSourceId() As Integer
		Get
			Return Me._OriginatingDataSourceId
		End Get
		Set
			If ((Me._OriginatingDataSourceId = value)  _
						= false) Then
				If Me._DW_Datasource.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOriginatingDataSourceIdChanging(value)
				Me.SendPropertyChanging
				Me._OriginatingDataSourceId = value
				Me.SendPropertyChanged("OriginatingDataSourceId")
				Me.OnOriginatingDataSourceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Population_DW_Group", Storage:="_DW_Groups", ThisKey:="PopulationId", OtherKey:="PopulationId")>  _
	Public Property DW_Groups() As EntitySet(Of DW_Group)
		Get
			Return Me._DW_Groups
		End Get
		Set
			Me._DW_Groups.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Datasource_DW_Population", Storage:="_DW_Datasource", ThisKey:="OriginatingDataSourceId", OtherKey:="DataSourceId", IsForeignKey:=true)>  _
	Public Property DW_Datasource() As DW_Datasource
		Get
			Return Me._DW_Datasource.Entity
		End Get
		Set
			Dim previousValue As DW_Datasource = Me._DW_Datasource.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DW_Datasource.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DW_Datasource.Entity = Nothing
					previousValue.DW_Populations.Remove(Me)
				End If
				Me._DW_Datasource.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DW_Populations.Add(Me)
					Me._OriginatingDataSourceId = value.DataSourceId
				Else
					Me._OriginatingDataSourceId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DW_Datasource")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DW_Groups(ByVal entity As DW_Group)
		Me.SendPropertyChanging
		entity.DW_Population = Me
	End Sub
	
	Private Sub detach_DW_Groups(ByVal entity As DW_Group)
		Me.SendPropertyChanging
		entity.DW_Population = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DW_Products")>  _
Partial Public Class DW_Product
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductId As Integer
	
	Private _ProductAbbreviation As String
	
	Private _ProductName As String
	
	Private _OriginatingDataSourceId As Integer
	
	Private _DW_Groups As EntitySet(Of DW_Group)
	
	Private _DW_Datasource As EntityRef(Of DW_Datasource)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIdChanged()
    End Sub
    Partial Private Sub OnProductAbbreviationChanging(value As String)
    End Sub
    Partial Private Sub OnProductAbbreviationChanged()
    End Sub
    Partial Private Sub OnProductNameChanging(value As String)
    End Sub
    Partial Private Sub OnProductNameChanged()
    End Sub
    Partial Private Sub OnOriginatingDataSourceIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnOriginatingDataSourceIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DW_Groups = New EntitySet(Of DW_Group)(AddressOf Me.attach_DW_Groups, AddressOf Me.detach_DW_Groups)
		Me._DW_Datasource = CType(Nothing, EntityRef(Of DW_Datasource))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ProductId() As Integer
		Get
			Return Me._ProductId
		End Get
		Set
			If ((Me._ProductId = value)  _
						= false) Then
				Me.OnProductIdChanging(value)
				Me.SendPropertyChanging
				Me._ProductId = value
				Me.SendPropertyChanged("ProductId")
				Me.OnProductIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductAbbreviation", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property ProductAbbreviation() As String
		Get
			Return Me._ProductAbbreviation
		End Get
		Set
			If (String.Equals(Me._ProductAbbreviation, value) = false) Then
				Me.OnProductAbbreviationChanging(value)
				Me.SendPropertyChanging
				Me._ProductAbbreviation = value
				Me.SendPropertyChanged("ProductAbbreviation")
				Me.OnProductAbbreviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property ProductName() As String
		Get
			Return Me._ProductName
		End Get
		Set
			If (String.Equals(Me._ProductName, value) = false) Then
				Me.OnProductNameChanging(value)
				Me.SendPropertyChanging
				Me._ProductName = value
				Me.SendPropertyChanged("ProductName")
				Me.OnProductNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OriginatingDataSourceId", DbType:="Int NOT NULL")>  _
	Public Property OriginatingDataSourceId() As Integer
		Get
			Return Me._OriginatingDataSourceId
		End Get
		Set
			If ((Me._OriginatingDataSourceId = value)  _
						= false) Then
				If Me._DW_Datasource.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOriginatingDataSourceIdChanging(value)
				Me.SendPropertyChanging
				Me._OriginatingDataSourceId = value
				Me.SendPropertyChanged("OriginatingDataSourceId")
				Me.OnOriginatingDataSourceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Product_DW_Group", Storage:="_DW_Groups", ThisKey:="ProductId", OtherKey:="ProductId")>  _
	Public Property DW_Groups() As EntitySet(Of DW_Group)
		Get
			Return Me._DW_Groups
		End Get
		Set
			Me._DW_Groups.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DW_Datasource_DW_Product", Storage:="_DW_Datasource", ThisKey:="OriginatingDataSourceId", OtherKey:="DataSourceId", IsForeignKey:=true)>  _
	Public Property DW_Datasource() As DW_Datasource
		Get
			Return Me._DW_Datasource.Entity
		End Get
		Set
			Dim previousValue As DW_Datasource = Me._DW_Datasource.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DW_Datasource.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DW_Datasource.Entity = Nothing
					previousValue.DW_Products.Remove(Me)
				End If
				Me._DW_Datasource.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DW_Products.Add(Me)
					Me._OriginatingDataSourceId = value.DataSourceId
				Else
					Me._OriginatingDataSourceId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DW_Datasource")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DW_Groups(ByVal entity As DW_Group)
		Me.SendPropertyChanging
		entity.DW_Product = Me
	End Sub
	
	Private Sub detach_DW_Groups(ByVal entity As DW_Group)
		Me.SendPropertyChanging
		entity.DW_Product = Nothing
	End Sub
End Class
