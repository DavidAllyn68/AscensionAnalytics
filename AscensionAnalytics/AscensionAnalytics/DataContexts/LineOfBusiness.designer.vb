'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class LineOfBusinessDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertLineOfBusiness(instance As LineOfBusiness)
    End Sub
  Partial Private Sub UpdateLineOfBusiness(instance As LineOfBusiness)
    End Sub
  Partial Private Sub DeleteLineOfBusiness(instance As LineOfBusiness)
    End Sub
  Partial Private Sub InsertLineOfBusinessCategory(instance As LineOfBusinessCategory)
    End Sub
  Partial Private Sub UpdateLineOfBusinessCategory(instance As LineOfBusinessCategory)
    End Sub
  Partial Private Sub DeleteLineOfBusinessCategory(instance As LineOfBusinessCategory)
    End Sub
  Partial Private Sub InsertSchoolgroupLineOfBusiness(instance As SchoolgroupLineOfBusiness)
    End Sub
  Partial Private Sub UpdateSchoolgroupLineOfBusiness(instance As SchoolgroupLineOfBusiness)
    End Sub
  Partial Private Sub DeleteSchoolgroupLineOfBusiness(instance As SchoolgroupLineOfBusiness)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property LineOfBusinesses() As System.Data.Linq.Table(Of LineOfBusiness)
		Get
			Return Me.GetTable(Of LineOfBusiness)
		End Get
	End Property
	
	Public ReadOnly Property LineOfBusinessCategories() As System.Data.Linq.Table(Of LineOfBusinessCategory)
		Get
			Return Me.GetTable(Of LineOfBusinessCategory)
		End Get
	End Property
	
	Public ReadOnly Property SchoolgroupLineOfBusinesses() As System.Data.Linq.Table(Of SchoolgroupLineOfBusiness)
		Get
			Return Me.GetTable(Of SchoolgroupLineOfBusiness)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LineOfBusiness")>  _
Partial Public Class LineOfBusiness
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LineOfBusinessId As Integer
	
	Private _LineOfBusiness As String
	
	Private _LineOfBusinessCategoryId As Integer
	
	Private _SchoolgroupLineOfBusinesses As EntitySet(Of SchoolgroupLineOfBusiness)
	
	Private _LineOfBusinessCategory As EntityRef(Of LineOfBusinessCategory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLineOfBusinessIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnLineOfBusinessIdChanged()
    End Sub
    Partial Private Sub OnLineOfBusinessChanging(value As String)
    End Sub
    Partial Private Sub OnLineOfBusinessChanged()
    End Sub
    Partial Private Sub OnLineOfBusinessCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnLineOfBusinessCategoryIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SchoolgroupLineOfBusinesses = New EntitySet(Of SchoolgroupLineOfBusiness)(AddressOf Me.attach_SchoolgroupLineOfBusinesses, AddressOf Me.detach_SchoolgroupLineOfBusinesses)
		Me._LineOfBusinessCategory = CType(Nothing, EntityRef(Of LineOfBusinessCategory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LineOfBusinessId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property LineOfBusinessId() As Integer
		Get
			Return Me._LineOfBusinessId
		End Get
		Set
			If ((Me._LineOfBusinessId = value)  _
						= false) Then
				Me.OnLineOfBusinessIdChanging(value)
				Me.SendPropertyChanging
				Me._LineOfBusinessId = value
				Me.SendPropertyChanged("LineOfBusinessId")
				Me.OnLineOfBusinessIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LineOfBusiness", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LineOfBusiness() As String
		Get
			Return Me._LineOfBusiness
		End Get
		Set
			If (String.Equals(Me._LineOfBusiness, value) = false) Then
				Me.OnLineOfBusinessChanging(value)
				Me.SendPropertyChanging
				Me._LineOfBusiness = value
				Me.SendPropertyChanged("LineOfBusiness")
				Me.OnLineOfBusinessChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LineOfBusinessCategoryId", DbType:="Int NOT NULL")>  _
	Public Property LineOfBusinessCategoryId() As Integer
		Get
			Return Me._LineOfBusinessCategoryId
		End Get
		Set
			If ((Me._LineOfBusinessCategoryId = value)  _
						= false) Then
				If Me._LineOfBusinessCategory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLineOfBusinessCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._LineOfBusinessCategoryId = value
				Me.SendPropertyChanged("LineOfBusinessCategoryId")
				Me.OnLineOfBusinessCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LineOfBusiness_SchoolgroupLineOfBusiness", Storage:="_SchoolgroupLineOfBusinesses", ThisKey:="LineOfBusinessId", OtherKey:="LineOfBusinessId")>  _
	Public Property SchoolgroupLineOfBusinesses() As EntitySet(Of SchoolgroupLineOfBusiness)
		Get
			Return Me._SchoolgroupLineOfBusinesses
		End Get
		Set
			Me._SchoolgroupLineOfBusinesses.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LineOfBusinessCategory_LineOfBusiness", Storage:="_LineOfBusinessCategory", ThisKey:="LineOfBusinessCategoryId", OtherKey:="LineOfBusinessCategoryId", IsForeignKey:=true)>  _
	Public Property LineOfBusinessCategory() As LineOfBusinessCategory
		Get
			Return Me._LineOfBusinessCategory.Entity
		End Get
		Set
			Dim previousValue As LineOfBusinessCategory = Me._LineOfBusinessCategory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LineOfBusinessCategory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LineOfBusinessCategory.Entity = Nothing
					previousValue.LineOfBusinesses.Remove(Me)
				End If
				Me._LineOfBusinessCategory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LineOfBusinesses.Add(Me)
					Me._LineOfBusinessCategoryId = value.LineOfBusinessCategoryId
				Else
					Me._LineOfBusinessCategoryId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("LineOfBusinessCategory")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SchoolgroupLineOfBusinesses(ByVal entity As SchoolgroupLineOfBusiness)
		Me.SendPropertyChanging
		entity.LineOfBusiness = Me
	End Sub
	
	Private Sub detach_SchoolgroupLineOfBusinesses(ByVal entity As SchoolgroupLineOfBusiness)
		Me.SendPropertyChanging
		entity.LineOfBusiness = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LineOfBusinessCategories")>  _
Partial Public Class LineOfBusinessCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LineOfBusinessCategoryId As Integer
	
	Private _LineOfBusinessCategory As String
	
	Private _LineOfBusinesses As EntitySet(Of LineOfBusiness)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLineOfBusinessCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnLineOfBusinessCategoryIdChanged()
    End Sub
    Partial Private Sub OnLineOfBusinessCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnLineOfBusinessCategoryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LineOfBusinesses = New EntitySet(Of LineOfBusiness)(AddressOf Me.attach_LineOfBusinesses, AddressOf Me.detach_LineOfBusinesses)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LineOfBusinessCategoryId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property LineOfBusinessCategoryId() As Integer
		Get
			Return Me._LineOfBusinessCategoryId
		End Get
		Set
			If ((Me._LineOfBusinessCategoryId = value)  _
						= false) Then
				Me.OnLineOfBusinessCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._LineOfBusinessCategoryId = value
				Me.SendPropertyChanged("LineOfBusinessCategoryId")
				Me.OnLineOfBusinessCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LineOfBusinessCategory", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property LineOfBusinessCategory() As String
		Get
			Return Me._LineOfBusinessCategory
		End Get
		Set
			If (String.Equals(Me._LineOfBusinessCategory, value) = false) Then
				Me.OnLineOfBusinessCategoryChanging(value)
				Me.SendPropertyChanging
				Me._LineOfBusinessCategory = value
				Me.SendPropertyChanged("LineOfBusinessCategory")
				Me.OnLineOfBusinessCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LineOfBusinessCategory_LineOfBusiness", Storage:="_LineOfBusinesses", ThisKey:="LineOfBusinessCategoryId", OtherKey:="LineOfBusinessCategoryId")>  _
	Public Property LineOfBusinesses() As EntitySet(Of LineOfBusiness)
		Get
			Return Me._LineOfBusinesses
		End Get
		Set
			Me._LineOfBusinesses.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LineOfBusinesses(ByVal entity As LineOfBusiness)
		Me.SendPropertyChanging
		entity.LineOfBusinessCategory = Me
	End Sub
	
	Private Sub detach_LineOfBusinesses(ByVal entity As LineOfBusiness)
		Me.SendPropertyChanging
		entity.LineOfBusinessCategory = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SchoolgroupLineOfBusiness")>  _
Partial Public Class SchoolgroupLineOfBusiness
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SchoolgroupLineOfBusinessId As Integer
	
	Private _SchoolgroupCode As String
	
	Private _LineOfBusinessId As Integer
	
	Private _LineOfBusiness As EntityRef(Of LineOfBusiness)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchoolgroupLineOfBusinessIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSchoolgroupLineOfBusinessIdChanged()
    End Sub
    Partial Private Sub OnSchoolgroupCodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchoolgroupCodeChanged()
    End Sub
    Partial Private Sub OnLineOfBusinessIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnLineOfBusinessIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LineOfBusiness = CType(Nothing, EntityRef(Of LineOfBusiness))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SchoolgroupLineOfBusinessId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SchoolgroupLineOfBusinessId() As Integer
		Get
			Return Me._SchoolgroupLineOfBusinessId
		End Get
		Set
			If ((Me._SchoolgroupLineOfBusinessId = value)  _
						= false) Then
				Me.OnSchoolgroupLineOfBusinessIdChanging(value)
				Me.SendPropertyChanging
				Me._SchoolgroupLineOfBusinessId = value
				Me.SendPropertyChanged("SchoolgroupLineOfBusinessId")
				Me.OnSchoolgroupLineOfBusinessIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SchoolgroupCode", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SchoolgroupCode() As String
		Get
			Return Me._SchoolgroupCode
		End Get
		Set
			If (String.Equals(Me._SchoolgroupCode, value) = false) Then
				Me.OnSchoolgroupCodeChanging(value)
				Me.SendPropertyChanging
				Me._SchoolgroupCode = value
				Me.SendPropertyChanged("SchoolgroupCode")
				Me.OnSchoolgroupCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LineOfBusinessId", DbType:="Int NOT NULL")>  _
	Public Property LineOfBusinessId() As Integer
		Get
			Return Me._LineOfBusinessId
		End Get
		Set
			If ((Me._LineOfBusinessId = value)  _
						= false) Then
				If Me._LineOfBusiness.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLineOfBusinessIdChanging(value)
				Me.SendPropertyChanging
				Me._LineOfBusinessId = value
				Me.SendPropertyChanged("LineOfBusinessId")
				Me.OnLineOfBusinessIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LineOfBusiness_SchoolgroupLineOfBusiness", Storage:="_LineOfBusiness", ThisKey:="LineOfBusinessId", OtherKey:="LineOfBusinessId", IsForeignKey:=true)>  _
	Public Property LineOfBusiness() As LineOfBusiness
		Get
			Return Me._LineOfBusiness.Entity
		End Get
		Set
			Dim previousValue As LineOfBusiness = Me._LineOfBusiness.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LineOfBusiness.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LineOfBusiness.Entity = Nothing
					previousValue.SchoolgroupLineOfBusinesses.Remove(Me)
				End If
				Me._LineOfBusiness.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SchoolgroupLineOfBusinesses.Add(Me)
					Me._LineOfBusinessId = value.LineOfBusinessId
				Else
					Me._LineOfBusinessId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("LineOfBusiness")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
