'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5456
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class AlternateDescriptorsDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertcc_AlternateDescriptor(instance As cc_AlternateDescriptor)
    End Sub
  Partial Private Sub Updatecc_AlternateDescriptor(instance As cc_AlternateDescriptor)
    End Sub
  Partial Private Sub Deletecc_AlternateDescriptor(instance As cc_AlternateDescriptor)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property cc_AlternateDescriptors() As System.Data.Linq.Table(Of cc_AlternateDescriptor)
		Get
			Return Me.GetTable(Of cc_AlternateDescriptor)
		End Get
	End Property
End Class

<Table(Name:="dbo.cc_AlternateDescriptors")>  _
Partial Public Class cc_AlternateDescriptor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AlternateDescriptorsId As Integer
	
	Private _TableName As String
	
	Private _FieldName As String
	
	Private _OriginalDescriptor As String
	
	Private _AlternateDescriptor As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAlternateDescriptorsIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAlternateDescriptorsIdChanged()
    End Sub
    Partial Private Sub OnTableNameChanging(value As String)
    End Sub
    Partial Private Sub OnTableNameChanged()
    End Sub
    Partial Private Sub OnFieldNameChanging(value As String)
    End Sub
    Partial Private Sub OnFieldNameChanged()
    End Sub
    Partial Private Sub OnOriginalDescriptorChanging(value As String)
    End Sub
    Partial Private Sub OnOriginalDescriptorChanged()
    End Sub
    Partial Private Sub OnAlternateDescriptorChanging(value As String)
    End Sub
    Partial Private Sub OnAlternateDescriptorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_AlternateDescriptorsId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AlternateDescriptorsId() As Integer
		Get
			Return Me._AlternateDescriptorsId
		End Get
		Set
			If ((Me._AlternateDescriptorsId = value)  _
						= false) Then
				Me.OnAlternateDescriptorsIdChanging(value)
				Me.SendPropertyChanging
				Me._AlternateDescriptorsId = value
				Me.SendPropertyChanged("AlternateDescriptorsId")
				Me.OnAlternateDescriptorsIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TableName", DbType:="VarChar(50)")>  _
	Public Property TableName() As String
		Get
			Return Me._TableName
		End Get
		Set
			If (String.Equals(Me._TableName, value) = false) Then
				Me.OnTableNameChanging(value)
				Me.SendPropertyChanging
				Me._TableName = value
				Me.SendPropertyChanged("TableName")
				Me.OnTableNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FieldName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FieldName() As String
		Get
			Return Me._FieldName
		End Get
		Set
			If (String.Equals(Me._FieldName, value) = false) Then
				Me.OnFieldNameChanging(value)
				Me.SendPropertyChanging
				Me._FieldName = value
				Me.SendPropertyChanged("FieldName")
				Me.OnFieldNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OriginalDescriptor", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property OriginalDescriptor() As String
		Get
			Return Me._OriginalDescriptor
		End Get
		Set
			If (String.Equals(Me._OriginalDescriptor, value) = false) Then
				Me.OnOriginalDescriptorChanging(value)
				Me.SendPropertyChanging
				Me._OriginalDescriptor = value
				Me.SendPropertyChanged("OriginalDescriptor")
				Me.OnOriginalDescriptorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AlternateDescriptor", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property AlternateDescriptor() As String
		Get
			Return Me._AlternateDescriptor
		End Get
		Set
			If (String.Equals(Me._AlternateDescriptor, value) = false) Then
				Me.OnAlternateDescriptorChanging(value)
				Me.SendPropertyChanging
				Me._AlternateDescriptor = value
				Me.SendPropertyChanged("AlternateDescriptor")
				Me.OnAlternateDescriptorChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
