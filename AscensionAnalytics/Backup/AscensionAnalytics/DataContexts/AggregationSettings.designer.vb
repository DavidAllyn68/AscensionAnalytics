'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5485
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class AggregationSettingsDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAggregationSetting(instance As AggregationSetting)
    End Sub
  Partial Private Sub UpdateAggregationSetting(instance As AggregationSetting)
    End Sub
  Partial Private Sub DeleteAggregationSetting(instance As AggregationSetting)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property AggregationSettings() As System.Data.Linq.Table(Of AggregationSetting)
		Get
			Return Me.GetTable(Of AggregationSetting)
		End Get
	End Property
End Class

<Table(Name:="dbo.AggregationSettings")>  _
Partial Public Class AggregationSetting
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AggregationSettingId As Integer
	
	Private _SettingsEffectiveDate As Date
	
	Private _DataAnalystPersonId As Integer
	
	Private _CurrentPolicyYearId As Integer
	
	Private _PreviousPolicyYearId As Integer
	
	Private _Previous2PolicyYearId As Integer
	
	Private _Previous3PolicyYearId As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAggregationSettingIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAggregationSettingIdChanged()
    End Sub
    Partial Private Sub OnSettingsEffectiveDateChanging(value As Date)
    End Sub
    Partial Private Sub OnSettingsEffectiveDateChanged()
    End Sub
    Partial Private Sub OnDataAnalystPersonIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataAnalystPersonIdChanged()
    End Sub
    Partial Private Sub OnCurrentPolicyYearIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCurrentPolicyYearIdChanged()
    End Sub
    Partial Private Sub OnPreviousPolicyYearIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPreviousPolicyYearIdChanged()
    End Sub
    Partial Private Sub OnPrevious2PolicyYearIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPrevious2PolicyYearIdChanged()
    End Sub
    Partial Private Sub OnPrevious3PolicyYearIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPrevious3PolicyYearIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_AggregationSettingId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AggregationSettingId() As Integer
		Get
			Return Me._AggregationSettingId
		End Get
		Set
			If ((Me._AggregationSettingId = value)  _
						= false) Then
				Me.OnAggregationSettingIdChanging(value)
				Me.SendPropertyChanging
				Me._AggregationSettingId = value
				Me.SendPropertyChanged("AggregationSettingId")
				Me.OnAggregationSettingIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SettingsEffectiveDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property SettingsEffectiveDate() As Date
		Get
			Return Me._SettingsEffectiveDate
		End Get
		Set
			If ((Me._SettingsEffectiveDate = value)  _
						= false) Then
				Me.OnSettingsEffectiveDateChanging(value)
				Me.SendPropertyChanging
				Me._SettingsEffectiveDate = value
				Me.SendPropertyChanged("SettingsEffectiveDate")
				Me.OnSettingsEffectiveDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DataAnalystPersonId", DbType:="Int NOT NULL")>  _
	Public Property DataAnalystPersonId() As Integer
		Get
			Return Me._DataAnalystPersonId
		End Get
		Set
			If ((Me._DataAnalystPersonId = value)  _
						= false) Then
				Me.OnDataAnalystPersonIdChanging(value)
				Me.SendPropertyChanging
				Me._DataAnalystPersonId = value
				Me.SendPropertyChanged("DataAnalystPersonId")
				Me.OnDataAnalystPersonIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CurrentPolicyYearId", DbType:="Int NOT NULL")>  _
	Public Property CurrentPolicyYearId() As Integer
		Get
			Return Me._CurrentPolicyYearId
		End Get
		Set
			If ((Me._CurrentPolicyYearId = value)  _
						= false) Then
				Me.OnCurrentPolicyYearIdChanging(value)
				Me.SendPropertyChanging
				Me._CurrentPolicyYearId = value
				Me.SendPropertyChanged("CurrentPolicyYearId")
				Me.OnCurrentPolicyYearIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PreviousPolicyYearId", DbType:="Int NOT NULL")>  _
	Public Property PreviousPolicyYearId() As Integer
		Get
			Return Me._PreviousPolicyYearId
		End Get
		Set
			If ((Me._PreviousPolicyYearId = value)  _
						= false) Then
				Me.OnPreviousPolicyYearIdChanging(value)
				Me.SendPropertyChanging
				Me._PreviousPolicyYearId = value
				Me.SendPropertyChanged("PreviousPolicyYearId")
				Me.OnPreviousPolicyYearIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Previous2PolicyYearId", DbType:="Int NOT NULL")>  _
	Public Property Previous2PolicyYearId() As Integer
		Get
			Return Me._Previous2PolicyYearId
		End Get
		Set
			If ((Me._Previous2PolicyYearId = value)  _
						= false) Then
				Me.OnPrevious2PolicyYearIdChanging(value)
				Me.SendPropertyChanging
				Me._Previous2PolicyYearId = value
				Me.SendPropertyChanged("Previous2PolicyYearId")
				Me.OnPrevious2PolicyYearIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Previous3PolicyYearId", DbType:="Int NOT NULL")>  _
	Public Property Previous3PolicyYearId() As Integer
		Get
			Return Me._Previous3PolicyYearId
		End Get
		Set
			If ((Me._Previous3PolicyYearId = value)  _
						= false) Then
				Me.OnPrevious3PolicyYearIdChanging(value)
				Me.SendPropertyChanging
				Me._Previous3PolicyYearId = value
				Me.SendPropertyChanged("Previous3PolicyYearId")
				Me.OnPrevious3PolicyYearIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
