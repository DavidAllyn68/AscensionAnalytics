'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5466
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class SampleReportingDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertSampleReporting_SchoolgroupsToProcess(instance As SampleReporting_SchoolgroupsToProcess)
    End Sub
  Partial Private Sub UpdateSampleReporting_SchoolgroupsToProcess(instance As SampleReporting_SchoolgroupsToProcess)
    End Sub
  Partial Private Sub DeleteSampleReporting_SchoolgroupsToProcess(instance As SampleReporting_SchoolgroupsToProcess)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property SampleReporting_SchoolgroupsToProcesses() As System.Data.Linq.Table(Of SampleReporting_SchoolgroupsToProcess)
		Get
			Return Me.GetTable(Of SampleReporting_SchoolgroupsToProcess)
		End Get
	End Property
	
	<FunctionAttribute(Name:="dbo.SampleReporting_LoadSampleReporting")>  _
	Public Function SampleReporting_LoadSampleReporting() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Table(Name:="dbo.SampleReporting_SchoolgroupsToProcess")>  _
Partial Public Class SampleReporting_SchoolgroupsToProcess
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ActualSchoolgroupCode As String
	
	Private _AliasSchoolgroupCode As String
	
	Private _AliasSchoolgroupName As String
	
	Private _AliasSchoolName As String
	
	Private _AliasUnderwriterCode As String
	
	Private _AliasUnderwriterName As String
	
	Private _YearsToOffset As Byte
	
	Private _MinPolicyYearId As Integer
	
	Private _MaxPolicyYearId As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnActualSchoolgroupCodeChanging(value As String)
    End Sub
    Partial Private Sub OnActualSchoolgroupCodeChanged()
    End Sub
    Partial Private Sub OnAliasSchoolgroupCodeChanging(value As String)
    End Sub
    Partial Private Sub OnAliasSchoolgroupCodeChanged()
    End Sub
    Partial Private Sub OnAliasSchoolgroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnAliasSchoolgroupNameChanged()
    End Sub
    Partial Private Sub OnAliasSchoolNameChanging(value As String)
    End Sub
    Partial Private Sub OnAliasSchoolNameChanged()
    End Sub
    Partial Private Sub OnAliasUnderwriterCodeChanging(value As String)
    End Sub
    Partial Private Sub OnAliasUnderwriterCodeChanged()
    End Sub
    Partial Private Sub OnAliasUnderwriterNameChanging(value As String)
    End Sub
    Partial Private Sub OnAliasUnderwriterNameChanged()
    End Sub
    Partial Private Sub OnYearsToOffsetChanging(value As Byte)
    End Sub
    Partial Private Sub OnYearsToOffsetChanged()
    End Sub
    Partial Private Sub OnMinPolicyYearIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnMinPolicyYearIdChanged()
    End Sub
    Partial Private Sub OnMaxPolicyYearIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnMaxPolicyYearIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ActualSchoolgroupCode", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ActualSchoolgroupCode() As String
		Get
			Return Me._ActualSchoolgroupCode
		End Get
		Set
			If (String.Equals(Me._ActualSchoolgroupCode, value) = false) Then
				Me.OnActualSchoolgroupCodeChanging(value)
				Me.SendPropertyChanging
				Me._ActualSchoolgroupCode = value
				Me.SendPropertyChanged("ActualSchoolgroupCode")
				Me.OnActualSchoolgroupCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AliasSchoolgroupCode", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property AliasSchoolgroupCode() As String
		Get
			Return Me._AliasSchoolgroupCode
		End Get
		Set
			If (String.Equals(Me._AliasSchoolgroupCode, value) = false) Then
				Me.OnAliasSchoolgroupCodeChanging(value)
				Me.SendPropertyChanging
				Me._AliasSchoolgroupCode = value
				Me.SendPropertyChanged("AliasSchoolgroupCode")
				Me.OnAliasSchoolgroupCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AliasSchoolgroupName", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property AliasSchoolgroupName() As String
		Get
			Return Me._AliasSchoolgroupName
		End Get
		Set
			If (String.Equals(Me._AliasSchoolgroupName, value) = false) Then
				Me.OnAliasSchoolgroupNameChanging(value)
				Me.SendPropertyChanging
				Me._AliasSchoolgroupName = value
				Me.SendPropertyChanged("AliasSchoolgroupName")
				Me.OnAliasSchoolgroupNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AliasSchoolName", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property AliasSchoolName() As String
		Get
			Return Me._AliasSchoolName
		End Get
		Set
			If (String.Equals(Me._AliasSchoolName, value) = false) Then
				Me.OnAliasSchoolNameChanging(value)
				Me.SendPropertyChanging
				Me._AliasSchoolName = value
				Me.SendPropertyChanged("AliasSchoolName")
				Me.OnAliasSchoolNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AliasUnderwriterCode", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property AliasUnderwriterCode() As String
		Get
			Return Me._AliasUnderwriterCode
		End Get
		Set
			If (String.Equals(Me._AliasUnderwriterCode, value) = false) Then
				Me.OnAliasUnderwriterCodeChanging(value)
				Me.SendPropertyChanging
				Me._AliasUnderwriterCode = value
				Me.SendPropertyChanged("AliasUnderwriterCode")
				Me.OnAliasUnderwriterCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AliasUnderwriterName", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property AliasUnderwriterName() As String
		Get
			Return Me._AliasUnderwriterName
		End Get
		Set
			If (String.Equals(Me._AliasUnderwriterName, value) = false) Then
				Me.OnAliasUnderwriterNameChanging(value)
				Me.SendPropertyChanging
				Me._AliasUnderwriterName = value
				Me.SendPropertyChanged("AliasUnderwriterName")
				Me.OnAliasUnderwriterNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_YearsToOffset", DbType:="TinyInt NOT NULL")>  _
	Public Property YearsToOffset() As Byte
		Get
			Return Me._YearsToOffset
		End Get
		Set
			If ((Me._YearsToOffset = value)  _
						= false) Then
				Me.OnYearsToOffsetChanging(value)
				Me.SendPropertyChanging
				Me._YearsToOffset = value
				Me.SendPropertyChanged("YearsToOffset")
				Me.OnYearsToOffsetChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MinPolicyYearId", DbType:="Int NOT NULL")>  _
	Public Property MinPolicyYearId() As Integer
		Get
			Return Me._MinPolicyYearId
		End Get
		Set
			If ((Me._MinPolicyYearId = value)  _
						= false) Then
				Me.OnMinPolicyYearIdChanging(value)
				Me.SendPropertyChanging
				Me._MinPolicyYearId = value
				Me.SendPropertyChanged("MinPolicyYearId")
				Me.OnMinPolicyYearIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MaxPolicyYearId", DbType:="Int NOT NULL")>  _
	Public Property MaxPolicyYearId() As Integer
		Get
			Return Me._MaxPolicyYearId
		End Get
		Set
			If ((Me._MaxPolicyYearId = value)  _
						= false) Then
				Me.OnMaxPolicyYearIdChanging(value)
				Me.SendPropertyChanging
				Me._MaxPolicyYearId = value
				Me.SendPropertyChanged("MaxPolicyYearId")
				Me.OnMaxPolicyYearIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
