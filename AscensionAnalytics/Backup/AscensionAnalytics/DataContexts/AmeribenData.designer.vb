'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5485
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class AmeribenDataDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAmeriben_GroupMap(instance As Ameriben_GroupMap)
    End Sub
  Partial Private Sub UpdateAmeriben_GroupMap(instance As Ameriben_GroupMap)
    End Sub
  Partial Private Sub DeleteAmeriben_GroupMap(instance As Ameriben_GroupMap)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Ameriben_GroupMaps() As System.Data.Linq.Table(Of Ameriben_GroupMap)
		Get
			Return Me.GetTable(Of Ameriben_GroupMap)
		End Get
	End Property
	
	<FunctionAttribute(Name:="dbo.AmeribenFileImport_ProcessDataTranslators")>  _
	Public Function AmeribenFileImport_ProcessDataTranslators() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<FunctionAttribute(Name:="dbo.AmeribenFileImport_LoadDenormForNightlyCompile")>  _
	Public Function AmeribenFileImport_LoadDenormForNightlyCompile() As ISingleResult(Of AmeribenFileImport_LoadDenormForNightlyCompileResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of AmeribenFileImport_LoadDenormForNightlyCompileResult))
	End Function
	
	<FunctionAttribute(Name:="dbo.AmeribenFileImport_FinishAndCleanUp")>  _
	Public Function AmeribenFileImport_FinishAndCleanUp() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Table(Name:="dbo.Ameriben_GroupMap")>  _
Partial Public Class Ameriben_GroupMap
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AmeribenGroupMapId As Integer
	
	Private _Ameriben_GroupNumber As String
	
	Private _Ameriben_DivisionNumber As String
	
	Private _Ren_SchoolGroupCode As String
	
	Private _Ren_SchoolTag As String
	
	Private _Ren_CauseDescription As String
	
	Private _IsAthletic As Byte
	
	Private _DependentDivisionNumber As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAmeribenGroupMapIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAmeribenGroupMapIdChanged()
    End Sub
    Partial Private Sub OnAmeriben_GroupNumberChanging(value As String)
    End Sub
    Partial Private Sub OnAmeriben_GroupNumberChanged()
    End Sub
    Partial Private Sub OnAmeriben_DivisionNumberChanging(value As String)
    End Sub
    Partial Private Sub OnAmeriben_DivisionNumberChanged()
    End Sub
    Partial Private Sub OnRen_SchoolGroupCodeChanging(value As String)
    End Sub
    Partial Private Sub OnRen_SchoolGroupCodeChanged()
    End Sub
    Partial Private Sub OnRen_SchoolTagChanging(value As String)
    End Sub
    Partial Private Sub OnRen_SchoolTagChanged()
    End Sub
    Partial Private Sub OnRen_CauseDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnRen_CauseDescriptionChanged()
    End Sub
    Partial Private Sub OnIsAthleticChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsAthleticChanged()
    End Sub
    Partial Private Sub OnDependentDivisionNumberChanging(value As String)
    End Sub
    Partial Private Sub OnDependentDivisionNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_AmeribenGroupMapId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AmeribenGroupMapId() As Integer
		Get
			Return Me._AmeribenGroupMapId
		End Get
		Set
			If ((Me._AmeribenGroupMapId = value)  _
						= false) Then
				Me.OnAmeribenGroupMapIdChanging(value)
				Me.SendPropertyChanging
				Me._AmeribenGroupMapId = value
				Me.SendPropertyChanged("AmeribenGroupMapId")
				Me.OnAmeribenGroupMapIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Ameriben_GroupNumber", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Ameriben_GroupNumber() As String
		Get
			Return Me._Ameriben_GroupNumber
		End Get
		Set
			If (String.Equals(Me._Ameriben_GroupNumber, value) = false) Then
				Me.OnAmeriben_GroupNumberChanging(value)
				Me.SendPropertyChanging
				Me._Ameriben_GroupNumber = value
				Me.SendPropertyChanged("Ameriben_GroupNumber")
				Me.OnAmeriben_GroupNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Ameriben_DivisionNumber", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Ameriben_DivisionNumber() As String
		Get
			Return Me._Ameriben_DivisionNumber
		End Get
		Set
			If (String.Equals(Me._Ameriben_DivisionNumber, value) = false) Then
				Me.OnAmeriben_DivisionNumberChanging(value)
				Me.SendPropertyChanging
				Me._Ameriben_DivisionNumber = value
				Me.SendPropertyChanged("Ameriben_DivisionNumber")
				Me.OnAmeriben_DivisionNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Ren_SchoolGroupCode", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Ren_SchoolGroupCode() As String
		Get
			Return Me._Ren_SchoolGroupCode
		End Get
		Set
			If (String.Equals(Me._Ren_SchoolGroupCode, value) = false) Then
				Me.OnRen_SchoolGroupCodeChanging(value)
				Me.SendPropertyChanging
				Me._Ren_SchoolGroupCode = value
				Me.SendPropertyChanged("Ren_SchoolGroupCode")
				Me.OnRen_SchoolGroupCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Ren_SchoolTag", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Ren_SchoolTag() As String
		Get
			Return Me._Ren_SchoolTag
		End Get
		Set
			If (String.Equals(Me._Ren_SchoolTag, value) = false) Then
				Me.OnRen_SchoolTagChanging(value)
				Me.SendPropertyChanging
				Me._Ren_SchoolTag = value
				Me.SendPropertyChanged("Ren_SchoolTag")
				Me.OnRen_SchoolTagChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Ren_CauseDescription", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Ren_CauseDescription() As String
		Get
			Return Me._Ren_CauseDescription
		End Get
		Set
			If (String.Equals(Me._Ren_CauseDescription, value) = false) Then
				Me.OnRen_CauseDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Ren_CauseDescription = value
				Me.SendPropertyChanged("Ren_CauseDescription")
				Me.OnRen_CauseDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsAthletic", DbType:="TinyInt NOT NULL")>  _
	Public Property IsAthletic() As Byte
		Get
			Return Me._IsAthletic
		End Get
		Set
			If ((Me._IsAthletic = value)  _
						= false) Then
				Me.OnIsAthleticChanging(value)
				Me.SendPropertyChanging
				Me._IsAthletic = value
				Me.SendPropertyChanged("IsAthletic")
				Me.OnIsAthleticChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DependentDivisionNumber", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property DependentDivisionNumber() As String
		Get
			Return Me._DependentDivisionNumber
		End Get
		Set
			If (String.Equals(Me._DependentDivisionNumber, value) = false) Then
				Me.OnDependentDivisionNumberChanging(value)
				Me.SendPropertyChanging
				Me._DependentDivisionNumber = value
				Me.SendPropertyChanged("DependentDivisionNumber")
				Me.OnDependentDivisionNumberChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class AmeribenFileImport_LoadDenormForNightlyCompileResult
	
	Private _MessageQueueId As Integer
	
	Private _MessageSubject As String
	
	Private _MessageBody As String
	
	Private _MessageSenderAddress As String
	
	Private _MessageRecipientAddress As String
	
	Private _MessageCreatedDate As Date
	
	Private _MessageScheduleDate As Date
	
	Private _MessageSentDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_MessageQueueId", DbType:="Int NOT NULL")>  _
	Public Property MessageQueueId() As Integer
		Get
			Return Me._MessageQueueId
		End Get
		Set
			If ((Me._MessageQueueId = value)  _
						= false) Then
				Me._MessageQueueId = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageSubject", DbType:="VarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property MessageSubject() As String
		Get
			Return Me._MessageSubject
		End Get
		Set
			If (String.Equals(Me._MessageSubject, value) = false) Then
				Me._MessageSubject = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageBody", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MessageBody() As String
		Get
			Return Me._MessageBody
		End Get
		Set
			If (String.Equals(Me._MessageBody, value) = false) Then
				Me._MessageBody = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageSenderAddress", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property MessageSenderAddress() As String
		Get
			Return Me._MessageSenderAddress
		End Get
		Set
			If (String.Equals(Me._MessageSenderAddress, value) = false) Then
				Me._MessageSenderAddress = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageRecipientAddress", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property MessageRecipientAddress() As String
		Get
			Return Me._MessageRecipientAddress
		End Get
		Set
			If (String.Equals(Me._MessageRecipientAddress, value) = false) Then
				Me._MessageRecipientAddress = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageCreatedDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property MessageCreatedDate() As Date
		Get
			Return Me._MessageCreatedDate
		End Get
		Set
			If ((Me._MessageCreatedDate = value)  _
						= false) Then
				Me._MessageCreatedDate = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageScheduleDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property MessageScheduleDate() As Date
		Get
			Return Me._MessageScheduleDate
		End Get
		Set
			If ((Me._MessageScheduleDate = value)  _
						= false) Then
				Me._MessageScheduleDate = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageSentDate", DbType:="SmallDateTime")>  _
	Public Property MessageSentDate() As System.Nullable(Of Date)
		Get
			Return Me._MessageSentDate
		End Get
		Set
			If (Me._MessageSentDate.Equals(value) = false) Then
				Me._MessageSentDate = value
			End If
		End Set
	End Property
End Class
