'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5485
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class ProviderGroupingDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertProviderGroupProvider(instance As ProviderGroupProvider)
    End Sub
  Partial Private Sub UpdateProviderGroupProvider(instance As ProviderGroupProvider)
    End Sub
  Partial Private Sub DeleteProviderGroupProvider(instance As ProviderGroupProvider)
    End Sub
  Partial Private Sub InsertProviderGroup(instance As ProviderGroup)
    End Sub
  Partial Private Sub UpdateProviderGroup(instance As ProviderGroup)
    End Sub
  Partial Private Sub DeleteProviderGroup(instance As ProviderGroup)
    End Sub
  Partial Private Sub InsertProviderGroupType(instance As ProviderGroupType)
    End Sub
  Partial Private Sub UpdateProviderGroupType(instance As ProviderGroupType)
    End Sub
  Partial Private Sub DeleteProviderGroupType(instance As ProviderGroupType)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property ProviderGroupProviders() As System.Data.Linq.Table(Of ProviderGroupProvider)
		Get
			Return Me.GetTable(Of ProviderGroupProvider)
		End Get
	End Property
	
	Public ReadOnly Property ProviderGroups() As System.Data.Linq.Table(Of ProviderGroup)
		Get
			Return Me.GetTable(Of ProviderGroup)
		End Get
	End Property
	
	Public ReadOnly Property ProviderGroupTypes() As System.Data.Linq.Table(Of ProviderGroupType)
		Get
			Return Me.GetTable(Of ProviderGroupType)
		End Get
	End Property
	
	<FunctionAttribute(Name:="dbo.ProviderGroup_LoadSHSProviderListingFromClaims")>  _
	Public Function ProviderGroup_LoadSHSProviderListingFromClaims() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Table(Name:="dbo.ProviderGroupProviders")>  _
Partial Public Class ProviderGroupProvider
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProviderGroupingProviderId As Integer
	
	Private _ProviderGroupId As Integer
	
	Private _ProviderNumberBegin As String
	
	Private _ProviderNumberEnd As String
	
	Private _ProviderGroup As EntityRef(Of ProviderGroup)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProviderGroupingProviderIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProviderGroupingProviderIdChanged()
    End Sub
    Partial Private Sub OnProviderGroupIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProviderGroupIdChanged()
    End Sub
    Partial Private Sub OnProviderNumberBeginChanging(value As String)
    End Sub
    Partial Private Sub OnProviderNumberBeginChanged()
    End Sub
    Partial Private Sub OnProviderNumberEndChanging(value As String)
    End Sub
    Partial Private Sub OnProviderNumberEndChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProviderGroup = CType(Nothing, EntityRef(Of ProviderGroup))
		OnCreated
	End Sub
	
	<Column(Storage:="_ProviderGroupingProviderId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ProviderGroupingProviderId() As Integer
		Get
			Return Me._ProviderGroupingProviderId
		End Get
		Set
			If ((Me._ProviderGroupingProviderId = value)  _
						= false) Then
				Me.OnProviderGroupingProviderIdChanging(value)
				Me.SendPropertyChanging
				Me._ProviderGroupingProviderId = value
				Me.SendPropertyChanged("ProviderGroupingProviderId")
				Me.OnProviderGroupingProviderIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProviderGroupId", DbType:="Int NOT NULL")>  _
	Public Property ProviderGroupId() As Integer
		Get
			Return Me._ProviderGroupId
		End Get
		Set
			If ((Me._ProviderGroupId = value)  _
						= false) Then
				If Me._ProviderGroup.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnProviderGroupIdChanging(value)
				Me.SendPropertyChanging
				Me._ProviderGroupId = value
				Me.SendPropertyChanged("ProviderGroupId")
				Me.OnProviderGroupIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProviderNumberBegin", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ProviderNumberBegin() As String
		Get
			Return Me._ProviderNumberBegin
		End Get
		Set
			If (String.Equals(Me._ProviderNumberBegin, value) = false) Then
				Me.OnProviderNumberBeginChanging(value)
				Me.SendPropertyChanging
				Me._ProviderNumberBegin = value
				Me.SendPropertyChanged("ProviderNumberBegin")
				Me.OnProviderNumberBeginChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProviderNumberEnd", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ProviderNumberEnd() As String
		Get
			Return Me._ProviderNumberEnd
		End Get
		Set
			If (String.Equals(Me._ProviderNumberEnd, value) = false) Then
				Me.OnProviderNumberEndChanging(value)
				Me.SendPropertyChanging
				Me._ProviderNumberEnd = value
				Me.SendPropertyChanged("ProviderNumberEnd")
				Me.OnProviderNumberEndChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ProviderGroup_ProviderGroupProvider", Storage:="_ProviderGroup", ThisKey:="ProviderGroupId", OtherKey:="ProviderGroupId", IsForeignKey:=true)>  _
	Public Property ProviderGroup() As ProviderGroup
		Get
			Return Me._ProviderGroup.Entity
		End Get
		Set
			Dim previousValue As ProviderGroup = Me._ProviderGroup.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProviderGroup.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProviderGroup.Entity = Nothing
					previousValue.ProviderGroupProviders.Remove(Me)
				End If
				Me._ProviderGroup.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProviderGroupProviders.Add(Me)
					Me._ProviderGroupId = value.ProviderGroupId
				Else
					Me._ProviderGroupId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ProviderGroup")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ProviderGroups")>  _
Partial Public Class ProviderGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProviderGroupId As Integer
	
	Private _ProviderGroupCode As String
	
	Private _ProviderGroupName As String
	
	Private _ProviderGroupDescription As String
	
	Private _ProviderGroupSchoolgroupCode As String
	
	Private _ProviderGroupTypeId As Integer
	
	Private _ProviderGroupProviders As EntitySet(Of ProviderGroupProvider)
	
	Private _ProviderGroupType As EntityRef(Of ProviderGroupType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProviderGroupIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProviderGroupIdChanged()
    End Sub
    Partial Private Sub OnProviderGroupCodeChanging(value As String)
    End Sub
    Partial Private Sub OnProviderGroupCodeChanged()
    End Sub
    Partial Private Sub OnProviderGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnProviderGroupNameChanged()
    End Sub
    Partial Private Sub OnProviderGroupDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnProviderGroupDescriptionChanged()
    End Sub
    Partial Private Sub OnProviderGroupSchoolgroupCodeChanging(value As String)
    End Sub
    Partial Private Sub OnProviderGroupSchoolgroupCodeChanged()
    End Sub
    Partial Private Sub OnProviderGroupTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProviderGroupTypeIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProviderGroupProviders = New EntitySet(Of ProviderGroupProvider)(AddressOf Me.attach_ProviderGroupProviders, AddressOf Me.detach_ProviderGroupProviders)
		Me._ProviderGroupType = CType(Nothing, EntityRef(Of ProviderGroupType))
		OnCreated
	End Sub
	
	<Column(Storage:="_ProviderGroupId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ProviderGroupId() As Integer
		Get
			Return Me._ProviderGroupId
		End Get
		Set
			If ((Me._ProviderGroupId = value)  _
						= false) Then
				Me.OnProviderGroupIdChanging(value)
				Me.SendPropertyChanging
				Me._ProviderGroupId = value
				Me.SendPropertyChanged("ProviderGroupId")
				Me.OnProviderGroupIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProviderGroupCode", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property ProviderGroupCode() As String
		Get
			Return Me._ProviderGroupCode
		End Get
		Set
			If (String.Equals(Me._ProviderGroupCode, value) = false) Then
				Me.OnProviderGroupCodeChanging(value)
				Me.SendPropertyChanging
				Me._ProviderGroupCode = value
				Me.SendPropertyChanged("ProviderGroupCode")
				Me.OnProviderGroupCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProviderGroupName", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property ProviderGroupName() As String
		Get
			Return Me._ProviderGroupName
		End Get
		Set
			If (String.Equals(Me._ProviderGroupName, value) = false) Then
				Me.OnProviderGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._ProviderGroupName = value
				Me.SendPropertyChanged("ProviderGroupName")
				Me.OnProviderGroupNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProviderGroupDescription", DbType:="VarChar(2000) NOT NULL", CanBeNull:=false)>  _
	Public Property ProviderGroupDescription() As String
		Get
			Return Me._ProviderGroupDescription
		End Get
		Set
			If (String.Equals(Me._ProviderGroupDescription, value) = false) Then
				Me.OnProviderGroupDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ProviderGroupDescription = value
				Me.SendPropertyChanged("ProviderGroupDescription")
				Me.OnProviderGroupDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProviderGroupSchoolgroupCode", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property ProviderGroupSchoolgroupCode() As String
		Get
			Return Me._ProviderGroupSchoolgroupCode
		End Get
		Set
			If (String.Equals(Me._ProviderGroupSchoolgroupCode, value) = false) Then
				Me.OnProviderGroupSchoolgroupCodeChanging(value)
				Me.SendPropertyChanging
				Me._ProviderGroupSchoolgroupCode = value
				Me.SendPropertyChanged("ProviderGroupSchoolgroupCode")
				Me.OnProviderGroupSchoolgroupCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProviderGroupTypeId", DbType:="Int NOT NULL")>  _
	Public Property ProviderGroupTypeId() As Integer
		Get
			Return Me._ProviderGroupTypeId
		End Get
		Set
			If ((Me._ProviderGroupTypeId = value)  _
						= false) Then
				If Me._ProviderGroupType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnProviderGroupTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._ProviderGroupTypeId = value
				Me.SendPropertyChanged("ProviderGroupTypeId")
				Me.OnProviderGroupTypeIdChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ProviderGroup_ProviderGroupProvider", Storage:="_ProviderGroupProviders", ThisKey:="ProviderGroupId", OtherKey:="ProviderGroupId")>  _
	Public Property ProviderGroupProviders() As EntitySet(Of ProviderGroupProvider)
		Get
			Return Me._ProviderGroupProviders
		End Get
		Set
			Me._ProviderGroupProviders.Assign(value)
		End Set
	End Property
	
	<Association(Name:="ProviderGroupType_ProviderGroup", Storage:="_ProviderGroupType", ThisKey:="ProviderGroupTypeId", OtherKey:="ProviderGroupTypeId", IsForeignKey:=true)>  _
	Public Property ProviderGroupType() As ProviderGroupType
		Get
			Return Me._ProviderGroupType.Entity
		End Get
		Set
			Dim previousValue As ProviderGroupType = Me._ProviderGroupType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProviderGroupType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProviderGroupType.Entity = Nothing
					previousValue.ProviderGroups.Remove(Me)
				End If
				Me._ProviderGroupType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProviderGroups.Add(Me)
					Me._ProviderGroupTypeId = value.ProviderGroupTypeId
				Else
					Me._ProviderGroupTypeId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ProviderGroupType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ProviderGroupProviders(ByVal entity As ProviderGroupProvider)
		Me.SendPropertyChanging
		entity.ProviderGroup = Me
	End Sub
	
	Private Sub detach_ProviderGroupProviders(ByVal entity As ProviderGroupProvider)
		Me.SendPropertyChanging
		entity.ProviderGroup = Nothing
	End Sub
End Class

<Table(Name:="dbo.ProviderGroupTypes")>  _
Partial Public Class ProviderGroupType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProviderGroupTypeId As Integer
	
	Private _ProviderGroupType As String
	
	Private _ProviderGroupTypeDescription As String
	
	Private _ProviderGroups As EntitySet(Of ProviderGroup)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProviderGroupTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProviderGroupTypeIdChanged()
    End Sub
    Partial Private Sub OnProviderGroupTypeChanging(value As String)
    End Sub
    Partial Private Sub OnProviderGroupTypeChanged()
    End Sub
    Partial Private Sub OnProviderGroupTypeDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnProviderGroupTypeDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProviderGroups = New EntitySet(Of ProviderGroup)(AddressOf Me.attach_ProviderGroups, AddressOf Me.detach_ProviderGroups)
		OnCreated
	End Sub
	
	<Column(Storage:="_ProviderGroupTypeId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ProviderGroupTypeId() As Integer
		Get
			Return Me._ProviderGroupTypeId
		End Get
		Set
			If ((Me._ProviderGroupTypeId = value)  _
						= false) Then
				Me.OnProviderGroupTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._ProviderGroupTypeId = value
				Me.SendPropertyChanged("ProviderGroupTypeId")
				Me.OnProviderGroupTypeIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProviderGroupType", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property ProviderGroupType() As String
		Get
			Return Me._ProviderGroupType
		End Get
		Set
			If (String.Equals(Me._ProviderGroupType, value) = false) Then
				Me.OnProviderGroupTypeChanging(value)
				Me.SendPropertyChanging
				Me._ProviderGroupType = value
				Me.SendPropertyChanged("ProviderGroupType")
				Me.OnProviderGroupTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProviderGroupTypeDescription", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property ProviderGroupTypeDescription() As String
		Get
			Return Me._ProviderGroupTypeDescription
		End Get
		Set
			If (String.Equals(Me._ProviderGroupTypeDescription, value) = false) Then
				Me.OnProviderGroupTypeDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ProviderGroupTypeDescription = value
				Me.SendPropertyChanged("ProviderGroupTypeDescription")
				Me.OnProviderGroupTypeDescriptionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ProviderGroupType_ProviderGroup", Storage:="_ProviderGroups", ThisKey:="ProviderGroupTypeId", OtherKey:="ProviderGroupTypeId")>  _
	Public Property ProviderGroups() As EntitySet(Of ProviderGroup)
		Get
			Return Me._ProviderGroups
		End Get
		Set
			Me._ProviderGroups.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ProviderGroups(ByVal entity As ProviderGroup)
		Me.SendPropertyChanging
		entity.ProviderGroupType = Me
	End Sub
	
	Private Sub detach_ProviderGroups(ByVal entity As ProviderGroup)
		Me.SendPropertyChanging
		entity.ProviderGroupType = Nothing
	End Sub
End Class
