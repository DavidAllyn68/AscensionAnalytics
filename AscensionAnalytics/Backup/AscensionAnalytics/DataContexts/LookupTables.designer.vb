'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5483
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class LookupTablesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertPolicyYear(instance As PolicyYear)
    End Sub
  Partial Private Sub UpdatePolicyYear(instance As PolicyYear)
    End Sub
  Partial Private Sub DeletePolicyYear(instance As PolicyYear)
    End Sub
  Partial Private Sub InsertLookupAnalysisPeople(instance As LookupAnalysisPeople)
    End Sub
  Partial Private Sub UpdateLookupAnalysisPeople(instance As LookupAnalysisPeople)
    End Sub
  Partial Private Sub DeleteLookupAnalysisPeople(instance As LookupAnalysisPeople)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property PolicyYears() As System.Data.Linq.Table(Of PolicyYear)
		Get
			Return Me.GetTable(Of PolicyYear)
		End Get
	End Property
	
	Public ReadOnly Property LookupAnalysisPeoples() As System.Data.Linq.Table(Of LookupAnalysisPeople)
		Get
			Return Me.GetTable(Of LookupAnalysisPeople)
		End Get
	End Property
	
	Public ReadOnly Property LookupCurrentAnalysisSettings() As System.Data.Linq.Table(Of LookupCurrentAnalysisSetting)
		Get
			Return Me.GetTable(Of LookupCurrentAnalysisSetting)
		End Get
	End Property
	
	Public ReadOnly Property LookupSchoolgroups() As System.Data.Linq.Table(Of LookupSchoolgroup)
		Get
			Return Me.GetTable(Of LookupSchoolgroup)
		End Get
	End Property
	
	Public ReadOnly Property LookupSchools() As System.Data.Linq.Table(Of LookupSchools)
		Get
			Return Me.GetTable(Of LookupSchools)
		End Get
	End Property
End Class

<Table(Name:="dbo.PolicyYears")>  _
Partial Public Class PolicyYear
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PolicyYearId As Integer
	
	Private _PolicyYear As String
	
	Private _FromYear As String
	
	Private _ToYear As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPolicyYearIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPolicyYearIdChanged()
    End Sub
    Partial Private Sub OnPolicyYearChanging(value As String)
    End Sub
    Partial Private Sub OnPolicyYearChanged()
    End Sub
    Partial Private Sub OnFromYearChanging(value As String)
    End Sub
    Partial Private Sub OnFromYearChanged()
    End Sub
    Partial Private Sub OnToYearChanging(value As String)
    End Sub
    Partial Private Sub OnToYearChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_PolicyYearId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PolicyYearId() As Integer
		Get
			Return Me._PolicyYearId
		End Get
		Set
			If ((Me._PolicyYearId = value)  _
						= false) Then
				Me.OnPolicyYearIdChanging(value)
				Me.SendPropertyChanging
				Me._PolicyYearId = value
				Me.SendPropertyChanged("PolicyYearId")
				Me.OnPolicyYearIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PolicyYear", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property PolicyYear() As String
		Get
			Return Me._PolicyYear
		End Get
		Set
			If (String.Equals(Me._PolicyYear, value) = false) Then
				Me.OnPolicyYearChanging(value)
				Me.SendPropertyChanging
				Me._PolicyYear = value
				Me.SendPropertyChanged("PolicyYear")
				Me.OnPolicyYearChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FromYear", DbType:="Char(4) NOT NULL", CanBeNull:=false)>  _
	Public Property FromYear() As String
		Get
			Return Me._FromYear
		End Get
		Set
			If (String.Equals(Me._FromYear, value) = false) Then
				Me.OnFromYearChanging(value)
				Me.SendPropertyChanging
				Me._FromYear = value
				Me.SendPropertyChanged("FromYear")
				Me.OnFromYearChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ToYear", DbType:="Char(4) NOT NULL", CanBeNull:=false)>  _
	Public Property ToYear() As String
		Get
			Return Me._ToYear
		End Get
		Set
			If (String.Equals(Me._ToYear, value) = false) Then
				Me.OnToYearChanging(value)
				Me.SendPropertyChanging
				Me._ToYear = value
				Me.SendPropertyChanged("ToYear")
				Me.OnToYearChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.AnalysisPeople")>  _
Partial Public Class LookupAnalysisPeople
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PersonId As Integer
	
	Private _Name As String
	
	Private _PersonTypeId As Integer
	
	Private _Phone As String
	
	Private _Note As String
	
	Private _Email As String
	
	Private _WindowsUserName As String
	
	Private _IsActive As Byte
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPersonIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPersonIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnPersonTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPersonTypeIdChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnWindowsUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnWindowsUserNameChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_PersonId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PersonId() As Integer
		Get
			Return Me._PersonId
		End Get
		Set
			If ((Me._PersonId = value)  _
						= false) Then
				Me.OnPersonIdChanging(value)
				Me.SendPropertyChanging
				Me._PersonId = value
				Me.SendPropertyChanged("PersonId")
				Me.OnPersonIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PersonTypeId", DbType:="Int NOT NULL")>  _
	Public Property PersonTypeId() As Integer
		Get
			Return Me._PersonTypeId
		End Get
		Set
			If ((Me._PersonTypeId = value)  _
						= false) Then
				Me.OnPersonTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._PersonTypeId = value
				Me.SendPropertyChanged("PersonTypeId")
				Me.OnPersonTypeIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Phone", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Note", DbType:="VarChar(2000) NOT NULL", CanBeNull:=false)>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Email", DbType:="VarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_WindowsUserName", DbType:="VarChar(200)")>  _
	Public Property WindowsUserName() As String
		Get
			Return Me._WindowsUserName
		End Get
		Set
			If (String.Equals(Me._WindowsUserName, value) = false) Then
				Me.OnWindowsUserNameChanging(value)
				Me.SendPropertyChanging
				Me._WindowsUserName = value
				Me.SendPropertyChanged("WindowsUserName")
				Me.OnWindowsUserNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsActive", DbType:="TinyInt NOT NULL")>  _
	Public Property IsActive() As Byte
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.CurrentAnalysisSettings")>  _
Partial Public Class LookupCurrentAnalysisSetting
	
	Private _AnalysisSetttingId As Integer
	
	Private _AnalysisSetting As String
	
	Private _SettingValue As String
	
	Private _SettingEffectiveDate As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_AnalysisSetttingId", DbType:="Int NOT NULL")>  _
	Public Property AnalysisSetttingId() As Integer
		Get
			Return Me._AnalysisSetttingId
		End Get
		Set
			If ((Me._AnalysisSetttingId = value)  _
						= false) Then
				Me._AnalysisSetttingId = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_AnalysisSetting", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property AnalysisSetting() As String
		Get
			Return Me._AnalysisSetting
		End Get
		Set
			If (String.Equals(Me._AnalysisSetting, value) = false) Then
				Me._AnalysisSetting = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_SettingValue", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property SettingValue() As String
		Get
			Return Me._SettingValue
		End Get
		Set
			If (String.Equals(Me._SettingValue, value) = false) Then
				Me._SettingValue = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_SettingEffectiveDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property SettingEffectiveDate() As Date
		Get
			Return Me._SettingEffectiveDate
		End Get
		Set
			If ((Me._SettingEffectiveDate = value)  _
						= false) Then
				Me._SettingEffectiveDate = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.schoolgroups")>  _
Partial Public Class LookupSchoolgroup
	
	Private _school_nm As String
	
	Private _schoolgroup_cd As String
	
	Private _schoolgroup_nm As String
	
	Private _schoolgroup As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_school_nm", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property school_nm() As String
		Get
			Return Me._school_nm
		End Get
		Set
			If (String.Equals(Me._school_nm, value) = false) Then
				Me._school_nm = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_schoolgroup_cd", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property schoolgroup_cd() As String
		Get
			Return Me._schoolgroup_cd
		End Get
		Set
			If (String.Equals(Me._schoolgroup_cd, value) = false) Then
				Me._schoolgroup_cd = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_schoolgroup_nm", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property schoolgroup_nm() As String
		Get
			Return Me._schoolgroup_nm
		End Get
		Set
			If (String.Equals(Me._schoolgroup_nm, value) = false) Then
				Me._schoolgroup_nm = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_schoolgroup", DbType:="VarChar(103)")>  _
	Public Property schoolgroup() As String
		Get
			Return Me._schoolgroup
		End Get
		Set
			If (String.Equals(Me._schoolgroup, value) = false) Then
				Me._schoolgroup = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.schools")>  _
Partial Public Class LookupSchools
	
	Private _school_nm As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_school_nm", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property school_nm() As String
		Get
			Return Me._school_nm
		End Get
		Set
			If (String.Equals(Me._school_nm, value) = false) Then
				Me._school_nm = value
			End If
		End Set
	End Property
End Class
