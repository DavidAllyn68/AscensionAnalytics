'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5477
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class AetnaDataDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAetna_BenefitMapping(instance As Aetna_BenefitMapping)
    End Sub
  Partial Private Sub UpdateAetna_BenefitMapping(instance As Aetna_BenefitMapping)
    End Sub
  Partial Private Sub DeleteAetna_BenefitMapping(instance As Aetna_BenefitMapping)
    End Sub
  Partial Private Sub InsertAetna_BenefitType(instance As Aetna_BenefitType)
    End Sub
  Partial Private Sub UpdateAetna_BenefitType(instance As Aetna_BenefitType)
    End Sub
  Partial Private Sub DeleteAetna_BenefitType(instance As Aetna_BenefitType)
    End Sub
  Partial Private Sub InsertAetna_PlaceOfServiceCode(instance As Aetna_PlaceOfServiceCode)
    End Sub
  Partial Private Sub UpdateAetna_PlaceOfServiceCode(instance As Aetna_PlaceOfServiceCode)
    End Sub
  Partial Private Sub DeleteAetna_PlaceOfServiceCode(instance As Aetna_PlaceOfServiceCode)
    End Sub
  Partial Private Sub InsertAetna_AscensionBenefit(instance As Aetna_AscensionBenefit)
    End Sub
  Partial Private Sub UpdateAetna_AscensionBenefit(instance As Aetna_AscensionBenefit)
    End Sub
  Partial Private Sub DeleteAetna_AscensionBenefit(instance As Aetna_AscensionBenefit)
    End Sub
  Partial Private Sub InsertAetna_GroupMapping(instance As Aetna_GroupMapping)
    End Sub
  Partial Private Sub UpdateAetna_GroupMapping(instance As Aetna_GroupMapping)
    End Sub
  Partial Private Sub DeleteAetna_GroupMapping(instance As Aetna_GroupMapping)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Aetna_BenefitMappings() As System.Data.Linq.Table(Of Aetna_BenefitMapping)
		Get
			Return Me.GetTable(Of Aetna_BenefitMapping)
		End Get
	End Property
	
	Public ReadOnly Property Aetna_BenefitTypes() As System.Data.Linq.Table(Of Aetna_BenefitType)
		Get
			Return Me.GetTable(Of Aetna_BenefitType)
		End Get
	End Property
	
	Public ReadOnly Property Aetna_PlaceOfServiceCodes() As System.Data.Linq.Table(Of Aetna_PlaceOfServiceCode)
		Get
			Return Me.GetTable(Of Aetna_PlaceOfServiceCode)
		End Get
	End Property
	
	Public ReadOnly Property Aetna_AscensionBenefits() As System.Data.Linq.Table(Of Aetna_AscensionBenefit)
		Get
			Return Me.GetTable(Of Aetna_AscensionBenefit)
		End Get
	End Property
	
	Public ReadOnly Property Aetna_GroupMappings() As System.Data.Linq.Table(Of Aetna_GroupMapping)
		Get
			Return Me.GetTable(Of Aetna_GroupMapping)
		End Get
	End Property
End Class

<Table(Name:="dbo.Aetna_BenefitMapping")>  _
Partial Public Class Aetna_BenefitMapping
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AetnaBenefitMapId As Integer
	
	Private _AetnaBenefitType As String
	
	Private _AetnaPlaceOfService As String
	
	Private _AscensionBenefitId As Integer
	
	Private _Aetna_BenefitType As EntityRef(Of Aetna_BenefitType)
	
	Private _Aetna_PlaceOfServiceCode As EntityRef(Of Aetna_PlaceOfServiceCode)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAetnaBenefitMapIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAetnaBenefitMapIdChanged()
    End Sub
    Partial Private Sub OnAetnaBenefitTypeChanging(value As String)
    End Sub
    Partial Private Sub OnAetnaBenefitTypeChanged()
    End Sub
    Partial Private Sub OnAetnaPlaceOfServiceChanging(value As String)
    End Sub
    Partial Private Sub OnAetnaPlaceOfServiceChanged()
    End Sub
    Partial Private Sub OnAscensionBenefitIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAscensionBenefitIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Aetna_BenefitType = CType(Nothing, EntityRef(Of Aetna_BenefitType))
		Me._Aetna_PlaceOfServiceCode = CType(Nothing, EntityRef(Of Aetna_PlaceOfServiceCode))
		OnCreated
	End Sub
	
	<Column(Storage:="_AetnaBenefitMapId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property AetnaBenefitMapId() As Integer
		Get
			Return Me._AetnaBenefitMapId
		End Get
		Set
			If ((Me._AetnaBenefitMapId = value)  _
						= false) Then
				Me.OnAetnaBenefitMapIdChanging(value)
				Me.SendPropertyChanging
				Me._AetnaBenefitMapId = value
				Me.SendPropertyChanged("AetnaBenefitMapId")
				Me.OnAetnaBenefitMapIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AetnaBenefitType", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property AetnaBenefitType() As String
		Get
			Return Me._AetnaBenefitType
		End Get
		Set
			If (String.Equals(Me._AetnaBenefitType, value) = false) Then
				If Me._Aetna_BenefitType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnAetnaBenefitTypeChanging(value)
				Me.SendPropertyChanging
				Me._AetnaBenefitType = value
				Me.SendPropertyChanged("AetnaBenefitType")
				Me.OnAetnaBenefitTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AetnaPlaceOfService", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property AetnaPlaceOfService() As String
		Get
			Return Me._AetnaPlaceOfService
		End Get
		Set
			If (String.Equals(Me._AetnaPlaceOfService, value) = false) Then
				If Me._Aetna_PlaceOfServiceCode.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnAetnaPlaceOfServiceChanging(value)
				Me.SendPropertyChanging
				Me._AetnaPlaceOfService = value
				Me.SendPropertyChanged("AetnaPlaceOfService")
				Me.OnAetnaPlaceOfServiceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AscensionBenefitId", DbType:="Int NOT NULL")>  _
	Public Property AscensionBenefitId() As Integer
		Get
			Return Me._AscensionBenefitId
		End Get
		Set
			If ((Me._AscensionBenefitId = value)  _
						= false) Then
				Me.OnAscensionBenefitIdChanging(value)
				Me.SendPropertyChanging
				Me._AscensionBenefitId = value
				Me.SendPropertyChanged("AscensionBenefitId")
				Me.OnAscensionBenefitIdChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Aetna_BenefitType_Aetna_BenefitMapping", Storage:="_Aetna_BenefitType", ThisKey:="AetnaBenefitType", OtherKey:="BenefitType", IsForeignKey:=true)>  _
	Public Property Aetna_BenefitType() As Aetna_BenefitType
		Get
			Return Me._Aetna_BenefitType.Entity
		End Get
		Set
			Dim previousValue As Aetna_BenefitType = Me._Aetna_BenefitType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Aetna_BenefitType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Aetna_BenefitType.Entity = Nothing
					previousValue.Aetna_BenefitMappings.Remove(Me)
				End If
				Me._Aetna_BenefitType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Aetna_BenefitMappings.Add(Me)
					Me._AetnaBenefitType = value.BenefitType
				Else
					Me._AetnaBenefitType = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Aetna_BenefitType")
			End If
		End Set
	End Property
	
	<Association(Name:="Aetna_PlaceOfServiceCode_Aetna_BenefitMapping", Storage:="_Aetna_PlaceOfServiceCode", ThisKey:="AetnaPlaceOfService", OtherKey:="PlaceOfServiceCode", IsForeignKey:=true)>  _
	Public Property Aetna_PlaceOfServiceCode() As Aetna_PlaceOfServiceCode
		Get
			Return Me._Aetna_PlaceOfServiceCode.Entity
		End Get
		Set
			Dim previousValue As Aetna_PlaceOfServiceCode = Me._Aetna_PlaceOfServiceCode.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Aetna_PlaceOfServiceCode.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Aetna_PlaceOfServiceCode.Entity = Nothing
					previousValue.Aetna_BenefitMappings.Remove(Me)
				End If
				Me._Aetna_PlaceOfServiceCode.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Aetna_BenefitMappings.Add(Me)
					Me._AetnaPlaceOfService = value.PlaceOfServiceCode
				Else
					Me._AetnaPlaceOfService = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Aetna_PlaceOfServiceCode")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Aetna_BenefitTypes")>  _
Partial Public Class Aetna_BenefitType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BenefitType As String
	
	Private _BenefitTypeDescription As String
	
	Private _Aetna_BenefitMappings As EntitySet(Of Aetna_BenefitMapping)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBenefitTypeChanging(value As String)
    End Sub
    Partial Private Sub OnBenefitTypeChanged()
    End Sub
    Partial Private Sub OnBenefitTypeDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnBenefitTypeDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Aetna_BenefitMappings = New EntitySet(Of Aetna_BenefitMapping)(AddressOf Me.attach_Aetna_BenefitMappings, AddressOf Me.detach_Aetna_BenefitMappings)
		OnCreated
	End Sub
	
	<Column(Storage:="_BenefitType", DbType:="VarChar(25) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property BenefitType() As String
		Get
			Return Me._BenefitType
		End Get
		Set
			If (String.Equals(Me._BenefitType, value) = false) Then
				Me.OnBenefitTypeChanging(value)
				Me.SendPropertyChanging
				Me._BenefitType = value
				Me.SendPropertyChanged("BenefitType")
				Me.OnBenefitTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BenefitTypeDescription", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property BenefitTypeDescription() As String
		Get
			Return Me._BenefitTypeDescription
		End Get
		Set
			If (String.Equals(Me._BenefitTypeDescription, value) = false) Then
				Me.OnBenefitTypeDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._BenefitTypeDescription = value
				Me.SendPropertyChanged("BenefitTypeDescription")
				Me.OnBenefitTypeDescriptionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Aetna_BenefitType_Aetna_BenefitMapping", Storage:="_Aetna_BenefitMappings", ThisKey:="BenefitType", OtherKey:="AetnaBenefitType")>  _
	Public Property Aetna_BenefitMappings() As EntitySet(Of Aetna_BenefitMapping)
		Get
			Return Me._Aetna_BenefitMappings
		End Get
		Set
			Me._Aetna_BenefitMappings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Aetna_BenefitMappings(ByVal entity As Aetna_BenefitMapping)
		Me.SendPropertyChanging
		entity.Aetna_BenefitType = Me
	End Sub
	
	Private Sub detach_Aetna_BenefitMappings(ByVal entity As Aetna_BenefitMapping)
		Me.SendPropertyChanging
		entity.Aetna_BenefitType = Nothing
	End Sub
End Class

<Table(Name:="dbo.Aetna_PlaceOfServiceCodes")>  _
Partial Public Class Aetna_PlaceOfServiceCode
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PlaceOfServiceCode As String
	
	Private _PlaceOfServiceDescription As String
	
	Private _Aetna_BenefitMappings As EntitySet(Of Aetna_BenefitMapping)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPlaceOfServiceCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPlaceOfServiceCodeChanged()
    End Sub
    Partial Private Sub OnPlaceOfServiceDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnPlaceOfServiceDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Aetna_BenefitMappings = New EntitySet(Of Aetna_BenefitMapping)(AddressOf Me.attach_Aetna_BenefitMappings, AddressOf Me.detach_Aetna_BenefitMappings)
		OnCreated
	End Sub
	
	<Column(Storage:="_PlaceOfServiceCode", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property PlaceOfServiceCode() As String
		Get
			Return Me._PlaceOfServiceCode
		End Get
		Set
			If (String.Equals(Me._PlaceOfServiceCode, value) = false) Then
				Me.OnPlaceOfServiceCodeChanging(value)
				Me.SendPropertyChanging
				Me._PlaceOfServiceCode = value
				Me.SendPropertyChanged("PlaceOfServiceCode")
				Me.OnPlaceOfServiceCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PlaceOfServiceDescription", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property PlaceOfServiceDescription() As String
		Get
			Return Me._PlaceOfServiceDescription
		End Get
		Set
			If (String.Equals(Me._PlaceOfServiceDescription, value) = false) Then
				Me.OnPlaceOfServiceDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._PlaceOfServiceDescription = value
				Me.SendPropertyChanged("PlaceOfServiceDescription")
				Me.OnPlaceOfServiceDescriptionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Aetna_PlaceOfServiceCode_Aetna_BenefitMapping", Storage:="_Aetna_BenefitMappings", ThisKey:="PlaceOfServiceCode", OtherKey:="AetnaPlaceOfService")>  _
	Public Property Aetna_BenefitMappings() As EntitySet(Of Aetna_BenefitMapping)
		Get
			Return Me._Aetna_BenefitMappings
		End Get
		Set
			Me._Aetna_BenefitMappings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Aetna_BenefitMappings(ByVal entity As Aetna_BenefitMapping)
		Me.SendPropertyChanging
		entity.Aetna_PlaceOfServiceCode = Me
	End Sub
	
	Private Sub detach_Aetna_BenefitMappings(ByVal entity As Aetna_BenefitMapping)
		Me.SendPropertyChanging
		entity.Aetna_PlaceOfServiceCode = Nothing
	End Sub
End Class

<Table(Name:="dbo.Benefits")>  _
Partial Public Class Aetna_AscensionBenefit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BenefitId As Integer
	
	Private _BenefitCode As String
	
	Private _BenefitDescription As String
	
	Private _BenefitCategoryId As Integer
	
	Private _IsRxBenefit As Byte
	
	Private _IsMentalHealthBenefit As Byte
	
	Private _IsInpatientBenefit As Byte
	
	Private _IsOfficeVisitBenefit As Byte
	
	Private _IsEmergencyRoomBenefit As Byte
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBenefitIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBenefitIdChanged()
    End Sub
    Partial Private Sub OnBenefitCodeChanging(value As String)
    End Sub
    Partial Private Sub OnBenefitCodeChanged()
    End Sub
    Partial Private Sub OnBenefitDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnBenefitDescriptionChanged()
    End Sub
    Partial Private Sub OnBenefitCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBenefitCategoryIdChanged()
    End Sub
    Partial Private Sub OnIsRxBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsRxBenefitChanged()
    End Sub
    Partial Private Sub OnIsMentalHealthBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsMentalHealthBenefitChanged()
    End Sub
    Partial Private Sub OnIsInpatientBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsInpatientBenefitChanged()
    End Sub
    Partial Private Sub OnIsOfficeVisitBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsOfficeVisitBenefitChanged()
    End Sub
    Partial Private Sub OnIsEmergencyRoomBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsEmergencyRoomBenefitChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_BenefitId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BenefitId() As Integer
		Get
			Return Me._BenefitId
		End Get
		Set
			If ((Me._BenefitId = value)  _
						= false) Then
				Me.OnBenefitIdChanging(value)
				Me.SendPropertyChanging
				Me._BenefitId = value
				Me.SendPropertyChanged("BenefitId")
				Me.OnBenefitIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BenefitCode", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property BenefitCode() As String
		Get
			Return Me._BenefitCode
		End Get
		Set
			If (String.Equals(Me._BenefitCode, value) = false) Then
				Me.OnBenefitCodeChanging(value)
				Me.SendPropertyChanging
				Me._BenefitCode = value
				Me.SendPropertyChanged("BenefitCode")
				Me.OnBenefitCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BenefitDescription", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property BenefitDescription() As String
		Get
			Return Me._BenefitDescription
		End Get
		Set
			If (String.Equals(Me._BenefitDescription, value) = false) Then
				Me.OnBenefitDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._BenefitDescription = value
				Me.SendPropertyChanged("BenefitDescription")
				Me.OnBenefitDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BenefitCategoryId", DbType:="Int NOT NULL")>  _
	Public Property BenefitCategoryId() As Integer
		Get
			Return Me._BenefitCategoryId
		End Get
		Set
			If ((Me._BenefitCategoryId = value)  _
						= false) Then
				Me.OnBenefitCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._BenefitCategoryId = value
				Me.SendPropertyChanged("BenefitCategoryId")
				Me.OnBenefitCategoryIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsRxBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsRxBenefit() As Byte
		Get
			Return Me._IsRxBenefit
		End Get
		Set
			If ((Me._IsRxBenefit = value)  _
						= false) Then
				Me.OnIsRxBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsRxBenefit = value
				Me.SendPropertyChanged("IsRxBenefit")
				Me.OnIsRxBenefitChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsMentalHealthBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsMentalHealthBenefit() As Byte
		Get
			Return Me._IsMentalHealthBenefit
		End Get
		Set
			If ((Me._IsMentalHealthBenefit = value)  _
						= false) Then
				Me.OnIsMentalHealthBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsMentalHealthBenefit = value
				Me.SendPropertyChanged("IsMentalHealthBenefit")
				Me.OnIsMentalHealthBenefitChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsInpatientBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsInpatientBenefit() As Byte
		Get
			Return Me._IsInpatientBenefit
		End Get
		Set
			If ((Me._IsInpatientBenefit = value)  _
						= false) Then
				Me.OnIsInpatientBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsInpatientBenefit = value
				Me.SendPropertyChanged("IsInpatientBenefit")
				Me.OnIsInpatientBenefitChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsOfficeVisitBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsOfficeVisitBenefit() As Byte
		Get
			Return Me._IsOfficeVisitBenefit
		End Get
		Set
			If ((Me._IsOfficeVisitBenefit = value)  _
						= false) Then
				Me.OnIsOfficeVisitBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsOfficeVisitBenefit = value
				Me.SendPropertyChanged("IsOfficeVisitBenefit")
				Me.OnIsOfficeVisitBenefitChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsEmergencyRoomBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsEmergencyRoomBenefit() As Byte
		Get
			Return Me._IsEmergencyRoomBenefit
		End Get
		Set
			If ((Me._IsEmergencyRoomBenefit = value)  _
						= false) Then
				Me.OnIsEmergencyRoomBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsEmergencyRoomBenefit = value
				Me.SendPropertyChanged("IsEmergencyRoomBenefit")
				Me.OnIsEmergencyRoomBenefitChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Aetna_GroupMapping")>  _
Partial Public Class Aetna_GroupMapping
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AetnaGroupMapId As Integer
	
	Private _AetnaGroupId As String
	
	Private _AetnaGroupName As String
	
	Private _AetnaLocationCode As String
	
	Private _AetnaPlanId As String
	
	Private _AscensionSchoolgroupCode As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAetnaGroupMapIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAetnaGroupMapIdChanged()
    End Sub
    Partial Private Sub OnAetnaGroupIdChanging(value As String)
    End Sub
    Partial Private Sub OnAetnaGroupIdChanged()
    End Sub
    Partial Private Sub OnAetnaGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnAetnaGroupNameChanged()
    End Sub
    Partial Private Sub OnAetnaLocationCodeChanging(value As String)
    End Sub
    Partial Private Sub OnAetnaLocationCodeChanged()
    End Sub
    Partial Private Sub OnAetnaPlanIdChanging(value As String)
    End Sub
    Partial Private Sub OnAetnaPlanIdChanged()
    End Sub
    Partial Private Sub OnAscensionSchoolgroupCodeChanging(value As String)
    End Sub
    Partial Private Sub OnAscensionSchoolgroupCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_AetnaGroupMapId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AetnaGroupMapId() As Integer
		Get
			Return Me._AetnaGroupMapId
		End Get
		Set
			If ((Me._AetnaGroupMapId = value)  _
						= false) Then
				Me.OnAetnaGroupMapIdChanging(value)
				Me.SendPropertyChanging
				Me._AetnaGroupMapId = value
				Me.SendPropertyChanged("AetnaGroupMapId")
				Me.OnAetnaGroupMapIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AetnaGroupId", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property AetnaGroupId() As String
		Get
			Return Me._AetnaGroupId
		End Get
		Set
			If (String.Equals(Me._AetnaGroupId, value) = false) Then
				Me.OnAetnaGroupIdChanging(value)
				Me.SendPropertyChanging
				Me._AetnaGroupId = value
				Me.SendPropertyChanged("AetnaGroupId")
				Me.OnAetnaGroupIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AetnaGroupName", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property AetnaGroupName() As String
		Get
			Return Me._AetnaGroupName
		End Get
		Set
			If (String.Equals(Me._AetnaGroupName, value) = false) Then
				Me.OnAetnaGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._AetnaGroupName = value
				Me.SendPropertyChanged("AetnaGroupName")
				Me.OnAetnaGroupNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AetnaLocationCode", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property AetnaLocationCode() As String
		Get
			Return Me._AetnaLocationCode
		End Get
		Set
			If (String.Equals(Me._AetnaLocationCode, value) = false) Then
				Me.OnAetnaLocationCodeChanging(value)
				Me.SendPropertyChanging
				Me._AetnaLocationCode = value
				Me.SendPropertyChanged("AetnaLocationCode")
				Me.OnAetnaLocationCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AetnaPlanId", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property AetnaPlanId() As String
		Get
			Return Me._AetnaPlanId
		End Get
		Set
			If (String.Equals(Me._AetnaPlanId, value) = false) Then
				Me.OnAetnaPlanIdChanging(value)
				Me.SendPropertyChanging
				Me._AetnaPlanId = value
				Me.SendPropertyChanged("AetnaPlanId")
				Me.OnAetnaPlanIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AscensionSchoolgroupCode", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property AscensionSchoolgroupCode() As String
		Get
			Return Me._AscensionSchoolgroupCode
		End Get
		Set
			If (String.Equals(Me._AscensionSchoolgroupCode, value) = false) Then
				Me.OnAscensionSchoolgroupCodeChanging(value)
				Me.SendPropertyChanging
				Me._AscensionSchoolgroupCode = value
				Me.SendPropertyChanged("AscensionSchoolgroupCode")
				Me.OnAscensionSchoolgroupCodeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
