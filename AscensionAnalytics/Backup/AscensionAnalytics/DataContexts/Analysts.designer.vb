'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5477
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class AnalystsDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAnalyst(instance As Analyst)
    End Sub
  Partial Private Sub UpdateAnalyst(instance As Analyst)
    End Sub
  Partial Private Sub DeleteAnalyst(instance As Analyst)
    End Sub
  Partial Private Sub InsertAnalystAnalysisPeople(instance As AnalystAnalysisPeople)
    End Sub
  Partial Private Sub UpdateAnalystAnalysisPeople(instance As AnalystAnalysisPeople)
    End Sub
  Partial Private Sub DeleteAnalystAnalysisPeople(instance As AnalystAnalysisPeople)
    End Sub
  Partial Private Sub InsertAnalystRole(instance As AnalystRole)
    End Sub
  Partial Private Sub UpdateAnalystRole(instance As AnalystRole)
    End Sub
  Partial Private Sub DeleteAnalystRole(instance As AnalystRole)
    End Sub
  #End Region
	
	Public Sub New()
        MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Analysts() As System.Data.Linq.Table(Of Analyst)
		Get
			Return Me.GetTable(Of Analyst)
		End Get
	End Property
	
	Public ReadOnly Property AnalystAnalysisPeoples() As System.Data.Linq.Table(Of AnalystAnalysisPeople)
		Get
			Return Me.GetTable(Of AnalystAnalysisPeople)
		End Get
	End Property
	
	Public ReadOnly Property AnalystRoles() As System.Data.Linq.Table(Of AnalystRole)
		Get
			Return Me.GetTable(Of AnalystRole)
		End Get
	End Property
End Class

<Table(Name:="dbo.Analysts")>  _
Partial Public Class Analyst
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AnalystId As Integer
	
	Private _AnalysisPersonId As Integer
	
	Private _AnalystRoleId As Integer
	
	Private _AnalystAnalysisPeople As EntityRef(Of AnalystAnalysisPeople)
	
	Private _AnalystRole As EntityRef(Of AnalystRole)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAnalystIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAnalystIdChanged()
    End Sub
    Partial Private Sub OnAnalysisPersonIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAnalysisPersonIdChanged()
    End Sub
    Partial Private Sub OnAnalystRoleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAnalystRoleIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AnalystAnalysisPeople = CType(Nothing, EntityRef(Of AnalystAnalysisPeople))
		Me._AnalystRole = CType(Nothing, EntityRef(Of AnalystRole))
		OnCreated
	End Sub
	
	<Column(Storage:="_AnalystId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AnalystId() As Integer
		Get
			Return Me._AnalystId
		End Get
		Set
			If ((Me._AnalystId = value)  _
						= false) Then
				Me.OnAnalystIdChanging(value)
				Me.SendPropertyChanging
				Me._AnalystId = value
				Me.SendPropertyChanged("AnalystId")
				Me.OnAnalystIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AnalysisPersonId", DbType:="Int NOT NULL")>  _
	Public Property AnalysisPersonId() As Integer
		Get
			Return Me._AnalysisPersonId
		End Get
		Set
			If ((Me._AnalysisPersonId = value)  _
						= false) Then
				If Me._AnalystAnalysisPeople.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnAnalysisPersonIdChanging(value)
				Me.SendPropertyChanging
				Me._AnalysisPersonId = value
				Me.SendPropertyChanged("AnalysisPersonId")
				Me.OnAnalysisPersonIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AnalystRoleId", DbType:="Int NOT NULL")>  _
	Public Property AnalystRoleId() As Integer
		Get
			Return Me._AnalystRoleId
		End Get
		Set
			If ((Me._AnalystRoleId = value)  _
						= false) Then
				If Me._AnalystRole.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnAnalystRoleIdChanging(value)
				Me.SendPropertyChanging
				Me._AnalystRoleId = value
				Me.SendPropertyChanged("AnalystRoleId")
				Me.OnAnalystRoleIdChanged
			End If
		End Set
	End Property
	
	<Association(Name:="AnalystAnalysisPeople_Analyst", Storage:="_AnalystAnalysisPeople", ThisKey:="AnalysisPersonId", OtherKey:="PersonId", IsForeignKey:=true)>  _
	Public Property AnalystAnalysisPeople() As AnalystAnalysisPeople
		Get
			Return Me._AnalystAnalysisPeople.Entity
		End Get
		Set
			Dim previousValue As AnalystAnalysisPeople = Me._AnalystAnalysisPeople.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AnalystAnalysisPeople.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AnalystAnalysisPeople.Entity = Nothing
					previousValue.Analysts.Remove(Me)
				End If
				Me._AnalystAnalysisPeople.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Analysts.Add(Me)
					Me._AnalysisPersonId = value.PersonId
				Else
					Me._AnalysisPersonId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AnalystAnalysisPeople")
			End If
		End Set
	End Property
	
	<Association(Name:="AnalystRole_Analyst", Storage:="_AnalystRole", ThisKey:="AnalystRoleId", OtherKey:="AnalystRoleId", IsForeignKey:=true)>  _
	Public Property AnalystRole() As AnalystRole
		Get
			Return Me._AnalystRole.Entity
		End Get
		Set
			Dim previousValue As AnalystRole = Me._AnalystRole.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AnalystRole.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AnalystRole.Entity = Nothing
					previousValue.Analysts.Remove(Me)
				End If
				Me._AnalystRole.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Analysts.Add(Me)
					Me._AnalystRoleId = value.AnalystRoleId
				Else
					Me._AnalystRoleId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AnalystRole")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.AnalysisPeople")>  _
Partial Public Class AnalystAnalysisPeople
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PersonId As Integer
	
	Private _Name As String
	
	Private _PersonTypeId As Integer
	
	Private _Phone As String
	
	Private _Note As String
	
	Private _Email As String
	
	Private _WindowsUserName As String
	
	Private _IsActive As Byte
	
	Private _Analysts As EntitySet(Of Analyst)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPersonIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPersonIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnPersonTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPersonTypeIdChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnWindowsUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnWindowsUserNameChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Analysts = New EntitySet(Of Analyst)(AddressOf Me.attach_Analysts, AddressOf Me.detach_Analysts)
		OnCreated
	End Sub
	
	<Column(Storage:="_PersonId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PersonId() As Integer
		Get
			Return Me._PersonId
		End Get
		Set
			If ((Me._PersonId = value)  _
						= false) Then
				Me.OnPersonIdChanging(value)
				Me.SendPropertyChanging
				Me._PersonId = value
				Me.SendPropertyChanged("PersonId")
				Me.OnPersonIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PersonTypeId", DbType:="Int NOT NULL")>  _
	Public Property PersonTypeId() As Integer
		Get
			Return Me._PersonTypeId
		End Get
		Set
			If ((Me._PersonTypeId = value)  _
						= false) Then
				Me.OnPersonTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._PersonTypeId = value
				Me.SendPropertyChanged("PersonTypeId")
				Me.OnPersonTypeIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Phone", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Note", DbType:="VarChar(2000) NOT NULL", CanBeNull:=false)>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Email", DbType:="VarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_WindowsUserName", DbType:="VarChar(200)")>  _
	Public Property WindowsUserName() As String
		Get
			Return Me._WindowsUserName
		End Get
		Set
			If (String.Equals(Me._WindowsUserName, value) = false) Then
				Me.OnWindowsUserNameChanging(value)
				Me.SendPropertyChanging
				Me._WindowsUserName = value
				Me.SendPropertyChanged("WindowsUserName")
				Me.OnWindowsUserNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsActive", DbType:="TinyInt NOT NULL")>  _
	Public Property IsActive() As Byte
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Association(Name:="AnalystAnalysisPeople_Analyst", Storage:="_Analysts", ThisKey:="PersonId", OtherKey:="AnalysisPersonId")>  _
	Public Property Analysts() As EntitySet(Of Analyst)
		Get
			Return Me._Analysts
		End Get
		Set
			Me._Analysts.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Analysts(ByVal entity As Analyst)
		Me.SendPropertyChanging
		entity.AnalystAnalysisPeople = Me
	End Sub
	
	Private Sub detach_Analysts(ByVal entity As Analyst)
		Me.SendPropertyChanging
		entity.AnalystAnalysisPeople = Nothing
	End Sub
End Class

<Table(Name:="dbo.AnalystRoles")>  _
Partial Public Class AnalystRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AnalystRoleId As Integer
	
	Private _AnalystRole As String
	
	Private _DatabaseUsername As String
	
	Private _DatabasePassword As String
	
	Private _Analysts As EntitySet(Of Analyst)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAnalystRoleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAnalystRoleIdChanged()
    End Sub
    Partial Private Sub OnAnalystRoleChanging(value As String)
    End Sub
    Partial Private Sub OnAnalystRoleChanged()
    End Sub
    Partial Private Sub OnDatabaseUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnDatabaseUsernameChanged()
    End Sub
    Partial Private Sub OnDatabasePasswordChanging(value As String)
    End Sub
    Partial Private Sub OnDatabasePasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Analysts = New EntitySet(Of Analyst)(AddressOf Me.attach_Analysts, AddressOf Me.detach_Analysts)
		OnCreated
	End Sub
	
	<Column(Storage:="_AnalystRoleId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AnalystRoleId() As Integer
		Get
			Return Me._AnalystRoleId
		End Get
		Set
			If ((Me._AnalystRoleId = value)  _
						= false) Then
				Me.OnAnalystRoleIdChanging(value)
				Me.SendPropertyChanging
				Me._AnalystRoleId = value
				Me.SendPropertyChanged("AnalystRoleId")
				Me.OnAnalystRoleIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AnalystRole", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property AnalystRole() As String
		Get
			Return Me._AnalystRole
		End Get
		Set
			If (String.Equals(Me._AnalystRole, value) = false) Then
				Me.OnAnalystRoleChanging(value)
				Me.SendPropertyChanging
				Me._AnalystRole = value
				Me.SendPropertyChanged("AnalystRole")
				Me.OnAnalystRoleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DatabaseUsername", DbType:="VarChar(50)")>  _
	Public Property DatabaseUsername() As String
		Get
			Return Me._DatabaseUsername
		End Get
		Set
			If (String.Equals(Me._DatabaseUsername, value) = false) Then
				Me.OnDatabaseUsernameChanging(value)
				Me.SendPropertyChanging
				Me._DatabaseUsername = value
				Me.SendPropertyChanged("DatabaseUsername")
				Me.OnDatabaseUsernameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DatabasePassword", DbType:="VarChar(50)")>  _
	Public Property DatabasePassword() As String
		Get
			Return Me._DatabasePassword
		End Get
		Set
			If (String.Equals(Me._DatabasePassword, value) = false) Then
				Me.OnDatabasePasswordChanging(value)
				Me.SendPropertyChanging
				Me._DatabasePassword = value
				Me.SendPropertyChanged("DatabasePassword")
				Me.OnDatabasePasswordChanged
			End If
		End Set
	End Property
	
	<Association(Name:="AnalystRole_Analyst", Storage:="_Analysts", ThisKey:="AnalystRoleId", OtherKey:="AnalystRoleId")>  _
	Public Property Analysts() As EntitySet(Of Analyst)
		Get
			Return Me._Analysts
		End Get
		Set
			Me._Analysts.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Analysts(ByVal entity As Analyst)
		Me.SendPropertyChanging
		entity.AnalystRole = Me
	End Sub
	
	Private Sub detach_Analysts(ByVal entity As Analyst)
		Me.SendPropertyChanging
		entity.AnalystRole = Nothing
	End Sub
End Class
