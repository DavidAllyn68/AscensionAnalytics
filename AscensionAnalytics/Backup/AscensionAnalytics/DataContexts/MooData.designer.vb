'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5485
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class MooDataDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertMOO_BenefitMapping(instance As MOO_BenefitMapping)
    End Sub
  Partial Private Sub UpdateMOO_BenefitMapping(instance As MOO_BenefitMapping)
    End Sub
  Partial Private Sub DeleteMOO_BenefitMapping(instance As MOO_BenefitMapping)
    End Sub
  Partial Private Sub InsertMOO_Benefit(instance As MOO_Benefit)
    End Sub
  Partial Private Sub UpdateMOO_Benefit(instance As MOO_Benefit)
    End Sub
  Partial Private Sub DeleteMOO_Benefit(instance As MOO_Benefit)
    End Sub
  Partial Private Sub InsertMooMapping_AscensionBenefits(instance As MooMapping_AscensionBenefits)
    End Sub
  Partial Private Sub UpdateMooMapping_AscensionBenefits(instance As MooMapping_AscensionBenefits)
    End Sub
  Partial Private Sub DeleteMooMapping_AscensionBenefits(instance As MooMapping_AscensionBenefits)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property MOO_BenefitMappings() As System.Data.Linq.Table(Of MOO_BenefitMapping)
		Get
			Return Me.GetTable(Of MOO_BenefitMapping)
		End Get
	End Property
	
	Public ReadOnly Property MOO_Benefits() As System.Data.Linq.Table(Of MOO_Benefit)
		Get
			Return Me.GetTable(Of MOO_Benefit)
		End Get
	End Property
	
	Public ReadOnly Property MooMapping_AscensionBenefits() As System.Data.Linq.Table(Of MooMapping_AscensionBenefits)
		Get
			Return Me.GetTable(Of MooMapping_AscensionBenefits)
		End Get
	End Property
	
	<FunctionAttribute(Name:="dbo.MOOFileImport_ProcessDataTranslators")>  _
	Public Function MOOFileImport_ProcessDataTranslators() As ISingleResult(Of MOOFileImport_ProcessDataTranslatorsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of MOOFileImport_ProcessDataTranslatorsResult))
	End Function
	
	<FunctionAttribute(Name:="dbo.MOOFileImport_LoadDenormForNightlyCompile")>  _
	Public Function MOOFileImport_LoadDenormForNightlyCompile() As ISingleResult(Of MOOFileImport_LoadDenormForNightlyCompileResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of MOOFileImport_LoadDenormForNightlyCompileResult))
	End Function
	
	<FunctionAttribute(Name:="dbo.MOOFileImport_FinishAndCleanUp")>  _
	Public Function MOOFileImport_FinishAndCleanUp() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Table(Name:="dbo.MOO_BenefitMapping")>  _
Partial Public Class MOO_BenefitMapping
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MooDataId As Integer
	
	Private _MooBenefitCode As String
	
	Private _AscensionBenefitId As Integer
	
	Private _MooMappingBenefits As EntityRef(Of MooMapping_AscensionBenefits)
	
	Private _MOO_Benefit As EntityRef(Of MOO_Benefit)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMooDataIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnMooDataIdChanged()
    End Sub
    Partial Private Sub OnMooBenefitCodeChanging(value As String)
    End Sub
    Partial Private Sub OnMooBenefitCodeChanged()
    End Sub
    Partial Private Sub OnAscensionBenefitIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAscensionBenefitIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MooMappingBenefits = CType(Nothing, EntityRef(Of MooMapping_AscensionBenefits))
		Me._MOO_Benefit = CType(Nothing, EntityRef(Of MOO_Benefit))
		OnCreated
	End Sub
	
	<Column(Storage:="_MooDataId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property MooDataId() As Integer
		Get
			Return Me._MooDataId
		End Get
		Set
			If ((Me._MooDataId = value)  _
						= false) Then
				Me.OnMooDataIdChanging(value)
				Me.SendPropertyChanging
				Me._MooDataId = value
				Me.SendPropertyChanged("MooDataId")
				Me.OnMooDataIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MooBenefitCode", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property MooBenefitCode() As String
		Get
			Return Me._MooBenefitCode
		End Get
		Set
			If (String.Equals(Me._MooBenefitCode, value) = false) Then
				If Me._MOO_Benefit.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnMooBenefitCodeChanging(value)
				Me.SendPropertyChanging
				Me._MooBenefitCode = value
				Me.SendPropertyChanged("MooBenefitCode")
				Me.OnMooBenefitCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AscensionBenefitId", DbType:="Int NOT NULL")>  _
	Public Property AscensionBenefitId() As Integer
		Get
			Return Me._AscensionBenefitId
		End Get
		Set
			If ((Me._AscensionBenefitId = value)  _
						= false) Then
				If Me._MooMappingBenefits.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnAscensionBenefitIdChanging(value)
				Me.SendPropertyChanging
				Me._AscensionBenefitId = value
				Me.SendPropertyChanged("AscensionBenefitId")
				Me.OnAscensionBenefitIdChanged
			End If
		End Set
	End Property
	
	<Association(Name:="MooMapping_AscensionBenefits_MOO_BenefitMapping", Storage:="_MooMappingBenefits", ThisKey:="AscensionBenefitId", OtherKey:="BenefitId", IsForeignKey:=true)>  _
	Public Property MooMapping_AscensionBenefits() As MooMapping_AscensionBenefits
		Get
			Return Me._MooMappingBenefits.Entity
		End Get
		Set
			Dim previousValue As MooMapping_AscensionBenefits = Me._MooMappingBenefits.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MooMappingBenefits.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MooMappingBenefits.Entity = Nothing
					previousValue.MOO_BenefitMappings.Remove(Me)
				End If
				Me._MooMappingBenefits.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MOO_BenefitMappings.Add(Me)
					Me._AscensionBenefitId = value.BenefitId
				Else
					Me._AscensionBenefitId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("MooMapping_AscensionBenefits")
			End If
		End Set
	End Property
	
	<Association(Name:="MOO_Benefit_MOO_BenefitMapping", Storage:="_MOO_Benefit", ThisKey:="MooBenefitCode", OtherKey:="bencode", IsForeignKey:=true)>  _
	Public Property MOO_Benefit() As MOO_Benefit
		Get
			Return Me._MOO_Benefit.Entity
		End Get
		Set
			Dim previousValue As MOO_Benefit = Me._MOO_Benefit.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MOO_Benefit.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MOO_Benefit.Entity = Nothing
					previousValue.MOO_BenefitMappings.Remove(Me)
				End If
				Me._MOO_Benefit.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MOO_BenefitMappings.Add(Me)
					Me._MooBenefitCode = value.bencode
				Else
					Me._MooBenefitCode = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MOO_Benefit")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.MOO_Benefits")>  _
Partial Public Class MOO_Benefit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _bencode As String = CType(Nothing, String)
	
	Private _benefit_nme As String = CType(Nothing, String)
	
	Private _MOO_BenefitMappings As EntitySet(Of MOO_BenefitMapping)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MOO_BenefitMappings = New EntitySet(Of MOO_BenefitMapping)(AddressOf Me.attach_MOO_BenefitMappings, AddressOf Me.detach_MOO_BenefitMappings)
		OnCreated
	End Sub
	
	<Column(Storage:="_bencode", DbType:="VarChar(25) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property bencode() As String
		Get
			Return Me._bencode
		End Get
	End Property
	
	<Column(Storage:="_benefit_nme", DbType:="VarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public ReadOnly Property benefit_nme() As String
		Get
			Return Me._benefit_nme
		End Get
	End Property
	
	<Association(Name:="MOO_Benefit_MOO_BenefitMapping", Storage:="_MOO_BenefitMappings", ThisKey:="bencode", OtherKey:="MooBenefitCode")>  _
	Public Property MOO_BenefitMappings() As EntitySet(Of MOO_BenefitMapping)
		Get
			Return Me._MOO_BenefitMappings
		End Get
		Set
			Me._MOO_BenefitMappings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_MOO_BenefitMappings(ByVal entity As MOO_BenefitMapping)
		Me.SendPropertyChanging
		entity.MOO_Benefit = Me
	End Sub
	
	Private Sub detach_MOO_BenefitMappings(ByVal entity As MOO_BenefitMapping)
		Me.SendPropertyChanging
		entity.MOO_Benefit = Nothing
	End Sub
End Class

<Table(Name:="dbo.Benefits")>  _
Partial Public Class MooMapping_AscensionBenefits
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BenefitId As Integer
	
	Private _BenefitCode As String
	
	Private _BenefitDescription As String
	
	Private _IsRxBenefit As Byte
	
	Private _IsMentalHealthBenefit As Byte
	
	Private _IsInpatientBenefit As Byte
	
	Private _IsOfficeVisitBenefit As Byte
	
	Private _IsEmergencyRoomBenefit As Byte
	
	Private _MOO_BenefitMappings As EntitySet(Of MOO_BenefitMapping)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBenefitIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBenefitIdChanged()
    End Sub
    Partial Private Sub OnBenefitCodeChanging(value As String)
    End Sub
    Partial Private Sub OnBenefitCodeChanged()
    End Sub
    Partial Private Sub OnBenefitDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnBenefitDescriptionChanged()
    End Sub
    Partial Private Sub OnIsRxBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsRxBenefitChanged()
    End Sub
    Partial Private Sub OnIsMentalHealthBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsMentalHealthBenefitChanged()
    End Sub
    Partial Private Sub OnIsInpatientBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsInpatientBenefitChanged()
    End Sub
    Partial Private Sub OnIsOfficeVisitBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsOfficeVisitBenefitChanged()
    End Sub
    Partial Private Sub OnIsEmergencyRoomBenefitChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsEmergencyRoomBenefitChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MOO_BenefitMappings = New EntitySet(Of MOO_BenefitMapping)(AddressOf Me.attach_MOO_BenefitMappings, AddressOf Me.detach_MOO_BenefitMappings)
		OnCreated
	End Sub
	
	<Column(Storage:="_BenefitId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BenefitId() As Integer
		Get
			Return Me._BenefitId
		End Get
		Set
			If ((Me._BenefitId = value)  _
						= false) Then
				Me.OnBenefitIdChanging(value)
				Me.SendPropertyChanging
				Me._BenefitId = value
				Me.SendPropertyChanged("BenefitId")
				Me.OnBenefitIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BenefitCode", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property BenefitCode() As String
		Get
			Return Me._BenefitCode
		End Get
		Set
			If (String.Equals(Me._BenefitCode, value) = false) Then
				Me.OnBenefitCodeChanging(value)
				Me.SendPropertyChanging
				Me._BenefitCode = value
				Me.SendPropertyChanged("BenefitCode")
				Me.OnBenefitCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BenefitDescription", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property BenefitDescription() As String
		Get
			Return Me._BenefitDescription
		End Get
		Set
			If (String.Equals(Me._BenefitDescription, value) = false) Then
				Me.OnBenefitDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._BenefitDescription = value
				Me.SendPropertyChanged("BenefitDescription")
				Me.OnBenefitDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsRxBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsRxBenefit() As Byte
		Get
			Return Me._IsRxBenefit
		End Get
		Set
			If ((Me._IsRxBenefit = value)  _
						= false) Then
				Me.OnIsRxBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsRxBenefit = value
				Me.SendPropertyChanged("IsRxBenefit")
				Me.OnIsRxBenefitChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsMentalHealthBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsMentalHealthBenefit() As Byte
		Get
			Return Me._IsMentalHealthBenefit
		End Get
		Set
			If ((Me._IsMentalHealthBenefit = value)  _
						= false) Then
				Me.OnIsMentalHealthBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsMentalHealthBenefit = value
				Me.SendPropertyChanged("IsMentalHealthBenefit")
				Me.OnIsMentalHealthBenefitChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsInpatientBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsInpatientBenefit() As Byte
		Get
			Return Me._IsInpatientBenefit
		End Get
		Set
			If ((Me._IsInpatientBenefit = value)  _
						= false) Then
				Me.OnIsInpatientBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsInpatientBenefit = value
				Me.SendPropertyChanged("IsInpatientBenefit")
				Me.OnIsInpatientBenefitChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsOfficeVisitBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsOfficeVisitBenefit() As Byte
		Get
			Return Me._IsOfficeVisitBenefit
		End Get
		Set
			If ((Me._IsOfficeVisitBenefit = value)  _
						= false) Then
				Me.OnIsOfficeVisitBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsOfficeVisitBenefit = value
				Me.SendPropertyChanged("IsOfficeVisitBenefit")
				Me.OnIsOfficeVisitBenefitChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsEmergencyRoomBenefit", DbType:="TinyInt NOT NULL")>  _
	Public Property IsEmergencyRoomBenefit() As Byte
		Get
			Return Me._IsEmergencyRoomBenefit
		End Get
		Set
			If ((Me._IsEmergencyRoomBenefit = value)  _
						= false) Then
				Me.OnIsEmergencyRoomBenefitChanging(value)
				Me.SendPropertyChanging
				Me._IsEmergencyRoomBenefit = value
				Me.SendPropertyChanged("IsEmergencyRoomBenefit")
				Me.OnIsEmergencyRoomBenefitChanged
			End If
		End Set
	End Property
	
	<Association(Name:="MooMapping_AscensionBenefits_MOO_BenefitMapping", Storage:="_MOO_BenefitMappings", ThisKey:="BenefitId", OtherKey:="AscensionBenefitId")>  _
	Public Property MOO_BenefitMappings() As EntitySet(Of MOO_BenefitMapping)
		Get
			Return Me._MOO_BenefitMappings
		End Get
		Set
			Me._MOO_BenefitMappings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_MOO_BenefitMappings(ByVal entity As MOO_BenefitMapping)
		Me.SendPropertyChanging
		entity.MooMapping_AscensionBenefits = Me
	End Sub
	
	Private Sub detach_MOO_BenefitMappings(ByVal entity As MOO_BenefitMapping)
		Me.SendPropertyChanging
		entity.MooMapping_AscensionBenefits = Nothing
	End Sub
End Class

Partial Public Class MOOFileImport_ProcessDataTranslatorsResult
	
	Private _MessageQueueId As Integer
	
	Private _MessageSubject As String
	
	Private _MessageBody As String
	
	Private _MessageSenderAddress As String
	
	Private _MessageRecipientAddress As String
	
	Private _MessageCreatedDate As Date
	
	Private _MessageScheduleDate As Date
	
	Private _MessageSentDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_MessageQueueId", DbType:="Int NOT NULL")>  _
	Public Property MessageQueueId() As Integer
		Get
			Return Me._MessageQueueId
		End Get
		Set
			If ((Me._MessageQueueId = value)  _
						= false) Then
				Me._MessageQueueId = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageSubject", DbType:="VarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property MessageSubject() As String
		Get
			Return Me._MessageSubject
		End Get
		Set
			If (String.Equals(Me._MessageSubject, value) = false) Then
				Me._MessageSubject = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageBody", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MessageBody() As String
		Get
			Return Me._MessageBody
		End Get
		Set
			If (String.Equals(Me._MessageBody, value) = false) Then
				Me._MessageBody = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageSenderAddress", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property MessageSenderAddress() As String
		Get
			Return Me._MessageSenderAddress
		End Get
		Set
			If (String.Equals(Me._MessageSenderAddress, value) = false) Then
				Me._MessageSenderAddress = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageRecipientAddress", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property MessageRecipientAddress() As String
		Get
			Return Me._MessageRecipientAddress
		End Get
		Set
			If (String.Equals(Me._MessageRecipientAddress, value) = false) Then
				Me._MessageRecipientAddress = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageCreatedDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property MessageCreatedDate() As Date
		Get
			Return Me._MessageCreatedDate
		End Get
		Set
			If ((Me._MessageCreatedDate = value)  _
						= false) Then
				Me._MessageCreatedDate = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageScheduleDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property MessageScheduleDate() As Date
		Get
			Return Me._MessageScheduleDate
		End Get
		Set
			If ((Me._MessageScheduleDate = value)  _
						= false) Then
				Me._MessageScheduleDate = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageSentDate", DbType:="SmallDateTime")>  _
	Public Property MessageSentDate() As System.Nullable(Of Date)
		Get
			Return Me._MessageSentDate
		End Get
		Set
			If (Me._MessageSentDate.Equals(value) = false) Then
				Me._MessageSentDate = value
			End If
		End Set
	End Property
End Class

Partial Public Class MOOFileImport_LoadDenormForNightlyCompileResult
	
	Private _MessageQueueId As Integer
	
	Private _MessageSubject As String
	
	Private _MessageBody As String
	
	Private _MessageSenderAddress As String
	
	Private _MessageRecipientAddress As String
	
	Private _MessageCreatedDate As Date
	
	Private _MessageScheduleDate As Date
	
	Private _MessageSentDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_MessageQueueId", DbType:="Int NOT NULL")>  _
	Public Property MessageQueueId() As Integer
		Get
			Return Me._MessageQueueId
		End Get
		Set
			If ((Me._MessageQueueId = value)  _
						= false) Then
				Me._MessageQueueId = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageSubject", DbType:="VarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property MessageSubject() As String
		Get
			Return Me._MessageSubject
		End Get
		Set
			If (String.Equals(Me._MessageSubject, value) = false) Then
				Me._MessageSubject = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageBody", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MessageBody() As String
		Get
			Return Me._MessageBody
		End Get
		Set
			If (String.Equals(Me._MessageBody, value) = false) Then
				Me._MessageBody = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageSenderAddress", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property MessageSenderAddress() As String
		Get
			Return Me._MessageSenderAddress
		End Get
		Set
			If (String.Equals(Me._MessageSenderAddress, value) = false) Then
				Me._MessageSenderAddress = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageRecipientAddress", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property MessageRecipientAddress() As String
		Get
			Return Me._MessageRecipientAddress
		End Get
		Set
			If (String.Equals(Me._MessageRecipientAddress, value) = false) Then
				Me._MessageRecipientAddress = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageCreatedDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property MessageCreatedDate() As Date
		Get
			Return Me._MessageCreatedDate
		End Get
		Set
			If ((Me._MessageCreatedDate = value)  _
						= false) Then
				Me._MessageCreatedDate = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageScheduleDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property MessageScheduleDate() As Date
		Get
			Return Me._MessageScheduleDate
		End Get
		Set
			If ((Me._MessageScheduleDate = value)  _
						= false) Then
				Me._MessageScheduleDate = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MessageSentDate", DbType:="SmallDateTime")>  _
	Public Property MessageSentDate() As System.Nullable(Of Date)
		Get
			Return Me._MessageSentDate
		End Get
		Set
			If (Me._MessageSentDate.Equals(value) = false) Then
				Me._MessageSentDate = value
			End If
		End Set
	End Property
End Class
