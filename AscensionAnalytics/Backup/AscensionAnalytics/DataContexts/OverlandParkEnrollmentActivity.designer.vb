'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5477
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class OverlandParkEnrollmentActivityDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertOverlandPark_Enrollment_Group(instance As OverlandPark_Enrollment_Group)
    End Sub
  Partial Private Sub UpdateOverlandPark_Enrollment_Group(instance As OverlandPark_Enrollment_Group)
    End Sub
  Partial Private Sub DeleteOverlandPark_Enrollment_Group(instance As OverlandPark_Enrollment_Group)
    End Sub
  Partial Private Sub InsertOverlandPark_EnrollmentActivity(instance As OverlandPark_EnrollmentActivity)
    End Sub
  Partial Private Sub UpdateOverlandPark_EnrollmentActivity(instance As OverlandPark_EnrollmentActivity)
    End Sub
  Partial Private Sub DeleteOverlandPark_EnrollmentActivity(instance As OverlandPark_EnrollmentActivity)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property OverlandPark_Enrollment_Groups() As System.Data.Linq.Table(Of OverlandPark_Enrollment_Group)
		Get
			Return Me.GetTable(Of OverlandPark_Enrollment_Group)
		End Get
	End Property
	
	Public ReadOnly Property OverlandPark_EnrollmentActivities() As System.Data.Linq.Table(Of OverlandPark_EnrollmentActivity)
		Get
			Return Me.GetTable(Of OverlandPark_EnrollmentActivity)
		End Get
	End Property
End Class

<Table(Name:="dbo.OverlandPark_Groups")>  _
Partial Public Class OverlandPark_Enrollment_Group
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OverlandParkGroupId As Integer
	
	Private _OverlandParkGroupCode As String
	
	Private _OverlandParkGroupName As String
	
	Private _OverlandPark_EnrollmentActivities As EntitySet(Of OverlandPark_EnrollmentActivity)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOverlandParkGroupIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnOverlandParkGroupIdChanged()
    End Sub
    Partial Private Sub OnOverlandParkGroupCodeChanging(value As String)
    End Sub
    Partial Private Sub OnOverlandParkGroupCodeChanged()
    End Sub
    Partial Private Sub OnOverlandParkGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnOverlandParkGroupNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OverlandPark_EnrollmentActivities = New EntitySet(Of OverlandPark_EnrollmentActivity)(AddressOf Me.attach_OverlandPark_EnrollmentActivities, AddressOf Me.detach_OverlandPark_EnrollmentActivities)
		OnCreated
	End Sub
	
	<Column(Storage:="_OverlandParkGroupId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property OverlandParkGroupId() As Integer
		Get
			Return Me._OverlandParkGroupId
		End Get
		Set
			If ((Me._OverlandParkGroupId = value)  _
						= false) Then
				Me.OnOverlandParkGroupIdChanging(value)
				Me.SendPropertyChanging
				Me._OverlandParkGroupId = value
				Me.SendPropertyChanged("OverlandParkGroupId")
				Me.OnOverlandParkGroupIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OverlandParkGroupCode", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property OverlandParkGroupCode() As String
		Get
			Return Me._OverlandParkGroupCode
		End Get
		Set
			If (String.Equals(Me._OverlandParkGroupCode, value) = false) Then
				Me.OnOverlandParkGroupCodeChanging(value)
				Me.SendPropertyChanging
				Me._OverlandParkGroupCode = value
				Me.SendPropertyChanged("OverlandParkGroupCode")
				Me.OnOverlandParkGroupCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OverlandParkGroupName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property OverlandParkGroupName() As String
		Get
			Return Me._OverlandParkGroupName
		End Get
		Set
			If (String.Equals(Me._OverlandParkGroupName, value) = false) Then
				Me.OnOverlandParkGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._OverlandParkGroupName = value
				Me.SendPropertyChanged("OverlandParkGroupName")
				Me.OnOverlandParkGroupNameChanged
			End If
		End Set
	End Property
	
	<Association(Name:="OverlandPark_Enrollment_Group_OverlandPark_EnrollmentActivity", Storage:="_OverlandPark_EnrollmentActivities", ThisKey:="OverlandParkGroupId", OtherKey:="OverlandParkGroupId")>  _
	Public Property OverlandPark_EnrollmentActivities() As EntitySet(Of OverlandPark_EnrollmentActivity)
		Get
			Return Me._OverlandPark_EnrollmentActivities
		End Get
		Set
			Me._OverlandPark_EnrollmentActivities.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OverlandPark_EnrollmentActivities(ByVal entity As OverlandPark_EnrollmentActivity)
		Me.SendPropertyChanging
		entity.OverlandPark_Enrollment_Group = Me
	End Sub
	
	Private Sub detach_OverlandPark_EnrollmentActivities(ByVal entity As OverlandPark_EnrollmentActivity)
		Me.SendPropertyChanging
		entity.OverlandPark_Enrollment_Group = Nothing
	End Sub
End Class

<Table(Name:="dbo.OverlandPark_EnrollmentActivity")>  _
Partial Public Class OverlandPark_EnrollmentActivity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EnrollmentActivityId As Integer
	
	Private _RosterLoadDate As Date
	
	Private _PolicyNumber As String
	
	Private _Underwriter As String
	
	Private _AscensionUnderwriterCode As String
	
	Private _ClaimsGroupIdentifier As String
	
	Private _GroupName As String
	
	Private _OverlandParkGroupId As Integer
	
	Private _PolicyYear As String
	
	Private _PlanName As String
	
	Private _TermName As String
	
	Private _InsuredClass As String
	
	Private _GrossCost As Decimal
	
	Private _BookPremium As Decimal
	
	Private _Enrollees As Integer
	
	Private _TotalCost As Decimal
	
	Private _TotalPremium As Decimal
	
	Private _OverlandPark_Enrollment_Group As EntityRef(Of OverlandPark_Enrollment_Group)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEnrollmentActivityIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnEnrollmentActivityIdChanged()
    End Sub
    Partial Private Sub OnRosterLoadDateChanging(value As Date)
    End Sub
    Partial Private Sub OnRosterLoadDateChanged()
    End Sub
    Partial Private Sub OnPolicyNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPolicyNumberChanged()
    End Sub
    Partial Private Sub OnUnderwriterChanging(value As String)
    End Sub
    Partial Private Sub OnUnderwriterChanged()
    End Sub
    Partial Private Sub OnAscensionUnderwriterCodeChanging(value As String)
    End Sub
    Partial Private Sub OnAscensionUnderwriterCodeChanged()
    End Sub
    Partial Private Sub OnClaimsGroupIdentifierChanging(value As String)
    End Sub
    Partial Private Sub OnClaimsGroupIdentifierChanged()
    End Sub
    Partial Private Sub OnGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnGroupNameChanged()
    End Sub
    Partial Private Sub OnOverlandParkGroupIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnOverlandParkGroupIdChanged()
    End Sub
    Partial Private Sub OnPolicyYearChanging(value As String)
    End Sub
    Partial Private Sub OnPolicyYearChanged()
    End Sub
    Partial Private Sub OnPlanNameChanging(value As String)
    End Sub
    Partial Private Sub OnPlanNameChanged()
    End Sub
    Partial Private Sub OnTermNameChanging(value As String)
    End Sub
    Partial Private Sub OnTermNameChanged()
    End Sub
    Partial Private Sub OnInsuredClassChanging(value As String)
    End Sub
    Partial Private Sub OnInsuredClassChanged()
    End Sub
    Partial Private Sub OnGrossCostChanging(value As Decimal)
    End Sub
    Partial Private Sub OnGrossCostChanged()
    End Sub
    Partial Private Sub OnBookPremiumChanging(value As Decimal)
    End Sub
    Partial Private Sub OnBookPremiumChanged()
    End Sub
    Partial Private Sub OnEnrolleesChanging(value As Integer)
    End Sub
    Partial Private Sub OnEnrolleesChanged()
    End Sub
    Partial Private Sub OnTotalCostChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTotalCostChanged()
    End Sub
    Partial Private Sub OnTotalPremiumChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTotalPremiumChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OverlandPark_Enrollment_Group = CType(Nothing, EntityRef(Of OverlandPark_Enrollment_Group))
		OnCreated
	End Sub
	
	<Column(Storage:="_EnrollmentActivityId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property EnrollmentActivityId() As Integer
		Get
			Return Me._EnrollmentActivityId
		End Get
		Set
			If ((Me._EnrollmentActivityId = value)  _
						= false) Then
				Me.OnEnrollmentActivityIdChanging(value)
				Me.SendPropertyChanging
				Me._EnrollmentActivityId = value
				Me.SendPropertyChanged("EnrollmentActivityId")
				Me.OnEnrollmentActivityIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RosterLoadDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property RosterLoadDate() As Date
		Get
			Return Me._RosterLoadDate
		End Get
		Set
			If ((Me._RosterLoadDate = value)  _
						= false) Then
				Me.OnRosterLoadDateChanging(value)
				Me.SendPropertyChanging
				Me._RosterLoadDate = value
				Me.SendPropertyChanged("RosterLoadDate")
				Me.OnRosterLoadDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PolicyNumber", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property PolicyNumber() As String
		Get
			Return Me._PolicyNumber
		End Get
		Set
			If (String.Equals(Me._PolicyNumber, value) = false) Then
				Me.OnPolicyNumberChanging(value)
				Me.SendPropertyChanging
				Me._PolicyNumber = value
				Me.SendPropertyChanged("PolicyNumber")
				Me.OnPolicyNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Underwriter", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Underwriter() As String
		Get
			Return Me._Underwriter
		End Get
		Set
			If (String.Equals(Me._Underwriter, value) = false) Then
				Me.OnUnderwriterChanging(value)
				Me.SendPropertyChanging
				Me._Underwriter = value
				Me.SendPropertyChanged("Underwriter")
				Me.OnUnderwriterChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AscensionUnderwriterCode", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property AscensionUnderwriterCode() As String
		Get
			Return Me._AscensionUnderwriterCode
		End Get
		Set
			If (String.Equals(Me._AscensionUnderwriterCode, value) = false) Then
				Me.OnAscensionUnderwriterCodeChanging(value)
				Me.SendPropertyChanging
				Me._AscensionUnderwriterCode = value
				Me.SendPropertyChanged("AscensionUnderwriterCode")
				Me.OnAscensionUnderwriterCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ClaimsGroupIdentifier", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property ClaimsGroupIdentifier() As String
		Get
			Return Me._ClaimsGroupIdentifier
		End Get
		Set
			If (String.Equals(Me._ClaimsGroupIdentifier, value) = false) Then
				Me.OnClaimsGroupIdentifierChanging(value)
				Me.SendPropertyChanging
				Me._ClaimsGroupIdentifier = value
				Me.SendPropertyChanged("ClaimsGroupIdentifier")
				Me.OnClaimsGroupIdentifierChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_GroupName", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property GroupName() As String
		Get
			Return Me._GroupName
		End Get
		Set
			If (String.Equals(Me._GroupName, value) = false) Then
				Me.OnGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._GroupName = value
				Me.SendPropertyChanged("GroupName")
				Me.OnGroupNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OverlandParkGroupId", DbType:="Int NOT NULL")>  _
	Public Property OverlandParkGroupId() As Integer
		Get
			Return Me._OverlandParkGroupId
		End Get
		Set
			If ((Me._OverlandParkGroupId = value)  _
						= false) Then
				If Me._OverlandPark_Enrollment_Group.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnOverlandParkGroupIdChanging(value)
				Me.SendPropertyChanging
				Me._OverlandParkGroupId = value
				Me.SendPropertyChanged("OverlandParkGroupId")
				Me.OnOverlandParkGroupIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PolicyYear", DbType:="Char(9) NOT NULL", CanBeNull:=false)>  _
	Public Property PolicyYear() As String
		Get
			Return Me._PolicyYear
		End Get
		Set
			If (String.Equals(Me._PolicyYear, value) = false) Then
				Me.OnPolicyYearChanging(value)
				Me.SendPropertyChanging
				Me._PolicyYear = value
				Me.SendPropertyChanged("PolicyYear")
				Me.OnPolicyYearChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PlanName", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property PlanName() As String
		Get
			Return Me._PlanName
		End Get
		Set
			If (String.Equals(Me._PlanName, value) = false) Then
				Me.OnPlanNameChanging(value)
				Me.SendPropertyChanging
				Me._PlanName = value
				Me.SendPropertyChanged("PlanName")
				Me.OnPlanNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TermName", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property TermName() As String
		Get
			Return Me._TermName
		End Get
		Set
			If (String.Equals(Me._TermName, value) = false) Then
				Me.OnTermNameChanging(value)
				Me.SendPropertyChanging
				Me._TermName = value
				Me.SendPropertyChanged("TermName")
				Me.OnTermNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_InsuredClass", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property InsuredClass() As String
		Get
			Return Me._InsuredClass
		End Get
		Set
			If (String.Equals(Me._InsuredClass, value) = false) Then
				Me.OnInsuredClassChanging(value)
				Me.SendPropertyChanging
				Me._InsuredClass = value
				Me.SendPropertyChanged("InsuredClass")
				Me.OnInsuredClassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_GrossCost", DbType:="Money NOT NULL")>  _
	Public Property GrossCost() As Decimal
		Get
			Return Me._GrossCost
		End Get
		Set
			If ((Me._GrossCost = value)  _
						= false) Then
				Me.OnGrossCostChanging(value)
				Me.SendPropertyChanging
				Me._GrossCost = value
				Me.SendPropertyChanged("GrossCost")
				Me.OnGrossCostChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BookPremium", DbType:="Money NOT NULL")>  _
	Public Property BookPremium() As Decimal
		Get
			Return Me._BookPremium
		End Get
		Set
			If ((Me._BookPremium = value)  _
						= false) Then
				Me.OnBookPremiumChanging(value)
				Me.SendPropertyChanging
				Me._BookPremium = value
				Me.SendPropertyChanged("BookPremium")
				Me.OnBookPremiumChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enrollees", DbType:="Int NOT NULL")>  _
	Public Property Enrollees() As Integer
		Get
			Return Me._Enrollees
		End Get
		Set
			If ((Me._Enrollees = value)  _
						= false) Then
				Me.OnEnrolleesChanging(value)
				Me.SendPropertyChanging
				Me._Enrollees = value
				Me.SendPropertyChanged("Enrollees")
				Me.OnEnrolleesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TotalCost", DbType:="Money NOT NULL")>  _
	Public Property TotalCost() As Decimal
		Get
			Return Me._TotalCost
		End Get
		Set
			If ((Me._TotalCost = value)  _
						= false) Then
				Me.OnTotalCostChanging(value)
				Me.SendPropertyChanging
				Me._TotalCost = value
				Me.SendPropertyChanged("TotalCost")
				Me.OnTotalCostChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TotalPremium", DbType:="Money NOT NULL")>  _
	Public Property TotalPremium() As Decimal
		Get
			Return Me._TotalPremium
		End Get
		Set
			If ((Me._TotalPremium = value)  _
						= false) Then
				Me.OnTotalPremiumChanging(value)
				Me.SendPropertyChanging
				Me._TotalPremium = value
				Me.SendPropertyChanged("TotalPremium")
				Me.OnTotalPremiumChanged
			End If
		End Set
	End Property
	
	<Association(Name:="OverlandPark_Enrollment_Group_OverlandPark_EnrollmentActivity", Storage:="_OverlandPark_Enrollment_Group", ThisKey:="OverlandParkGroupId", OtherKey:="OverlandParkGroupId", IsForeignKey:=true)>  _
	Public Property OverlandPark_Enrollment_Group() As OverlandPark_Enrollment_Group
		Get
			Return Me._OverlandPark_Enrollment_Group.Entity
		End Get
		Set
			Dim previousValue As OverlandPark_Enrollment_Group = Me._OverlandPark_Enrollment_Group.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OverlandPark_Enrollment_Group.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OverlandPark_Enrollment_Group.Entity = Nothing
					previousValue.OverlandPark_EnrollmentActivities.Remove(Me)
				End If
				Me._OverlandPark_Enrollment_Group.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OverlandPark_EnrollmentActivities.Add(Me)
					Me._OverlandParkGroupId = value.OverlandParkGroupId
				Else
					Me._OverlandParkGroupId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("OverlandPark_Enrollment_Group")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
