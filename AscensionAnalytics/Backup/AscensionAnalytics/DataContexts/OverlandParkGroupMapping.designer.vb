'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5477
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="David")>  _
Partial Public Class OverlandParkGroupMappingDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertOverlandPark_GroupMapping(instance As OverlandPark_GroupMapping)
    End Sub
  Partial Private Sub UpdateOverlandPark_GroupMapping(instance As OverlandPark_GroupMapping)
    End Sub
  Partial Private Sub DeleteOverlandPark_GroupMapping(instance As OverlandPark_GroupMapping)
    End Sub
  Partial Private Sub InsertOverlandPark_Group(instance As OverlandPark_Group)
    End Sub
  Partial Private Sub UpdateOverlandPark_Group(instance As OverlandPark_Group)
    End Sub
  Partial Private Sub DeleteOverlandPark_Group(instance As OverlandPark_Group)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AscensionAnalytics.My.MySettings.Default.DavidConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property OverlandPark_GroupMappings() As System.Data.Linq.Table(Of OverlandPark_GroupMapping)
		Get
			Return Me.GetTable(Of OverlandPark_GroupMapping)
		End Get
	End Property
	
	Public ReadOnly Property OverlandPark_Groups() As System.Data.Linq.Table(Of OverlandPark_Group)
		Get
			Return Me.GetTable(Of OverlandPark_Group)
		End Get
	End Property
End Class

<Table(Name:="dbo.OverlandPark_GroupMapping")>  _
Partial Public Class OverlandPark_GroupMapping
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OverlandParkGroupMappingId As Integer
	
	Private _ClaimsIdentification As String
	
	Private _OverlandParkGroupId As Integer
	
	Private _OverlandPark_Group As EntityRef(Of OverlandPark_Group)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOverlandParkGroupMappingIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnOverlandParkGroupMappingIdChanged()
    End Sub
    Partial Private Sub OnClaimsIdentificationChanging(value As String)
    End Sub
    Partial Private Sub OnClaimsIdentificationChanged()
    End Sub
    Partial Private Sub OnOverlandParkGroupIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnOverlandParkGroupIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OverlandPark_Group = CType(Nothing, EntityRef(Of OverlandPark_Group))
		OnCreated
	End Sub
	
	<Column(Storage:="_OverlandParkGroupMappingId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property OverlandParkGroupMappingId() As Integer
		Get
			Return Me._OverlandParkGroupMappingId
		End Get
		Set
			If ((Me._OverlandParkGroupMappingId = value)  _
						= false) Then
				Me.OnOverlandParkGroupMappingIdChanging(value)
				Me.SendPropertyChanging
				Me._OverlandParkGroupMappingId = value
				Me.SendPropertyChanged("OverlandParkGroupMappingId")
				Me.OnOverlandParkGroupMappingIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ClaimsIdentification", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ClaimsIdentification() As String
		Get
			Return Me._ClaimsIdentification
		End Get
		Set
			If (String.Equals(Me._ClaimsIdentification, value) = false) Then
				Me.OnClaimsIdentificationChanging(value)
				Me.SendPropertyChanging
				Me._ClaimsIdentification = value
				Me.SendPropertyChanged("ClaimsIdentification")
				Me.OnClaimsIdentificationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OverlandParkGroupId", DbType:="Int NOT NULL")>  _
	Public Property OverlandParkGroupId() As Integer
		Get
			Return Me._OverlandParkGroupId
		End Get
		Set
			If ((Me._OverlandParkGroupId = value)  _
						= false) Then
				If Me._OverlandPark_Group.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnOverlandParkGroupIdChanging(value)
				Me.SendPropertyChanging
				Me._OverlandParkGroupId = value
				Me.SendPropertyChanged("OverlandParkGroupId")
				Me.OnOverlandParkGroupIdChanged
			End If
		End Set
	End Property
	
	<Association(Name:="OverlandPark_Group_OverlandPark_GroupMapping", Storage:="_OverlandPark_Group", ThisKey:="OverlandParkGroupId", OtherKey:="OverlandParkGroupId", IsForeignKey:=true)>  _
	Public Property OverlandPark_Group() As OverlandPark_Group
		Get
			Return Me._OverlandPark_Group.Entity
		End Get
		Set
			Dim previousValue As OverlandPark_Group = Me._OverlandPark_Group.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OverlandPark_Group.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OverlandPark_Group.Entity = Nothing
					previousValue.OverlandPark_GroupMappings.Remove(Me)
				End If
				Me._OverlandPark_Group.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OverlandPark_GroupMappings.Add(Me)
					Me._OverlandParkGroupId = value.OverlandParkGroupId
				Else
					Me._OverlandParkGroupId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("OverlandPark_Group")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.OverlandPark_Groups")>  _
Partial Public Class OverlandPark_Group
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OverlandParkGroupId As Integer
	
	Private _OverlandParkGroupCode As String
	
	Private _OverlandParkGroupName As String
	
	Private _OverlandPark_GroupMappings As EntitySet(Of OverlandPark_GroupMapping)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOverlandParkGroupIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnOverlandParkGroupIdChanged()
    End Sub
    Partial Private Sub OnOverlandParkGroupCodeChanging(value As String)
    End Sub
    Partial Private Sub OnOverlandParkGroupCodeChanged()
    End Sub
    Partial Private Sub OnOverlandParkGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnOverlandParkGroupNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OverlandPark_GroupMappings = New EntitySet(Of OverlandPark_GroupMapping)(AddressOf Me.attach_OverlandPark_GroupMappings, AddressOf Me.detach_OverlandPark_GroupMappings)
		OnCreated
	End Sub
	
	<Column(Storage:="_OverlandParkGroupId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property OverlandParkGroupId() As Integer
		Get
			Return Me._OverlandParkGroupId
		End Get
		Set
			If ((Me._OverlandParkGroupId = value)  _
						= false) Then
				Me.OnOverlandParkGroupIdChanging(value)
				Me.SendPropertyChanging
				Me._OverlandParkGroupId = value
				Me.SendPropertyChanged("OverlandParkGroupId")
				Me.OnOverlandParkGroupIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OverlandParkGroupCode", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property OverlandParkGroupCode() As String
		Get
			Return Me._OverlandParkGroupCode
		End Get
		Set
			If (String.Equals(Me._OverlandParkGroupCode, value) = false) Then
				Me.OnOverlandParkGroupCodeChanging(value)
				Me.SendPropertyChanging
				Me._OverlandParkGroupCode = value
				Me.SendPropertyChanged("OverlandParkGroupCode")
				Me.OnOverlandParkGroupCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OverlandParkGroupName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property OverlandParkGroupName() As String
		Get
			Return Me._OverlandParkGroupName
		End Get
		Set
			If (String.Equals(Me._OverlandParkGroupName, value) = false) Then
				Me.OnOverlandParkGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._OverlandParkGroupName = value
				Me.SendPropertyChanged("OverlandParkGroupName")
				Me.OnOverlandParkGroupNameChanged
			End If
		End Set
	End Property
	
	<Association(Name:="OverlandPark_Group_OverlandPark_GroupMapping", Storage:="_OverlandPark_GroupMappings", ThisKey:="OverlandParkGroupId", OtherKey:="OverlandParkGroupId")>  _
	Public Property OverlandPark_GroupMappings() As EntitySet(Of OverlandPark_GroupMapping)
		Get
			Return Me._OverlandPark_GroupMappings
		End Get
		Set
			Me._OverlandPark_GroupMappings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OverlandPark_GroupMappings(ByVal entity As OverlandPark_GroupMapping)
		Me.SendPropertyChanging
		entity.OverlandPark_Group = Me
	End Sub
	
	Private Sub detach_OverlandPark_GroupMappings(ByVal entity As OverlandPark_GroupMapping)
		Me.SendPropertyChanging
		entity.OverlandPark_Group = Nothing
	End Sub
End Class
